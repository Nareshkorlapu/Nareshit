|--------------|
| Program-1 :- | [ok]
|--------------|

Write a C program to accept an ID from the user and display the corresponding department.

-> IDs from 11 to 15 belong to the Software department.
-> IDs from 16 to 20 belong to the Developer department.
-> IDs from 21 to 23 belong to the Management department.

Sample-run :-
-------------

Test Cases :-
--------------

|-----------------------------------------------------|
|Test Case No.	Input ID	Expected Output       |
|-----------------------------------------------------|
|  1    	  11		Software department   |
|  2		  16		Developer department  |
|  3	 	  21		Management department |
|  4 (Invalid)	  25		Invalid ID            |
|-----------------------------------------------------|

|--------------|
| Program-2 :- | [ok]
|--------------|

Write a C program to accept a user ID of 1001 and a password of 1010. Prompt the user to enter their ID. If the ID is valid, ask the user to enter their password. If the password is correct, display the name of the user. Otherwise, display "Incorrect Password". If the ID does not exist, display "Incorrect ID".

Develop this program using a switch-case statement.

Sample-run :-
-------------

Test-Case-1 (Valid)
-------------------
Input :-
---------
User ID: 1001
Password: 1010
Expected Output: Display the user’s name (e.g., "User: John Doe").

Test-Case-2 (Invalid Password)
------------------------------
Input :-
--------
User ID: 1001
Password: 2020
Expected Output: "Incorrect Password"

Test-Case-3 (Invalid ID)
-------------------------
Input :-
--------
User ID: 2000
Expected Output: "Incorrect ID"

Test-Case-4 (Empty Input for ID)
--------------------------------
Input :-
--------
User ID: (no input)
Expected Output: "Incorrect ID"

|--------------|
| Program-3 :- | [ok]
|--------------|

Write a C program that asks for a person's name and their game score. Then, it asks for the second person's name and score. The program will print the winner's name and display by how many points the winner won, by comparing the scores. Develop this program using a switch case.

Sample-run :-
-------------
Test Case 1: Valid Input (Player 1 Wins)
----------------------------------------
Input :-
--------
Enter name of Player 1: Alice
Enter score of Player 1: 85
Enter name of Player 2: Bob
Enter score of Player 2: 75

Expected Output :-
------------------
Winner: Alice
Points difference: 10

Test Case 2: Valid Input (Player 2 Wins)
-----------------------------------------
Input :-
--------
Enter name of Player 1: David
Enter score of Player 1: 60
Enter name of Player 2: Eve
Enter score of Player 2: 95

Expected Output :-
------------------
Winner: Eve
Points difference: 35

Test Case 3: Valid Input (Tie Case)
-----------------------------------
Input :-
--------
Enter name of Player 1: John
Enter score of Player 1: 80
Enter name of Player 2: Sarah
Enter score of Player 2: 80

Expected Output :-
-------------------
It's a tie!
Points difference: 0

Test Case 4: Invalid Input (Negative Score)
-------------------------------------------
Input :-
--------
Enter name of Player 1: Chris
Enter score of Player 1: -50
Enter name of Player 2: Anna
Enter score of Player 2: 70

Expected Output :-
-------------------
Invalid input: Score cannot be negative.

|--------------|
| Program-4 :- | [ok]
|--------------|

Using a switch statement, write a C program to take input marks of five subjects from the user: Physics, Chemistry, Biology, Mathematics, and Computer.

Calculate the percentage and determine the grade according to the following criteria:

Percentage >= 90%: Grade A
Percentage >= 80%: Grade B
Percentage >= 70%: Grade C
Percentage >= 60%: Grade D
Percentage >= 40%: Grade E
Percentage < 40%: Grade F

Note: Take all input values as integers.

Sample-run :-
-------------

Test Case 1 (Valid Input) :-
-----------------------------
Input marks: Physics = 85, Chemistry = 90, Biology = 88, Mathematics = 92, Computer = 80
Total Marks: 435
Percentage: 87%

-> Expected Grade: B

Test Case 2 (Valid Input) :-
-----------------------------
Input marks: Physics = 45, Chemistry = 50, Biology = 55, Mathematics = 60, Computer = 40
Total Marks: 250
Percentage: 50%

-> Expected Grade: E

Test Case 3 (Valid Input) :-
-----------------------------
Input marks: Physics = 95, Chemistry = 92, Biology = 90, Mathematics = 93, Computer = 96
Total Marks: 466
Percentage: 93.2%

-> Expected Grade: A

Test Case 4 (Invalid Input) :-
-------------------------------
Input marks: Physics = -10, Chemistry = 110, Biology = 80, Mathematics = 95, Computer = 70
Reason: Marks cannot be negative or exceed 100.

-> Expected Output: Display an error message indicating invalid input.

|--------------|
| Program-5 :- |
|--------------|

Write a C program that reads a float value and a character from the console. The character can be 'd' for deposit or 'w' for withdrawal.

Start with a minimum balance of 2000.

-> Prompt the user to initialize the minimum balance. Do not allow 0 or negative values. If the balance is 0 or negative, print: "Amount can't be stored".
-> If the user chooses the deposit operation, ask how much amount they want to deposit. Add that amount to the balance and print the updated balance.
-> If the user chooses the withdrawal operation, ask how much amount they want to withdraw. Subtract that amount from the balance and print the updated balance.

[Note]
------
-> If the deposit amount is negative or 0, print: "Invalid amount".
-> If the withdrawal amount is negative, 0, or greater than the current balance, print: "Invalid amount".

Hints :-
--------
-> Declare variables for amount (float), balance (float), and transaction code (char).
-> Check the transaction code. If it is ‘d’ (deposit), ensure the amount is not negative.
	If the amount is valid, update the balance:
	balance = balance + amount;
-> Check the transaction code for withdrawal, ‘w’. If the code is ‘w’, subtract the withdrawn amount to update the balance:
	balance = balance - amount;

Print the updated balance.

Sample-run :-
-------------

Test-Case-1: [Valid Deposit Operation]
--------------------------------------
Input :-
---------
Enter initial balance: 3000
Enter transaction code (d for deposit, w for withdrawal): d
Enter amount: 500

Expected Output :-
-------------------
Balance after deposit: 3500

Description: The user starts with an initial balance of 3000 and deposits 500. The new balance is updated and displayed correctly.

Test-Case-2: [Invalid Initial Balance]
---------------------------------------
Input :-
---------

Enter initial balance: -100

Expected Output :-
-------------------
Amount can't be stored

Description: The user tries to initialize the balance with a negative value. The program handles this by displaying an appropriate error message.

Test-Case-3: [Invalid Deposit Amount]
--------------------------------------
Input :-
---------

Enter initial balance: 2000
Enter transaction code (d for deposit, w for withdrawal): d
Enter amount: -200

Expected Output :-
-------------------

Description: The user selects the deposit operation but tries to deposit a negative amount. The program detects this invalid input and displays an error message.

Test-Case-4: [Invalid Withdrawal Amount]
-----------------------------------------
Input :-
--------
Enter initial balance: 2500
Enter transaction code (d for deposit, w for withdrawal): w
Enter amount: 3000

Expected Output :-
---------------------
Invalid amount