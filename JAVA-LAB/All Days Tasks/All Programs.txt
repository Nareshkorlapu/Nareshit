24/01/25
******
1.WJP for checking voting eligibility of the person by following few requirements
i. If the age is graeter than 18 eligible for voting else not eligible
Code:
class Vote
{
	public static void main(String []args)
	{
		int age=20;
  		if(age>=18)
		{
			System.out.println("Eligible for voting");
		}
		else
		{
			System.out.println("Not eligible for voting");
		}
	
	}	

}
--------------------------------------------------------------
2.WJP to find out the biggest number among three number
i.int a=5,b=6,c=7
output as Biggest number is 7

ii.int a=5,b=16,c=7
output as Biggest number is 16

iii.int a=25,b=6,c=7
output as Biggest number is 25
Code:

----------------------------------------------------------------
3. WJP by round of the number by following few requirements
If the last number is less than 5 round of the previous multiple of 10
If the last number is greater or equal than 5 round of the previous multiple of 10
i. input a=34, output =30
ii. input a=38,output =40
Code:
class Round
{
	public static void main(String agrs[])
	{
		int a=34;
		if(a%10<=5)
		{
			int result=(a/10)*10;
			System.out.println(result);
		}
		else
		{
			int result1=((a/10)+1)*10;
			System.out.println(result1);
		}
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27/01/25

1. Who invented Java Programming?
a) Guido van Rossum
b) James Gosling
c) Dennis Ritchie
d) Bjarne Stroustrup
A:B

2. Which statement is true about Java?
a) Java is a sequence-dependent programming language
b) Java is a code dependent programming language
c) Java is a platform-dependent programming language
d) Java is a platform-independent programming language
A:D


3. Which component is used to compile, debug and execute the java programs?
a) JDK
b) JIT
c) JRE
d) JVM
A:A

4. What is the extension of java code files?
a) .js
b) .txt
c) .class
d) .java
A:D


5. What is the extension of compiled java classes?
a) .txt
b) .js
c) .class
d) .java
A:B


6. What is the size of an int in Java?
a) 16 bits
b) 32 bits
c) 64 bits
d) Platform dependent 
A:B

7.JDK stands for ____.
a) Java development kit
b) Java deployment kit
c) JavaScript deployment kit
d) None of these
A:A


8.JRE stands for ___.
a) Java run ecosystem
b) JDK runtime Environment
c) Java Runtime Environment
d) None of these
A:C

9.Which of these is not a valid Java datatype?
a) float
b) boolean
c) character
d) byte
A:C

10.Every statement in Java language should end with a?
a) Dot or Period
b) Comma
c) Semicolon
d) Colon
A:C

11. What was the original name of Java before it was renamed?
a) Oak
b) Silk
c) Dynamic
d) Spruce
A:A

12.Java was developed at which company?
a) Microsoft
b) IBM
c) Sun Microsystems
d) Google
A:C

13.Choose a Single Line Comment in Java Language below?
a)  //Some comments
b) Some comments//
c)  /*Some comments*/
d) */Some comments/*
A:A


14.Name of a Class, Variable, Method or an Interface in Java language is called?
a) Argument
b) Value
c) Identifier
d) None of the above
A:


15. What was one of the main reasons Java was renamed from Oak to Java?
a) Oak was already a trademarked name.
b) The team liked the name Java better.
c) It was named after the island of Java.
d) Oak was not suitable for marketing.
A:A


16.Which of the following declarations does not compile?
a) double num1, int num2 = 0;
b)  int num1, num2;
c) int num1, num2 = 0;
d)  int num1 = 0, num2 = 0;
A:A


17.A compiler converts the Java program into an intermediate language representation called ___
a) bytecode
b) byte
c) byteclass
d) bytejava
A:A


18.Which organization currently maintains the Java programming language?
a) Google
b) Oracle Corporation
c) Microsoft
d) Apple
A:B

19.What is byte code in the context of Java?
a) The type of code generated by a Java compiler.
b) The type of code generated by a Java Virtual Machine.
c) It is another name for a Java source file.
d) It is the code written within the instance methods of a class.
A:A

20.Identify, from among the following, the incorrect variable name(s).
a) _theButton 
b) $reallyBigNumber
c) 2ndName 
d) CurrentWeatherStateofplanet
e) my2ndFont.
A:C


21.Which of the following is not a primitive data type in Java?
a) int
b) float
c) boolean
d) String
A:D


22.Which of the following is responsible for converting Java bytecode into machine-specific code?
a) JRE
b) JIT compiler
c) Java compiler
d) JVM
A:D

23.Java programs are ........ independent.
a)  platform
b)  procedural
c)  high level
d)  Secure
A:A

24. Which component is included in both JDK and JRE?
a) JVM
b) Compiler
c) Debugger
d) IDE
A:A

25.What does JIT stand for in Java?
a) Java Interpreting Tool
b) Just-In-Time Compiler
c) Java Information Technology
d) Java Integration Toolkit
A:B


26.Which of the following is the correct relationship among JDK, JRE, and JVM?
a) JRE includes JVM, and JDK includes JRE.
b) JVM includes JRE, and JRE includes JDK.
c) JDK includes JVM, and JVM includes JRE.
d) JRE includes JDK, and JDK includes JVM
A:A

27.A valid Identifier or name in Java language can start with which character?
a) a-z, A-Z
b) $, _
c) 0-9
d) A and B
A:D


28.The JVM is a part of which of the following?
a) JDK only
b) JRE only
c) Both JDK and JRE
d) Neither JDK nor JRE
A:C

29.Multiline comment is created using ___.
a) //
b) /* */
c) <!--  -- >
d) All of these
A:B


30.What makes the Java platform independent?
a) Advanced programming language
b) It uses JVM for execution
c) Class compilation
d) All of these
A:B



31.Number of primitive data types in Java are?
a)5
b)6
c)7
d)8
A:D


32.What is the size of float and double in java?
a)32 and 64
b)32 and 32
c)64 and 64
d)64 and 32
A:A



33.Which of the following statements about JVM is true?
a) JVM is platform-independent.
b) JVM is platform-dependent.
c) JVM compiles Java source code into bytecode.
d) JVM is responsible for garbage collection in Java
A:C


34.Which of the following tasks does JIT perform?
a) Converts Java source code to bytecode.
b) Converts bytecode to native machine code.
c) Manages memory allocation for Java objects.
d) Executes bytecode line by line.
A:B

35.What does the JDK provide that the JRE does not?
a) JVM
b) Libraries for running Java applications
c) Development tools like a compiler and debugger
d) Native machine code
A:C

36. What is a Compiler?
A) A Compiler scans entire program at once.
B) A compiler converts source code to byte code
C) Compiler is slow in debugging.
D) All the above
A:D


37.Choose a correct statement about Java source files.
A) Java files are human readable
B) Java files contain Classes with Methods and Variables
C) Import statements import library Classes into our class
D) All the above
A:D

38.Byte code is the result of?
A) Compiling a Java file
B) Compiling a Class file
C) Interpreting a Java File
D) Interpreting a Class file
A:A


39.What does it mean for Java to be platform-independent?
a) Java can only run on Windows.
b) Java source code can be compiled into native code for different platforms.
c) Java programs can run on any platform without modification.
d) Java programs must be rewritten for different platforms.
A:B


40.When was first Version of Java i.e Java 1.0 was released?
A) 1991
B) 1994
C) 1996
D) 1999
A:C

41.In Java, platform independence is achieved by compiling the source code into what?
a) Machine code
b) Assembly code
c) Bytecode
d) Native code
A:C

42.What is JIT in Java?
A) Java In Timer
B) Java In Time Thread
C) Just In Time Compiler
D) Just In Time Runnable
A:C



43.Choose the correct statement about Java?
A) JIT Compiler produces Byte Code from Java file.
B) JIT Compiler takes chunks of Byte Code as input and produces Executable code on that particular machine.
C) JIT Compiler assists the actual JAVAC compiler to compile fast
D) None of the above
A:B



44.What role does bytecode play in making Java platform-independent?
a) Bytecode is platform-specific and executed directly by the hardware.
b) Bytecode is interpreted by the JVM, making Java programs run on any platform with a JVM.
c) Bytecode is compiled into machine code by the JIT compiler for each platform.
d) Bytecode is an intermediate language that only works on Linux-based platforms.
A:B


45.Which of the following is a limitation of Java’s platform independence?
a) Java applications can only run on UNIX-based systems.
b) Java applications require the presence of a JVM for the target platform.
c) Java must be recompiled for each platform to achieve platform independence.
d) Java bytecode is different for different platforms.
A:B



46.What happens when you run the javac command?
a) It converts the Java source code into machine-specific code.
b) It translates Java source code into bytecode.
c) It runs the compiled Java program.
d) It converts bytecode into platform-specific instructions.
A:D

47.A function in C language is similar to what in Java language?
A) Method
B) Member
C) Variable
D) None of the above
A:A

48. What is the primary role of the JVM (Java Virtual Machine)?
a) It compiles Java code into bytecode.
b) It converts bytecode into machine code and runs Java applications.
c) It is used for debugging Java code.
d) It is a part of the Java compiler.
A:B

49.Choose a correct version of Java Documentation Comment?
A) 
/*
comments
*/
B) 
/**
comments
*/
C) 
/*
comments
**/
D) 
/**
comments
**/

Ans :B

50.which among the following is not a Data Type in Java?
A) short
B) int
C) long double
D) double
A:C
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28/01/25
Q1) Write a program to perform addition,subtraction, multiplication and 
    division between two numbers using 3rd variable.
Code:
public class Sum
{
	public static void main(String [] args)
	{
		int a=10;
		int b=20;
		int c=a+b;
		System.out.println("The sum is :"+c);
 		c=a-b;
		System.out.println("The sub is :"+c);
		c=a*b;
		System.out.println("The Mul is :"+c);
		c=a/b;
		System.out.println("The div is :"+c);

	}
}
--------------------------------------------------------------------------
Q2) Write a program to perform addition using command line Argument.
Code:
public class Commandline
{
	public static void main(String[] args)
	{

		int a=Integer.parseInt(args[0]);
		int b=Integer.parseInt(args[1]);
		System.out.println("The Sum is:"+(a+b));
	}
}
------------------------------------------------------------------------------
Q3) Write a program to find out the area of circle by taking the value
    from Command line arguments
Code:
public class Areaofcircle
{
	public static void main(String[] args)
	{
		final double pi=3.14;
		double radius=Double.parseDouble(args[0]);
		System.out.println("Area of Circle is:"+(pi*radius*radius));
	}
}
---------------------------------------------------------------------------------
Q4) Write a program to swap to numbers without using 3rd variable using 
    command line argument.
Code:
public class Swaping
{
	public static void main(String [] args)
	{
		int a=Integer.parseInt(args[0]);
		int b=Integer.parseInt(args[1]);
		a=a+b;
		b=a-b;
		a=a-b;

		System.out.println("After swap: num1 =" + a + ",num2 = " + b);
	}
}
------------------------------------------------------------------------------------- 
Q5) Write a Java program to calculate the factorial of a number where number must be taken from command line argument.
Code:
public class Factorial
{
	public static void main(String [] args)
	{

		int a=Integer.parseInt(args[0]);
		int fact=1;
		for(int i=1;i<=a;i++) 
		{
  			fact=fact*i;
  		}
		System.out.println("The Factorial is:"+fact);

	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29/01/25

1) Write a java program that accepts a number as a command-line argument and prints its multiplication table.
- if number is negative print "Error" message on console. 
Code:
public class MultiplicationTable
{
	public static void main(String [] args)
	{
		int num=Integer.parseInt(args[0]);
		if(num>0)
		{
		for(int i=1;i<=10;i++)
		{
			System.out.println(num+"*"+i+"="+num*i);
		}
		}
		else
		{
			System.out.println("Error");
		}
	}
}
-------------------------------------------------------------------------------------------
2)Write a Java program that accepts three numbers as command-line arguments and calculates their average.
- if any number is negative print "Error" message on console.
Code:
public class Average
{
	public static void main(String[] args)
	{
		float num1=Float.parseFloat(args[0]);
		float num2=Float.parseFloat(args[1]);
		float num3=Float.parseFloat(args[2]);
		if(num1>0&&num2>0&&num3>0)
		{
			float avg=(num1+num2+num3)/3;
			System.out.println("The Average is :"+avg);
		}
		else System.out.println("Error");
	}
}
--------------------------------------------------------------------------------------------
3)Write a Java program that accepts a single integer as a command-line argument and checks whether it is a prime or not.
- if number is negative print "Error" message on console.
Code:
public class PrimeNumber
{
	public static void main(String [] args)
	{
		int num=Integer.parseInt(args[0]);

		int c=0;
		if(num>0)
		{
			for(int i=1;i<=num;i++)
			{
				if(num%i==0)c++;
			}
		if(c==2)System.out.println("It is Prime");

		else System.out.println("It is Not Prime");
		}
		else
		{
			System.out.println("Error");
		}
	}
}
--------------------------------------------------------------------------------------------
4)Write a Java program that accepts a single integer as a command-line argument and prints the first n numbers of the Fibonacci series.
- if arguments length is 0 print "Error" message on console.
Code:
public class FibonacciSeries
{
	public static void main(String [] args)
	{
		int num=Integer.parseInt(args[0]);



		int a = 0, b = 1;
            	System.out.print("Fibonacci Series: ");
            
            	for (int i=1;i<=num;i++) {
                	System.out.print(a+" ");
                	int next = a + b;
                	a = b;
                	b = next;
            }
            System.out.println();
	}
}
--------------------------------------------------------------------------------------------
5)Write a Java program that accepts a single integer n as a command-line argument and calculates the sum of all odd and even numbers from 1 to n (inclusive). Display the results separately for odd and even sums. 

input : 10 
output :
Sum of even numbers from 1 to 10: 30
Sum of odd numbers from 1 to 10: 25
Code:
public class EvenSumOddSum
{
	public static void main(String [] args)
	{
		int num=Integer.parseInt(args[0]);
		int EvenSum=0,OddSum=0;
		for(int i=1;i<=num;i++)
		{
			if(i%2==0)
			{
				EvenSum+=i;
			}
			else
			{
				OddSum+=i;
			}
		}
		System.out.println("Sum of even numbers from 1 to "+num+":"+EvenSum);
		System.out.println("Sum of odd numbers from 1 to "+num+":"+OddSum);
	}
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30/0/25
Program 01:
-----------
Write a  program in Java that will generate and print the bill at Dominos for four chicken rolls (@ Rs 60 per chicken rolls) and three vegetable puffs (@ Rs 25 per vegetable puffs). There is a special discount of Rs 50 on the final bill amount. Calculate and print final bill as well as all item bill.
Code:
public class Dominos
{
	public static void main(String [] args)
	{
	int chickenroll=60;
	int vegpuffs=25;

	int noofchickrolls=Integer.parseInt(args[0]);
	int noofvegpuffs=Integer.parseInt(args[1]);

	int total=((chickenroll*noofchickrolls)+(vegpuffs*noofvegpuffs))-50;
	System.out.println("The Total Bill Of Your Order Is :"+total);

	}
}
---------------------------------------------------------------------------------------------
Program 02:
-----------
Write a Java program to check if a given number is a palindrome. A number is a palindrome if it remains the same when its digits are reversed.
Code:
public class Palindrome
{
	public static void main(String [] args)
	{
 		int num=Integer.parseInt(args[0]);
 		int pal=num;
		int num1=0;

		 while(num!=0)
    		{
        		int a=num%10;
    			num1=num1*10+a;
    			num=num/10;
     		}

if(num1= =pal)
{
System.out.println("It is palindrome");
}

else
{
System.out.println("It is not palindrome");
}

}
}
--------------------------------------------------------------------------------------------
Program 03:
----------
Write a program in Java to display the following pattern on the screen without using loop.
@@@@@@@@
@      @
@      @
@      @
@      @
@      @
@@@@@@@@

Code:
-----------------------------------------------------------------------------------------------
Program 04:
-----------
Write a program to input the basic salary of a person. He gets 15% of the basic as HRA, 15% of the basic as Conveyance allowance and 10% of the basic as Entertainment allowance. The total salary is calculated by adding Basic + HRA + Conveyance + Entertainment Allowance. Calculate and print the total salary of person.
Take the Basic Salary from Command Line Argument
Code:
public class BasicSalary
{
public static void main(String [] args)
{
int salary=Integer.parseInt(args[0]);

double totalsalary=salary+(salary*.15)+(salary*.15)+(salary*.10);

System.out.println("The Total Salary Is :"+totalsalary);
}
}
---------------------------------------------------------------------------------------------
Program 05 :
-------------
Write a program in java to Fahrenheit to Celsius Program
Formula is :-  celsius=((fahrenheit-32)*5)/9;
Code:
pulic class FahrTOCel
{
public static void main(String []args)
{
float fahr=Float.parseFloat(args[0]);

double celsius=((fahr-32)*5)/9;

System.out.println("Fahrenheit to "+fahr+" Celsius "+Celsius);
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

31/01/25
Program-1
-----------
A shopkeeper buys a TV set for Rs. 32,500 and sells it at a profit of 27%. Apart from this a VAT of 12.7% and Service Charge is 3.87% is charged. Display total selling price, profit along with vat and service charge.
Code:
public class Profit
{
public static void main(String []args)
{

int totalprice=32500;

System.out.println("Total selling price of TV "+(totalprice+totalprice*0.27+totalprice*0.127+totalprice*0.0387));
System.out.println("The Profit is "+(totalprice*0.27+totalprice*0.127+totalprice*0.0387));
}
}
----------------------------------------------------------------------------------------------
Program-2
----------
Rohan purchased an old cycle for Rs. 1200 and spend Rs. 250 on repairs, Rs. 350 in coloring and added new accessories worth Rs. 500. Rohan wants to make a profit of Rs. 1500 on selling the cycle. Find the selling price of the cycle. Write a java program to store all values and calculate and display the selling price.
Code:
public class Cycle
{
public static void main(String [] args)
{
int oldcycleprice=1200;
int repairs=250;
int coloring=350;
int accse=500;

System.out.println("The Selling Price is "+(oldcycleprice+repairs+coloring+accse+1500));
}
}
----------------------------------------------------------------------------------------------
Program-3
----------
Write a program to enter Principal, Rate and Time. Calculate and display Simple Interest and Amount.
Code:
public class SimpleInterest
{
public static void main(String[] args)
{
float principle=Float.parseFloat(args[0]);
float rate=Float.parseFloat(args[1]);
float time=Float.parseFloat(args[2]);

float simpleinterest=(principle*rate*time)/100;
float amount=principle+simpleinterest;

System.out.println("Simple Interest :"+simpleinterest);
System.oout.println("Amount :"+amount);
}
}
----------------------------------------------------------------------------------------------
Program-4
----------
Write a program in java to input number of days. Find and display number of years, months and days.
Code:
public class Years
{
public static void main(String[] args)
{

int days=Integer.parseInt(args[0]);

int years=days/365;
int months=days%365/30;
days=days%365%30;
float day=days;

System.out.println("Years "+years+" Months "+months+" Days "+day);
}
}
----------------------------------------------------------------------------------------------
Program-5
-----------
A whole-seller gives incentives in the form of discounts on the net bill. Write a program to input the net bill and calculate the discount as follows:

     Net Bill in Rupees			    Discount %
	<5000					5
	>=5000 and <10000			10
	>=10000					15

Display Discount %, Discount Amount and Amount Payable

Code:
public class NetBill
{
public static void main(String[] args)
{
float bill=Integer.parseInt(args[0]);

if(bill<5000)
{
float dis=0.05f;
float disamt=bill*0.05f;
float totbill=(bill-(bill*0.05f));
System.out.println("Discount % "+dis+" Discount Amount "+disamt+" Payable "+totbill);

}
else if(bill>=5000 && bill<10000)
{
float dis1=.1f;
float disamt1=bill*.1f;
float totbill1=(bill-(bill*.1f));
System.out.println("Discount % "+dis1+" Discount Amount "+disamt1+" Payable "+totbill1);
}

else
{
float dis2=.15f;
float disamt2=bill*.15f;
float totbill2=(bill-(bill*.15f));
System.out.println("Discount % "+dis2+" Discount Amount "+disamt2+" Payable "+totbill2);
}

}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
03/02/25

Que-1)
____________________-
What is the output of the following Java Code?

int a=9;
float b = a/2;
System.out.println(b);

a 4.0
b 4.5
c 5.0
d None of the above
A:D
_____________________________________________________________________
Que-2
____________________
What is the output of the below Java code snippet?

char ch = 'A';//ASCII 65
int a = ch + 1;
ch = (char)a;
System.out.println(ch);

a 66
b A
c B
d 65
A:C
_________________________________________________________________________
QUE-3)
___________________
What is the output of the below Java code snippet?

float a = 8.2/2;
System.out.println(a);

a.
4.1
b.
8.1
c.
4
d.
Compiler error
A:D
__________________________________________________________________________
Que-4)
__________________
What is the output of the Java code snippet?

int a = 260;
byte b= (byte)a;
System.out.println(b);

a.
0
b.
4
c.
255
d.
260
A:B
__________________________________________________________________________
Que-5)
__________________
What is the output of the Java code snippet?

short a = (short)65540;
System.out.println(a);

a.
0
b.
4
c.
65536
d.
65540
A:B
__________________________________________________________________________
Que-6)
__________________
public class MyFirstJavaProgram {
 public static void main(String []args) {
 int a = 300;
 long b = a;
 System.out.println(b);
 }
}
A:300
__________________________________________________________________________
Que-7)
________________
public class WideningExample {
 public static void main(String args[]){
 char ch = 'C';
 int i = ch;
 System.out.println(i);
 }
}
A:67
__________________________________________________________________________
Que-8)
________________
public class Sample {
 public static void main(String[] args)
 {
 System.out.print("Y"+"O");
 System.out.print('L');
 System.out.print('O');
 }
}
A:YOLO
__________________________________________________________________________
Que-9)
________________
public class Sample2 {
 public static void main(String[] args)
 {
 System.out.print("Y"+"O");
 System.out.print('L' + 'O');
 }
}
A:YO155
_________________________________________________________________________
Que-10)
________________
class Sample3{
 public static void main(String[] args)
 {
 int i = 100;
 long l = i;
 float f = l;
 System.out.println("Int value " + i);
 System.out.println("Long value " + l);
 System.out.println("Float value " + f);
 }
}
A:100,100,100.0
________________________________________________________________________
Que-11)
_______________
public class Sample4{
public static void main(String[] argv)
{
char ch = 'c';
int num = 88;
ch = num;
}
}
A:ERROR
________________________________________________________________________
Que-12)
_______________
class Sample5{
public static void main(String args[])
{
byte b = 42;
char c = 'a';
short s = 1024;
int i = 50000;
float f = 5.67f;
double d = .1234;
double result = (f * b) + (i / c) - (d * s);
System.out.println("result = " + result);
}
}
A:626.778
________________________________________________________________________
Programming Questions
________________________________________________________________________
QUE-1)
-----------
Write a java program to covert string to double using parseDouble() and multiply two Floating -point Numbers and display the result by taking input from the command line argument?
Code:
public class MultiplyFloats
 {
    public static void main(String[] args) 
{
       
        if (args.length < 2) {
            System.out.println("Please provide two floating-point numbers as command-line arguments.");
            return;
        }

        try {
            
            double num1 = Double.parseDouble(args[0]);
            double num2 = Double.parseDouble(args[1]);

      
            double result = num1 * num2;

            
            System.out.println("The product of " + num1 + " and " + num2 + " is: " + result);
        } catch (NumberFormatException e) {
            
            System.out.println("Invalid input. Please enter valid floating-point numbers.");
        }
    }
}
-----------------------------------------------------------------------
Que-2)
-----------
Write a java program to find the ASCII value of a character
For Example
Output sholud be in below formart
The ASCII value of a is :97
Code:
public class Assic
{
public static void main(String []args)
{

char a= 'A';
int b=a;
System.out.println("The ASCII value of a is :"+b);
}
}
----------------------------------------------------------------------
Que-3)
-----------
Write a java program to find the profit and loss by following the formula
Profit and loss Formulas – 
Profit = SP – CP
Loss = CP – SP
Profit percentage = (Profit /Cost Price) x 100
Loss percentage = (Loss / Cost price) x 100

Code:
public class ProfitAndLoss
{
public static void main(String [] args)
{
int cp=Integer.parseInt(args[0]);
int sp=Integer.parseInt(args[1]);

int profit=sp-cp;
int loss=cp-sp;

double profitpercentage=(profit/cp)*100;
double losspercentage=(loss/cp)*100;

System.out.println("The Profit Is :"+profit);
System.out.println("The ProfitPercentage Is :"+profitpercentage);
System.out.println("The Loss Is :"+loss);
System.out.println("The LossPercentage Is :"+losspercentage);

}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
04/02/25

Que-1) Write a java program to calculate the curved surface area of a cube?
 Formula-6*side Square.
Code:
public class AreaOfCube
{
public static void main(String [] args)
{
 
int side=Integer.parseInt(args[0]);
double areaofcube=6*(s*s);
System.out.println("The Area Of Cube Is :"+areaofcube);
}
}
----------------------------------------------------------------------------------------------
Que-2) write a java program to calculate the total surface area of a cylinder? 
 Formula- 2 pi square r * 2 pi r h (take the pi as 3.14).
Code:
public class SurfaceAreaOfCylinder
{
public static void main(String[] args)
{
float r=Float.parseFloat(args[0]);
float h=Float.parseFloat(args[1]);
double sac=2*3.13*r(h+r);

System.out.println("The Surface Area Of Cylinder "+sac);
}
}
-------------------------------------------------------------------------------------------------
Que-3) write a Java program to calculate compound interest for 3 years? 
 Formula- amount=principle*((1+rate/100)*(1+rate/100)*(1+rate/100));
Code:
public class CompoundInterest
{
public static void main(String [] args)
{
int p=Integer.parseInt(args[0]);
int rate=Integer.parseInt(args[1]);

double amount=p*((1+rate/100)*(1+rate/100)*(1+rate/100));

System.out.println(amount);
}
}
----------------------------------------------------------------------------------------------
Que-4) write Java Program Convert Fahrenheit To Celsius | Vice Versa
 Formula-
 Celsius=(Fahrenheit-32)*5/9;
 Fahrenheit=((9*Celsius)/5)+32;
 Note [ Write two seprate program for converting celsius into 
Fahrenheit
 and Fahrenheit into celsius ]

Code:
public class  Fahrenheit
{
public static void main(String[]args);
{
float celsius=Float.parseFloat(args[0]);
double  fahrenheit=((9*celsius)/5)+32;

System.out.println("Celsius to Fahrenheit :"+fahrenheit);
}
}
------
public class Celsius
{
public static void main(String[]args);
{
float fahrenheit=Float.parseFloat(args[0]);
double celsius=(fahrenheit-32)*5/9;

System.out.println("Fahrenheit to Celsius :"+Celsius);
}
}

-----------------------------------------------------------------------------------

Que-5) 
--------------------------------------------------------------
public class Literals_Integers 
 {
 public static void main (String args[])
 {
 int decimal_int=1234;
 int octal_int=077;
 int hexadec_int=0x1ff2;
 int binary_int=0b1010101;
 System.out.println("This is a Decimal Literal: "+decimal_int);
 System.out.println("This is an Octal Literal: "+octal_int);
 System.out.println("This is a Hexa Decimal Literal: "+hexadec_int);
 System.out.println("This is a Binary Literal: "+binary_int);
 }
 }
[What will be the output of the above program]
_________________________________________________________________________
Que-6) 
--------------------------------------------------------------
public class Literals_Float
{
 public static void main (String args[])
 {
 float val_float=1.7732f;
 double val_double=1.7732d;
 float val_exponent=123E4f;
 System.out.println("This is a Floating Point Literal"+val_float);
 System.out.println("This is a Decimal Literal"+val_double);
 System.out.println("This is an Exponential 
Literal"+val_exponent);
 }
} 
[What will be the output of the above program]
_________________________________________________________________________
_________________________________________________________________________
_
Que-7)
---------------------------------------------------------------
public class AutomaticTypeConversion
{
 public static void main (String args[])
 {
 int intVariable = 100;
 long longVariable = intVariable;
 float floatVariable = longVariable;
 System.out.println ("Integer Value is : " + intVariable);
 System.out.println ("Float Value is : " + floatVariable);
 System.out.println ("Long Value is : " + longVariable);
 }
}
[What will be the output of the above program]
_________________________________________________________________________
__
Que-8)
---------------------------------------------------------------
public class ExplicitTypeCasting
{
 public static void main (String[]args)
 {
 double doubleVariable = 100.04;
 long longVariable = (long) doubleVariable;
 int intVariable = (int) longVariable;
 System.out.println ("Double Value is : " + doubleVariable);
 System.out.println ("Long Value is : " + longVariable);
 System.out.println ("Integer Value is : " + intVariable);
 }
}
[What will be the output of the above program]
________________________________________________________________________
Que-9)
----------------------------------------------------------------
class Sample
{
 public static void main(String[] args) 
 {
 int a=10;
 float b=4.5f;
 double c=5.2;
 long d=(long)-8.98;
System.out.println(a);
System.out.println(b); 
System.out.println(c); 
System.out.println(d);
}
}
[What will be the output of the above program]
_________________________________________________________________________
____
Que-10)
---------------------------------------------------------------
public class Sample {
public static void main(String[] args) {
int a=10;
float b=4.5f;
double c=5.2;
long d=378293L;
 long e=(long)-8.98;
System.out.println(a);
System.out.println(b); 
System.out.println(c); 
System.out.println(d);
 System.out.println(e);
Sample.main("java");
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
05/02/25
1. Which of these is long data type literal?
a) 0x99fffL
b) ABCDEFG
c) 0x99fffa
d) 99671246
A:A


2. Which of these can be returned by the operator &?
a) Integer
b) Boolean
c) Character
d) Integer or Boolean
A:d


3. Literals in java must be appended by which of these?
a) L
b) l
c) D
d) L and I
A:A


4. Literal can be of which of these data types?
a) integer
b) float
c) boolean
d) all of the mentioned
A:D


5. Which of these can not be used for a variable name in Java?
a) identifier
b) keyword
c) identifier & keyword
d) none of the mentioned
A:B


6. Which of these is an incorrect string literal?
a) “Hello World”
b) “Hello\nWorld”
c) “\”Hello World\””
d)"Hello
   world"
A:C

7. Which of these is necessary condition for automatic type conversion in Java?
a) The destination type is smaller than source type
b) The destination type is larger than source type
c) The destination type can be larger or smaller than source type
d) None of the mentioned
A:B


8. What will be the error in the following Java code?
    byte b = 50;
    b = b * 50;
a) b cannot contain value 100, limited by its range
b) * operator has converted b * 50 into int, which can not be converted to byte without casting
c) b cannot contain value 50
d) No error in this code
A:B

9. If an expression contains double, int, float, long, then the whole expression will be promoted into which of these data types?
a) long
b) int
c) double
d) float
A:C


10. What will be the output of the following Java code?

    class CharIncrement 
    {
        public static void main(String args[]) 
        {
            char c1 = 'D';
            char c2 = 84;
            c2++;
            c1++;
            System.out.println(c1 + " "  + c2);
        } 
    }
a) E U
b) U E
c) V E
d) U F
A:A

11. What will be the output of the following Java code?

    class Conversion 
    {
        public static void main(String args[]) 
        {
            double a = 295.04;
            int  b = 300;
            byte c = (byte) a;
            byte d = (byte) b;
            System.out.println(c + " "  + d);
        } 
    }
a) 38 43
b) 39 44
c) 295 300
d) 295.04 300
A:B

12. What will be the output of the following Java program?

    class Test 
    {    
        public void main( String[] args ) 
        {  
            System.out.println( "Hello" + args[0] ); 
        } 
    }
a) Hello c
b) Hello
c) Hello world
d) Runtime Error
A:D

________________________________________________________________________
Que-1)
Write a java which program the sum of digits of the given two digit number.
program determined by the following rules:

if the given value is in between 10 and 99, return sum of it's digits. Example: if x = 34, print 7
if the given value is negative, print -3
if the given value is greater than 99, print -2
if the given value is in between 0 and 9, print -1
Code:
public class TwoDigitSum
{
public static void main(String[] args)
{

int num=Integer.parseInt(args[0]);

if(num>10&&num<99)
{
int a=num%10;
int b=num/10;
int sum=a+b;
System.out.println("The of "+num +" is "+sum);
}
else if(num<0)
{
System.out.println("-3");
}
else if(num>99)
{
System.out.println("-2");
}
else
{
System.out.println("-1");
}

}
}
----------------------------------------------------------------------------------------------
Que-2)
Write a java program which print the next multiple of 100 for the given number.
Program is determined by the following rules:

if the given value is negative or zero, return -1
if the given value is positive, return the next multiple of the given number. Example: if x = 123, return 200.
Code:
public class NextMultiple
{
public static void main(String[] args)
{
int num=Integer.parseInt(args[0]);

if(num>0)
{
int a=num/100;
int mul=(a+1)*100;

System.out.println("The Next Multiple Of "+num+" is "+mul);
}
else
{
System.out.println("-1");
}

}
}
---------------------------------------------------------------------------------------------
Que-3)
Write a java program which print the given three digit number is palindrome or not 

Program is determined by the following rules:

if the given number is an three digit number, Example: if x = 232, print 1. if x = 345, print 0
if 1 then print a message that the number is pallindrome
if 0 then print a message that the number is not a pallindrome
if the given number is negative or zero, print -1
if -1 then print a message that the given number is -ve kindly provide the +ve number only
if the given number is not an three digit number, print -2
if -2 then print the message that this program can check the operation for the 3 number only.
Code:
public class ThreeDigitPalindrome
{
public static void main(String [] args)
{
 int num=Integer.parseInt(args[0]);
 int pal=num;
int num1=0;

 while(num!=0)
    {
        int a=num%10;
    num1=num1*10+a;
    num=num/10;
     }

if(num1==pal)
{
System.out.println("1");
}

else
{
System.out.println("0");
}

}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
06/01/25
-----------
MCQ's
=======
1.	What is the Output of the following program?

public class Operator 
{
  public static void main(String[] args) 
  {
		int a=20, b=10;
		if((a>b)&&(--b <12)) 
		{
			System.out.println(b);
		}
		System.out.println(a);
   }
}

Output:
----------
9
20

---------------------------------------------------------------------------------------
2. What is the output of the following code?
public class Operator {
{
    public static void main(String args[])
    {
        double a = 1 + 9; 
        double b = a / 6;
        int c = 1 + 9;
        int d = c / 8;
        System.out.print(b + " " + d);

    } 
}

Output:
----------
1.6666666666666667 
1

---------------------------------------------------------------------------------------

3. What is the output of the following code?
public class Operator 
{
    public static void main(String args[]) 
    {    
         double a = 892.457;
         int  b = 10;
         a = a % 10;
         b = b % 10;
         System.out.println(a + " "  + b);
    } 
}
Output:
----------
2.4569999999999936 
0

---------------------------------------------------------------------------------------
4. What is the output of the following code
public class Operator 
{
    public static void main(String[] args) 
	  {
	    
	    int a = 21;
	    int b = a;
	    System.out.println(b);

	    b += a;
	    System.out.println(b);
	    
	    a *= a;
	    System.out.println(a);
	  }
	}
Output:
----------
21
42
441

---------------------------------------------------------------------------------------

5.  What is the output of the following program?
public class Operator
{
	static int operate(int a,int b)
	{
	    return (a * b);
	}
	static float operate(float a,float b)
	{
	    return (a / b);
	}
	public static void main(String[] args) {
		int x = 11, y = 23;
	    float n = 9, m = 4;
	    System.out.print(operate(x, y)+"\t");
	    System.out.println(operate(n, m));
	}
}
Output:
----------
253	
2.25

---------------------------------------------------------------------------------------
6.  What is the output of the following program?


int x = 0;

int y = 10;

do {

 y--;

 ++x;

 }
 while (x < 5);

 System.out.print(x + "," + y);

Output:
----------
5,5

---------------------------------------------------------------------------------------
7.  What is the output of the following program?

public static void main(String args[])
{ 
    int roll; 
    System.out.println(roll); 
}
Output:
----------
ERROR!
/tmp/dbwKADekab/Main.java:6: error: variable roll might not have been initialized
    System.out.println(roll); 
                       ^
1 error

---------------------------------------------------------------------------------------
8 Which of the following are valid variable declarations? 

i.    float = 10.5f;

ii.    boolean isOn = "true"

iii.    char gender = 'F';

iv.    int value = 20;

Output:
----------
3	
4

---------------------------------------------------------------------------------------

9.  What is the output of the following program?
 
public class Test {

    public static void main(String[] args) {

        int i = 0;

        i = i++ + i;

        System.out.println("I = "+i);
  }

}
Output:
----------
I = 1

---------------------------------------------------------------------------------------
10.  What is the output of the following program?

class Test {

    public static void main(String[] args) {

       int d, a = 2, b = 2;

        d =  a++ + ++b;

        System.out.print(d+"  "+a+" " +b);

    }

}
Output:
----------
5  3 3

---------------------------------------------------------------------------------------
11.  What is the output of the following program?

class Test {

    public static void main(String[] args) {

       int a = 1, b = 1, c;

        c = a++ + b;

        System.out.println("a="+a+"  b="+b+" c="+c);

    }

}

Output:
----------
a=2  b=1 c=2

---------------------------------------------------------------------------------------

12 . What is the numerical range of a char in Java?

a) -128 to 127

b) 0 to 256

c) 0 to 32767

d) 0 to 65535
Output:
----------
D)0 to 65535

---------------------------------------------------------------------------------------


13 . Which of these coding types is used for data type characters in Java?

a) ASCII

b) ISO-LATIN-1

c) UNICODE

d) None of the mentioned

Output:
----------
C)UNICODE

---------------------------------------------------------------------------------------
14 Find the output of the following code.

int Integer = 24;

char String  = ‘I’;

System.out.print(Integer);

System.out.print(String);
Output:
----------
ERROR!
/tmp/wl12sZrCde/Main.java:7: error: incompatible types: String cannot be converted to char
char String  = "I";
               ^
1 error
---------------------------------------------------------------------------------------

15. Find the output of the following Program 

class Test 
{ 
   public static void main(String [] args) 
   {
     char ch = '\u0041'; 
     System.out.println(ch);
   }

}
Output:
----------
A

---------------------------------------------------------------------------------------
16. Which of these values can a boolean variable contain? 

a) true
b) false
c) 0
d) 1
Output:
----------
a	b

---------------------------------------------------------------------------------------

17 Find the output of the following program.

public class Test
{
public static void main(String[] args)
{
	byte x = 127;
	x++;
	x++;
	x++;
	System.out.print(x);
}
}
Output:
----------
-126

---------------------------------------------------------------------------------------
18  Find the output of the following program.
public class Test
{
static int i =5;
public static void main(String... args) 
{
System.out.println(i++);
System.out.println(i);
System.out.println(++i);
System.out.println(++i+i++);
}
}

Output:
----------
5
6
7
16

---------------------------------------------------------------------------------------
19. Find the output of the following program.
public class Test 
	{

  public static void main(String[] args) 
	 {
    
    int i = 7;
    int j = -9;
    double x = 72.3;
    double y = 0.34;
  
    System.out.println("i is " + i);     
    System.out.println("j is " + j);
    System.out.println("x is " + x);     
    System.out.println("y is " + y);
     
    
 
	 }
	}
Output:
----------
i is 7
j is -9
x is 72.3
y is 0.34

---------------------------------------------------------------------------------------
20. Find the output of the following program.

public class Test
{
     public static void main(String[] argv)
     {
           final int x = 5;
           int y = x++;
     }
}
Output:
----------
ERROR!
/tmp/ab7v0WiSsD/Main.java:6: error: cannot assign a value to final variable x
           int y = x++;
                   ^
1 error

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
07/02/25

Q1) Find the output of the following
An expression involving byte, int literal numbers is promoted to which of these?
a. int
b. long
c. byte
d. float
Output:
----------
A
Explanation:
------------------
In Java, when an expression involves byte, int literal numbers, it is promoted to int.

This is because byte values are automatically promoted to int when used in expressions (due to integer promotion rules in Java). So, the correct answer is:

--------------------------------------------------------------------------------------------------------------
Q2) Find the output of the following
What is the range of data type short in Java?
a. -128 to 127
b. -32768 to 32767
c. -2147483648 to 2147483647
d. None of the mentioned
Output:
----------
B
Explanation:
----------------
The correct range for the short data type in Java is from -32,768 to 32,767.
--------------------------------------------------------------------------------------------------------------
Q3) Find the output of the following
Which of these operators can skip evaluating right hand operand?
a. !
b. |
c. &
d. &&
Output:
----------
D
Explanation:
-----------------
The operator that can skip evaluating the right-hand operand is && (logical AND operator), thanks to short-circuiting.

In the case of &&, if the left operand is false, the result will always be false, so the right operand is not evaluated. This behavior is known as short-circuit evaluation.

--------------------------------------------------------------------------------------------------------------
Q4) Find the output of the following

class HelloWorld 
{
    public static void main(String[] args)
    {
       int i = 0;

        int j = i++ + i;

        System.out.printf("%d\n", j);

    }
}
Output:
----------
1
Explanation:
-----------------
i++ is the post-increment operator. This means the value of i is used first in the expression, and then i is incremented.
The value of i++ is 0 (the original value of i before increment).
After i++, i is incremented to 1.
So, i++ + i becomes:

i++ is 0, and now i is 1 (after the increment).
So, the expression i++ + i becomes 0 + 1.
Thus, j = 0 + 1 = 1.
--------------------------------------------------------------------------------------------------------------

Q5) Find the output of the following
What is the range of data type short in Java?
a. -128 to 127
b. -32768 to 32767
c. -2147483648 to 2147483647
d. None of the mentioned
Output:
----------
B
--------------------------------------------------------------------------------------------------------------
Q6) Find the output of the following
public class Test
{
public static void main(String[] args)
{
	int a = 20, b=10;

   if((a<b) && (++b < 20))
	{
	   System.out.println("Logical AND ");
	}
	else
	{
		System.out.println("b value is : "+b);
	}
}
}
Output:
----------
b value is : 10
--------------------------------------------------------------------------------------------------------------
Q7) Find the output of the following
public class Test
{
public static void main(String[] args)
{
	int a = 20, b=10;

        if((a<b) & (++b < 20))
	{
	   System.out.println("Boolean AND ");
	}
	else
	{
		System.out.println("b value is : "+b);
	}
}
}
Output:
----------
b value is : 11
--------------------------------------------------------------------------------------------------------------
Q8) Find the output of the following

public class Test
{
public static void main(String[] args)
{
	      int z = 5;
		  if(++z > 5 || ++z > 6)   //Logical OR
		  {
			  z++;
		  }
		  System.out.println(z);

}
}
Output:
----------
7

--------------------------------------------------------------------------------------------------------------

Q9) Find the output of the following

public class Test
{
public static void main(String[] args)
{
	      int z = 5;
		  if(++z > 5 | ++z > 6)   //Boolean OR
		  {
			  z++;
		  }
		  System.out.println(z);

}
}
Output:
----------
8
--------------------------------------------------------------------------------------------------------------
Q10) Find the output of the following
public class Test1
	{
	public static void main(String args[]) 
	{
		char c;
		int i;
		c = 'A';		
		i = c;		
		c = i + 1;	
		c++;		
	}
}

Output:
----------
ERROR!
/tmp/U0hAgW0aMS/Main.java:9: error: incompatible types: possible lossy conversion from int to char
		c = i + 1;	
		      ^
1 error
--------------------------------------------------------------------------------------------------------------
Q11) Find the output of the following
class Test
	{
	public static void main(String args[]) 
	{
		int i,j,k,l=0;
		k = l++;
		j = ++k;
		i = j++;
		System.out.println(i);		
	}
}
Output:
----------
1
--------------------------------------------------------------------------------------------------------------
Q12) Find the output of the following
public class Test
{
	public static void main(String args[]) 
	{
		int i = 0;
		boolean t = true;
		boolean f = false, b;
		b = (t && ((i++) == 0));
		b = (f && ((i+=2) > 0));
		System.out.println(i);		
	}
}
Output:
----------
1

--------------------------------------------------------------------------------------------------------------
Q13) Find the output of the following
public class Test
{
	public static void main(String args[]) 
	{
		int i = 0;
		boolean t = true;
		boolean f = false, b;
		b = (t & ((i++) == 0));
		b = (f & ((i+=2) > 0));
		System.out.println(i);		
	}
}
Output:
----------
3
--------------------------------------------------------------------------------------------------------------

Q14) Find the output of the following
public class Test
{
	public static void main(String args[]) 
	{
		int i = 0;
		boolean t = true;
		boolean f = false, b;
		b = (t || ((i++) == 0));
		b = (f || ((i+=2) > 0));
		System.out.println(i);		
	}
}
Output:
----------
2
--------------------------------------------------------------------------------------------------------------
Q15) Find the output of the following
public class Test
{
	public static void main(String args[])
	{
		int i = 0;
		boolean t = true;
		boolean f = false, b;
		b = (t | ((i++) == 0));
		b = (f | ((i+=2) > 0));
		System.out.println(i);		
	}
}
Output:
----------
3
--------------------------------------------------------------------------------------------------------------
Q16) Find the output of the following
public class Test
{
	public static void main(String args[])
	{		
		int x = 3 & 5;
		int y = 3 | 5;
		System.out.println(x + " " + y);
	}
}
Output:
----------
1 7
--------------------------------------------------------------------------------------------------------------
Q17) Find the output of the following
public class Test16
{
	public static void main(String args[])
	{
		int x = 0, y = 1, z;
		if(x) 
		    z = 0;
		else
		    z = 1;

		if(y) 
		    z = 2;
		else
		    z = 3;
		System.out.println(z); 		
	}
}
Output:
----------
ERROR!
/tmp/AI2taCcA0P/Main.java:6: error: incompatible types: int cannot be converted to boolean
		if(x) 
		   ^
ERROR!
/tmp/AI2taCcA0P/Main.java:11: error: incompatible types: int cannot be converted to boolean
		if(y) 
		   ^
2 errors
--------------------------------------------------------------------------------------------------------------
Q18) Find the output of the following

public class Test
{
      public static void main(String[] argv)
      {
             byte b = 1;
             byte b1 = -b;
      }
}
Output:
----------
ERROR!
/tmp/GJsE6ksgVa/Main.java:6: error: incompatible types: possible lossy conversion from int to byte
             byte b1 = -b;
                       ^
1 error
--------------------------------------------------------------------------------------------------------------
Q19) Find the output of the following
public class Test
{
      public static void main(String[] argv)
      {
             byte b = 1;
             int b1 = -b;
      }
}
Output:
----------
Compile successfully but no output
--------------------------------------------------------------------------------------------------------------
Q20) Find the output of the following
public class Test 
{
     public static void main(String[] argv) 
     {
          byte b = 0;
          b += 27;
          b = b+28;
          b = (byte)(b+29);

      }
}
Output:
----------
ERROR!
/tmp/tmMj2FbArJ/Main.java:7: error: incompatible types: possible lossy conversion from int to byte
          b = b+28;
               ^
1 error
--------------------------------------------------------------------------------------------------------------
===========================================================================================================================================================================
10-02-25

Control Statement
Ravishankar Singh
•
11:00 AM
100 points

Batch_42_43_Assignment.txt
Text
Class comments
Your work
Turned in
No work attached
Private comments


Q1) Find the output of the following program

class Test 
{
	public static void main(String[] args) 
	{
		for(;false;)
		System.out.println("Hello World!");
	}
}
Sol:
ERROR!
/tmp/9A9VdJ1m8U/Main.java:6: error: unreachable statement
		{
		^
1 error
-----------------------------------------------------------------------------------------------------------------------
Q2) Find the output of the following program

public class Test
{ 
  public static void main(String [ ] args) 
   { 
     int a=1;
     switch(a) 
     { 
       default: 
       System.out.println("You choose correct option"); 
     }
   }
}
Sol:
You choose correct option
---------------------------------------------------------------------------------------------------------------------
Q3) Find the output of the following program
class Test28 
{
    public static void main(String[] args) 
    {
	for(int i=0; i <= 3 ; i++)
    {
    switch(i)
    {
    case 0:
    System.out.println("i is 0");
    break;
    case 1:
    System.out.println("i is 1");
    break;
    case 2:
    System.out.println("i is 2");
    break;
    default:
    System.out.println("i is grater than 2");
    }
}

}
}
Sol:
i is 0
i is 1
i is 2
i is grater than 2
-----------------------------------------------------------------------------------------------------------------------
Q4) Find the output of the following program
class Test 
{
	public static void main(String[] args) 
	{
		byte b =2;		
		switch(b)
		{	case 23:
			case 128:
		}		
	}
}
Sol:
ERROR!
/tmp/aVMCGC0GpT/Main.java:8: error: incompatible types: possible lossy conversion from int to byte
			case 128:
			     ^
1 error
-----------------------------------------------------------------------------------------------------------------------------------------------------
Q5) Find the output of the following program
public class Test
{
      public static void main(String[] argv)
      {
           final int a = 1;
            int b=  2;
            
           int x = 0;
           switch (x) 
           {
                 case a:     
                 case b:     
           }
     }
}
Sol:
ERROR!
/tmp/rDPjmX7PH6/Main.java:12: error: constant expression required
                 case b:     
                      ^
1 error
------------------------------------------------------------------------------------------------------------------------------
Q6) Find the output of the following program
public class Test
{
       public static void main(String[] argv)
       {
             int temp = 90;
             switch(temp) 
             {
                  case 80 :  System.out.println("80");
                  case 80 :  System.out.println("80");   
                  case 90 :  System.out.println("90");
                  default :  System.out.println("default");
             }
       }
}
Sol:
ERROR!
/tmp/onWM9dGKwP/Main.java:9: error: duplicate case label
                  case 80 :  System.out.println("80");   
                  ^
1 error
--------------------------------------------------------------------------------------------------------------------------
Q7) Find the output of the following program

public class Test
{
        public static void main(String[] argv)
        {
               int x = 1;
               switch(x) 
               {
                     case 1: 
                     {
                           System.out.println("x is one"); 
                           break;
                     }
                     case 2:  
                     {
                           System.out.println("x is two"); 
                           break;
                     }
                     case 3:  
                     {
                           System.out.println("x is two");  break;
                     }
               }
               System.out.println("out of the switch");
       }
}
Sol:
x is one
out of the switch
--------------------------------------------------------------------------------------------------------------------------
Q8) Find the output of the following program

public class Test
{
       public static void main(String[] argv)
       {
            int x = 2;
            switch (x) 
            {
                 case 2:
                 case 4:
                 case 6:
                 case 8:
                 case 10: {
                            System.out.println("x is an even number");  break;
                          }
            }
      }
}
Sol:
x is an even number
----------------------------------------------------------------------------------------------------------------------------
Q9) Find the output of the following program
public class Test
{
       public static void main(String[] argv)
       {
             int x = 2;
             switch (x) 
             {
                   case 2:  System.out.println("2");
                   default: System.out.println("default");
                   case 3: System.out.println("3");
                   case 4: System.out.println("4");
             }
        }
}
Sol:
2
default
3
4
--------------------------------------------------------------------------------------------------------------------------
Q10) Find the output of the following program

public class Test
{
      public static void main(String[] argv) 
      {
           short x = 200;
           switch( x ) {
                  case 100 : System.out.println("One hundred");break ;
                  case 200 : System.out.println("Two hundred");break ;
                  case 33000 : System.out.println("Thirty thousand ");break ;
          }
      }
}
Sol:
ERROR!
/tmp/cw9w0cHF5D/Main.java:9: error: incompatible types: possible lossy conversion from int to short
                  case 33000 : System.out.println("Thirty thousand ");break ;
                       ^
1 error
-------------------------------------------------------------------------------------------------------------------------
Q11) Find the output of the following program

public class Test
{
      public static void main(String[] argv) 
      {
           long  x = 400;
           switch( x ) {
                  case 100 : System.out.println("One hundred");break ;
                  case 200 : System.out.println("Two hundred");break ;
                  case 400 : System.out.println("Three hundred");break ;
          }
      }
}
Sol:
ERROR!
/tmp/ZnjTbF9FPY/Main.java:6: error: selector type long is not allowed
           switch( x ) {
                 ^
1 error
---------------------------------------------------------------------------------------------------------------------------
Q12) Find the output of the following program

public class Test 
{
      public static void main(String[] argv) 
      {
           int j = 3;
           switch (j) 
           {
                case 2:
                      System.out.println("value is two");
                case 2 + 1:
                     System.out.println("value is three");
                     break;
                default:
                     System.out.println("value is " + j);
                     break;
          }
    }
}
Sol:
value is three
--------------------------------------------------------------------------------------------------------------------------
Q13) Find the output of the following program

class Test 
{
        public static void main(String args[]) 
        {    
          final int a=10,b=20;
          while(a<b)
          { 
          System.out.println("Hello");
          }
          System.out.println("World"); 
        } 
}
Sol:
ERROR!
/tmp/gAZtA86k0P/Main.java:10: error: unreachable statement
          System.out.println("World"); 
          ^
1 error
------------------------------------------------------------------------------------------------------------------------------
Q14) Which of these selection statements test only for equality?

a) if
b) switch
c) if & switch
d) none of the mentioned
Sol:
B) switch
---------------------------------------------------------------------------------------------------------------------------

Q15) Find the output of the following program

public class Test
{
      public static void main(String[] argv)
      {
            String s = "xyz";
            switch (s.length()) 
            {
                 case 1:
                       System.out.println("length is one");
                       break;
                 case 2:
                       System.out.println("length is two");
                       break;
                 case 3:
                       System.out.println("length is three");
                       break;
                 default:
                       System.out.println("no match");
           }
      }
}
Sol:
length is three
--------------------------------------------------------------------------------------------------------------------------
Q16) WAP in java to print all even numbers from 1 - 100
Code:
public class Main
{
      public static void main(String[] argv)
      {
        int num=100;
        System.out.println("All even numbers from 1-100 is:");
        for(int i=1;i<=num;i++)
        {
            if(i%2==0)
            {
                System.out.println(i);
            }
        }
      }
}
------------------------------------------------------------------------------------------------------------------------

Q17) WAP in java to print the sum of first hundred natural number
Code:
public class Main
{
      public static void main(String[] argv)
      {
        int sum=0;
        for(int i=1;i<=100;i++)
        {
            sum+=i;
        }
        System.out.println("Sum of all natural numbers is:"+sum);
      }
}
-------------------------------------------------------------------------------------------------------------------------

Q18) WAP in java to print table of the given number (Number must be taken from Scanner class)
Code:
import java.util.Scanner;
public class Main
{
      public static void main(String[] argv)
      {
        Scanner sc=new Scanner(System.in);
        System.out.print("enter a number");
        int num=sc.nextInt();
        for(int i=1;i<=10;i++)
        {
            System.out.println(num+"x"+i+"="+num*i);
        }
        sc.close();
      }
}
=====================================================================
======================================================================
11-02-25
-----------
Program 01
----------
Write a Program on OOPs to define Dog class properties and behaviour.

properties :

name    : String
height  : double
age	: int

behaviour:

getDogInformation() : public void
             bark() : public void    

Program for class Dog:(//BLC)
-------------------------------
package com.Nit.Lab_OOPs;

public class Dog {
	String name;
	double height;
	int age;
	
	public void getDogInformation()
	{
		System.out.println("Dog name is:"+name);
		System.out.println("Height of the dog:"+height);
		System.out.println("Age of the dog is:"+age);
	}
	
	public void bark()
	{
		System.out.println("The dog which was called as "+name+" And the age of that dog is "+age+" And it is "+height+" height.");
	}
}

Program for DogDetails:(//ELC)
-------------------------------------------
package com.Nit.Lab_OOPs;

public class DogDemo {
	public static void main(String [] args)
	{
		Dog jhonny = new Dog();
		jhonny.name="Jhonny";
		jhonny.height=3.5;
		jhonny.age=15;
		
		jhonny.getDogInformation();
		jhonny.bark();
	}
}

------------------------------------------------------------------------
Program 02
----------
Write a Program on OOPs to define Fan class properties and behaviour.

properties :

name    : String
coil    : String
wings	: int

behaviour:

switchOn()  : public void
switchOff() : public void   

Program for Fan:(//BLC)
-----------------------
package com.Nit.Lab_OOPs;

public class Fan {
	String name;
	String coil;
	int wings;
	
	
	public void getFanDetails()
	{
			System.out.println("Name of the fan is: "+name);
			System.out.println("Type of coil: "+coil);
			System.out.println("Number of wings are : "+wings);
		
	}
	public void switchOn(){
		System.out.println("Turning on the fan");
	}
	
	public void switchOff()
	{
		System.out.println("Turning off the fan");
	}
}
Program for Fan Details:(//ELC)
---------------------------------
package com.Nit.Lab_OOPs;

public class FanDetails {

	public static void main(String[] args) {
		Fan fan = new Fan();
		fan.name = "usha";
		fan.coil="external coil";
		fan.wings=3;
		
		fan.getFanDetails();
		fan.switchOn();
		fan.switchOff();

	}

}

------------------------------------------------------------------------
Program 03
-----------
Write 2 programs on OOPs by your own thinking and imagination.

1) Program about Televison:
=================
//BLC for Televison:
---------------------------
 package com.Nit.Lab_OOPs;

public class Televison {
	String name;
	int cost;
	String quality;
	double size;
	String model;
	
	public void getTvInformation()
	{
		System.out.println("Name of the TV: "+name);
		System.out.println("Cost of the TV: "+cost);
		System.out.println("Quality of the TV: "+quality);
		System.out.println("Size of the TV: "+size);
		System.out.println("Model of the TV: "+model);
	}
	
	public void finalCost()
	{
		System.out.println("The final of TV including 10% discount is: "+(cost-(cost*0.05)));
	}
}

//ELC for  TelevisonDetails:
--------------------------------------
package com.Nit.Lab_OOPs;

public class TelevisonDetails {

	public static void main(String[] args) {
		Televison tv = new Televison();
		tv.name="Samsung";
		tv.cost=35000;
		tv.quality="HDR+";
		tv.size=32.5;
		tv.model="A125DD4E";
		
		tv.getTvInformation();
		tv.finalCost();

	}

}

2) Program about Mobile:
====================
//BLC for mobile:
-----------------------
package com.Nit.Lab_OOPs;

public class mobile {
	String name;
	int cost;
	String chargerInput;
	String batteryCapacity;
	int version;
	String frontCameraQuality;
	String backCameraQuality;
	
	
	public void getDetailsOfMobile()
	{
		System.out.println("Name of the mobile: "+name);
		System.out.println("Cost of the mobile: "+cost);
		System.out.println("Charging input of mobile: "+chargerInput);
		System.out.println("Battery capacity of mobile: "+batteryCapacity);
		System.out.println("Version of the mobile: "+version);
		System.out.println("Quality of Front Camera: "+frontCameraQuality);
		System.out.println("Quality of Back Camera: "+backCameraQuality);
		
	}
	
	public void finalDiscount()
	{
		System.out.println("The final discount of this mobile is: "+(cost*0.1));
	}
	
	public void finalRate()
	{
		System.out.println("The final cost of this mobile is: "+(cost-(cost*0.1)));
	}
}

//ELC for mobileDetails:
---------------------------------
package com.Nit.Lab_OOPs;

public class mobileDetails {

	public static void main(String[] args) {
		mobile m = new mobile();
		m.name="Apple 16";
		m.cost=15000;
		m.chargerInput="type-c";
		m.batteryCapacity="7000 MAH";
		m.version=13;
		m.frontCameraQuality="32MP";
		m.backCameraQuality="108MP";
		
		m.getDetailsOfMobile();
		m.finalDiscount();
		m.finalRate();

	}

}
======================================================================================================
======================================================================================================
12-02-25
------------
Read the class notes and develop the programs.
Program 01:
-----------
Write a Program on OOPs to define Product class properties and behaviour.

properties :
productId : int
productName : String
productPrice : double

Initialize these properties with the help of Methods using Scanner class not by using Object reference.

behavior:
setProductData() : public void
getProductInfo() : public void

Programfor Product:
----------------------------

//BLC
---------
package com.Nit.OOPs_2;

import java.util.Scanner;

public class Product {
	int productId;
	String productName;
	double productPrice;
	
	public void setProductData()
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Id of the product: ");
		productId = sc.nextInt();
		System.out.print("Enter Name of the product: ");
		productName = sc.nextLine();
		productName = sc.nextLine();
		System.out.print("Enter the cost the product: ");
		productPrice = sc.nextDouble();
		
	}
	
	public void getProductInfo()
	{
		System.out.println("Id number of the product is: "+productId);
		System.out.println("Name of the product is: "+productName);
		System.out.println("Cost of the product is: "+productPrice);
		
		
	}
}

//ELC
--------
package com.Nit.OOPs_2;

public class ProductDemo {

	public static void main(String[] args) {
		for(int i=1; i<=5;i++)
		{
		Product pi = new Product();
		pi.setProductData();
		pi.getProductInfo();
		
		System.out.println("--------------------------------------");
		
		}
	}

}

----------------------------------------------------------------------------------------------------------------------------
Program 02:
-----------
Write a Program on OOPs to define Employee class properties and behaviour.

properties :
employeeId : int
employeeName : String
employeeSalary : double

Initialize these properties with the help of Methods using Scanner class not by using Object reference.

behavior:
setEmployeeData() : public void
getEmployeeData() : public void

Program for Employee
----------------------------------

//BLC
----------
package com.Nit.OOPs_2;

import java.util.Scanner;

public class Employee {
	int employeeId;
	String employeeName;
	double employeeSalary;
	
	public void setEmployeeData()
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the ID of the employee: ");
		employeeId = sc.nextInt();
		System.out.print("Enter name of the employee: ");
		employeeName = sc.nextLine();
		employeeName = sc.nextLine();
		System.out.print("Enter Salary of the employee: ");
		employeeSalary = sc.nextDouble();		
		
	}
	
	public void getEmployeeData()
	{
		System.out.println("ID of the employee is: "+employeeId);
		System.out.println("Name of the employee is: "+employeeName);
		System.out.println("Salary of the employee is: "+employeeSalary);
		
	}
}

//ELC
---------
package com.Nit.OOPs_2;

public class EmployeeDetails {

	public static void main(String[] args) {
		int i=1;
		while(i<3)
		{
		Employee empi = new Employee();
		empi.setEmployeeData();
		empi.getEmployeeData();
		
		System.out.println("----------------------------------------------");

		}
	}

}

Note : Create two more programs based on your imagination

===========================================================================================================================================================================
13-02-25
---------------
Skip to main content
Google Classroom
Classroom
Batch 42 and 43
Java Batch 42 and 43 (9th January 2025)
  
Marking as done…
OOPs
Ravishankar Singh
•
11:01 AM
100 points

Batch_42_43_Assignment.txt
Text
Class comments
Your work
Turned in
No work attached
Private comments
Program 01 :
------------
A BLC (Business Logic Class) called Student is given to you.
Instance Variables: 
studentId :int
studentName : String
marks: int
grade: char

method : calculateGrade():public:void

Create a method public void setStudentData() with the parameters: studentId, studentName, marks.

Note that grade is not set through method because it is a calculated value.

Methods :
displayDetails(): This method should return a String with  the details of the student in the following format:
Student [name=John Smith, studentId=123, marks=95, grade=A] 

calculateGrade(): This is a public method that calculates the grade based on the marks that is set. 
If marks is above 90, grade is set to A. 
If marks is between 81 and 90, grade is set to B, 
if marks is between 71 and 80, grade is set to C, 
if marks is between 61 and 70, grade is set to D, 
if marks is less than 61, grade is set to E.
Use this method when you need to set or reset grade.

An ELC(Executable Logic class) Tester with main method is given to you to test your code.

SOL:
--------
//BLC

package com.Nit.OOPs_Task_3_1;

public class Student {
	//BCL 
	int studentId;
	String studentName;
	int studentMarks;
	char studentGrade;
	
	public void setStudentData(int id,String name,int marks)
	{
		studentId=id;
		studentName=name;
		studentMarks=marks;
	}
	public void calculateGrade()
	{
		if(studentMarks>=90)
		{
			studentGrade='A';
		}
		else if(studentMarks>80 && studentMarks<=90)
		{
			studentGrade='B';
		}
		else if(studentMarks>70 && studentMarks<=80)
		{
			studentGrade='C';
		}
		else if(studentMarks>60 && studentMarks<=70)
		{
			studentGrade='D';
		}
		else if(studentMarks>40 && studentMarks<=60)
		{
			studentGrade='E';
		}
		else
		{
			studentGrade='F';
		}
	}
	
	public String dispayDetails()
	{
		return "[name="+studentName+", Student id="+studentId+",Marks="+studentMarks+",Grade="+studentGrade+"]";
	}
}

====================================================================================================================================
//ELC

package com.Nit.OOPs_Task_3_1;


public class StudentDemo {

	public static void main(String[] args) {
		//ELC
		
		Student s1 = new Student();
		s1.setStudentData(123,"Jhon Smith", 22);
		s1.calculateGrade();
		System.out.println(s1.dispayDetails());
		

	}

}

--------------------------------------------------------------------------------------------------------------------------------
Program 02 :
------------
Create a BLC class Employee class with properties 

String firstName
String lastName
int employeeId
double salary
int noOfProject


Create a setEmployeeData() method with 5 parameters to initialize all the instance variables.

Implement calculateSalary() method that will add extra ammount in salary based on NoOfProject by using following criteria.

NoOfProject is more than 5 and less that 10 then add 5000.
NoOfProject is more than 10 and less that 20 then add 10000.
NoOfProject is more than 20 then add 15000. 	

 Take a method called displayDetails() to display the salary.

 Take an ELC class Tester to test your logic.

Batch_42_43_Assignment.txt
Displaying Batch_42_43_Assignment.txt.

Sol:
-----
//BLC

package com.Nit.OOPs_Task_3_2;

public class Employee {
	String firstName;
	String lastName;
	int employeeId;
	double salary;
	int noOfProject;
	
	public void setEmployeeData(String fname,String lname,int eid,double sal,int nproject)
	{
		firstName=fname;
		lastName=lname;
		employeeId=eid;
		salary=sal;
		noOfProject=nproject;
	}
	
	public void calculateSalary()
	{
		if(noOfProject>20)
		{
			salary=salary+15000;
		}
		else if(noOfProject>10 && noOfProject<=20)
		{
			salary=salary+10000;
		}
		else if(noOfProject>=5 && noOfProject<=10)
		{
			salary=salary+5000;
		}
		else
		{
			salary=salary+0;
		}
	}
	
	public String displayDetails()
	{
		return "[First name="+firstName+
				",Last name="+lastName+
				",Id="+employeeId+
				",Salary="+salary+
				",Number of projects="+noOfProject+"]";
	}
}

//ELC

package com.Nit.OOPs_Task_3_2;

public class Tester {

	public static void main(String[] args) {
		Employee E1=new Employee();
		E1.setEmployeeData("John", "Smith", 101, 25000, 22);
		E1.calculateSalary();
		System.out.println(E1.displayDetails());
	}

}

===================================================================================================================================
14-02-25
--------------
Program 01 :
------------
Create a BLC(Business Logic Class) called Bowler. Add below details to the class. 

1. Instance variables:
 name: String
 wickets: int
 matches: int,
 balls_bowled: int,
 runs_conceded: int. 

2. Method - bowlerDetails() : public void

Create a method name called bowlerDetails() that accepts name, wickets, matches, balls_bowled and runs_conceded.

Method name: bowlerDetails 

Return type: void


3. Create below public methods,
 Method name: computeBowlingAverage
 Return type: void

 This method should print the bowling average of the bowler by dividing runs_conceded with wickets.

 Input:
 name = "Sachin",
 wickets = 10,
 matches = 5,
 balls_bowled = 750,
 runs_conceded 463.

 Output:
 Name: Sachin
 bowling_avg=46.3
 Note: a. If any values are negative print 'Error'.

 b. If runs_conceded or balls_bowled are greater than 0 when matches are 0 print 'Error'.

 Method name: computeStrikeRate
 Return type: void

This method should print the Strike Rate of the bowler by dividing runs_conceded with balls_bowled.

 Input:
 name = "Sachin",
 wickets = 10,
 matches = 5,
 balls_bowled = 750,
 runs_conceded 463.

 Output:
 Name: Sachin
 Strike_rate=0.61733335
 Note: a. If any values are negative print 'Error'.

 b. If runs_conceded or balls_bowled are greater than 0 when matches are 0 print 'Error'.

 Method name: showStatistics
 Return type: void

 This method should print the details of the batter.
 Input:
 name = "Sachin",
 wickets = 10,
 matches = 5,
 balls_bowled = 750,
 runs_conceded 463.

 Output:
 Name=Sachin
 wickets=10
 matches=5

 balls_bowled=750
 runs_conceded=463

 Note: a. If any values are negative print 'Error'.

 b. If runs_conceded or balls_bowled are greater than 0 when matches are 0 print 'Error'.

 An ELC(Executable Logic Class) Test that contains main method. Use this class to test your code.

Sol:
Program for Cricket:
-----------------------------
//BLC

package com.Nit.OOPs_Task_4_1;

public class Bowler {
	String cricketerName;
	int noOfWickets;
	int noOfMatches;
	int noOfBalls_bowled;
	int noOfRuns_conceded;
	double strikeRate;
	double bowlingAvg;

	public void bowlerDetails(String name, int wickets, int matches, int balls_bowled, int runs_conceded) {
		cricketerName = name;
		noOfWickets = wickets;
		noOfMatches = matches;
		noOfBalls_bowled = balls_bowled;
		noOfRuns_conceded = runs_conceded;
	}

	public void computeBowlingAvereage() {
		if (noOfWickets > 0 && noOfMatches > 0 && noOfBalls_bowled > 0 && noOfRuns_conceded > 0) {
			bowlingAvg =  ((double)noOfRuns_conceded / (double)noOfWickets);
			System.out.println("Name:" + cricketerName);
			System.out.println("Bowling Average is:" + bowlingAvg);
		} else {
			System.out.println("Error! Enter positive number");
		}

	}

	public void computeStrikeRate() {
		if (noOfWickets > 0 && noOfMatches > 0 && noOfBalls_bowled > 0 && noOfRuns_conceded > 0) {
			strikeRate = ((double)noOfRuns_conceded /(double)noOfBalls_bowled);
			System.out.println("Name:" + cricketerName);
			System.out.println("Strike rate is:" + strikeRate);
		} else {
			System.out.println("Error! Enter positive number");
		}
	}

	public void showStatistics() {
		if (noOfWickets > 0 && noOfMatches > 0 && noOfBalls_bowled > 0 && noOfRuns_conceded > 0) {
			System.out.println("Name:" + cricketerName);
			System.out.println("Wickets:" + noOfWickets);
			System.out.println("Matches:" + noOfMatches);
			System.out.println("Balls_bowled:" + noOfBalls_bowled);
			System.out.println("Runs Conceded:" + noOfRuns_conceded);
		} else {
			System.out.println("Error! Enter positive number");
		}
	}
}

//ELC

package com.Nit.OOPs_Task_4_1;

public class Test {

	public static void main(String[] args) {
		Bowler b1=new Bowler();
		b1.bowlerDetails("Sachin", 10, 5, 750, 463);
		b1.computeBowlingAvereage();
		b1.computeStrikeRate();
		b1.showStatistics();

	}

}


-----------------------------------------------------------------------
Program 02 :
------------
Class Batter is given to you. Add below details to the class

 1. Instance variables:
 name: String,
 runs: int,
 matches: int,
 batting_avg: float.

2.  Method batterDetails() : public void

Create a method name called batterDetails() that accepts name, runs, matches.

Method name: batterDetails
Return type: void

 3. Create below public methods,
 Method name: computeBattingAverage
 Return type: void

 This method should print the batting average of the batter by dividing run with matches.

 Input: 

 Name: "Sachin"
 Runs: 18000
 Matches: 463



 Output:
 Name: Sachin
 Batting_Avg: 38.87689

 Note: a. If runs or matches values are negative print 'Error'.

 b. If runs are greater than 0 when matches are 0 print 'Error'.

 Method name: getStatistics
 Return type: void
 This method should print the details of the batter.

 Input: 
Name: "Sachin"
Runs: 18000
Matches: 463

 Output:
 Name: Sachin
 Runs: 18000
 Matches: 463


 Note: a. If runs or matches values are negative print 'Error'.
 b. If runs are greater than 0 when matches are 0 print 'Error'.

 Given an ELC(Executable Logic class) class for Testing that contains main method. Use this class to test your code.

Program for cricket-Batter:
--------------------------------------
//BLC

package com.Nit.OOPs_Task_4_2;

public class Batter {
	String cricketerName;
	int noOfRuns;
	int noOfMatches;
	float batting_avg;
	
	public void batterDetails(String name,int runs,int matches)
	{
		cricketerName=name;
		noOfRuns=runs;
		noOfMatches=matches;
	}
	
	public void computeBattingAverage()
	{
		if(noOfRuns>0 && noOfMatches>0)
		{
		batting_avg=((float)noOfRuns/(float)noOfMatches);
		System.out.println("Name:"+cricketerName);
		System.out.println("Batting_Avg:"+batting_avg);
		}
		else if(noOfRuns>0 && noOfMatches==0)
		{
			System.out.println("Error! Please enter positive number");
		}
	}
	
	public void getStatistics()
	{
		if(noOfRuns>0 && noOfMatches>0)
		{
		System.out.println("Name:"+cricketerName);
		System.out.println("Runs:"+noOfRuns);
		System.out.println("Matches:"+noOfMatches);
		}
		else if(noOfRuns>0 && noOfMatches==0)
		{
			System.out.println("Error! Please enter positive number");
		}
		
	}
}

//ELC

package com.Nit.OOPs_Task_4_2;

public class Testing {

	public static void main(String[] args) {
		Batter b1=new Batter();
		b1.batterDetails("Sachin", 18000, 463);
		b1.computeBattingAverage();
		b1.getStatistics();

	}

}
=======================================================================================================
17-02-25
------------
Program-1
Define a method which returns the sum of digits of the given two digit number.
Write the method with the following specifications: 
Name of the BLC class:TwoDigitsSum
Name of method: getSumOfDigits()
Access Modifier : public, static
Arguments: one argument of type integer
Return type: an integer value
For example,
If the given value is 34, return 7

Sol:
----
package com.Nit.OOPs.Task_5_1;

public class TwoDigitsSum {
	int number;
	int lastnum;
	int firstnum;
	
//	public void setNumber(int num) {
//	number=num;
//	}
	
	public void getSumOfDigits(int num)
	{
		lastnum=num%10;
		firstnum=num/10;
		System.out.println("Sum of two digits is: "+(firstnum+lastnum));
	}
}

package com.Nit.OOPs.Task_5_1;

import java.util.Scanner;

public class Test {

	public static void main(String[] args) {
		TwoDigitsSum n1 = new TwoDigitsSum();
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the two digit number:");
		int num =sc.nextInt();
//		n1.setNumber(num);
		n1.getSumOfDigits(num);;
		sc.close();
	}

}


Create an ELC class Main to test the application
------------------------------------------------------------------------
Program-2 
Define a method which returns the difference of digits of the given two digit number.
Write the method with the following specifications: 
Name of the BLC class:TwoDigitsDifference
Name of method: getDiffOfDigits()
Access Modifier : public, static
Arguments: one argument of type integer
Return type: an integer value
For example,
If the given value is 83, 8 - 3 return 5.  If x = 38, 3 - 8 return -5.

Sol:
------
package com.Nit.OOPs.Task_5_2;

public class TwoDigitsDifference {

		int number;
		int lastnum;
		int firstnum;
		
		public void getSumOfDigits(int num)
		{
			lastnum=num%10;
			firstnum=num/10;
			System.out.println("Difference of two digits is: "+(firstnum-lastnum));
		}
	}

package com.Nit.OOPs.Task_5_2;

import java.util.Scanner;

public class Test {

	public static void main(String[] args) {
		TwoDigitsDifference n1 = new TwoDigitsDifference();
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the two digit number:");
		int num =sc.nextInt();
		n1.getSumOfDigits(num);;
		sc.close();
	}

}


Create an ELC class Main to test the application
------------------------------------------------------------------------
Program-3
Define a method which returns the next multiple of 100 for the given number.
Write the method with the following specifications: 
Name of the BLC class:NextMultipleOfHundred
Name of method: getNextMultipleOfHundred()
Access Modifier : public, static
Arguments: one argument of type integer
Return type: an integer value
For example,
If the given value is 123, return 200.

Sol:
-----
package com.Nit.OOPs.Task_5_3;

public class NextMultipleOfHundred {
	int lastTwoDigits;
	int addedNum;
	
	public void getNextMultipleOfHundred(int num)
	{
		lastTwoDigits=num%100;
		addedNum=100-lastTwoDigits;
		System.out.println("Next multiple of hundred of"+num+"is: "+(num+addedNum));
		
	}
}

package com.Nit.OOPs.Task_5_3;

import java.util.*;
public class Test {

	public static void main(String[] args) {
		NextMultipleOfHundred n = new NextMultipleOfHundred();
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the number: ");
		int num = sc.nextInt();
		n.getNextMultipleOfHundred(num);
		sc.close();

	}

}

Create an ELC class Main to test the application
------------------------------------------------------------------------

Program-4
Define a method which returns the sum of three rounded numbers. If the right most digit of the number is less than 5, then round off its value to the previous multiple of 10 otherwise if the right most digit of the number is greater or equal to 5, and then round off to the next multiple of 10. 
Write the method with the following specifications: 
Name of the BLC class:RoundedSum
Name of method: sumOfRoundedValues() 
Access Modifier : public, static
Arguments: three argument of type integer
Return type: an integer value 
For example
If a = 23, b = 34, c = 66
   20 + 30 + 70 = 120
Note:Don't use any control statements and looping statements

Sol:
-----
package com.Nit.OOPs.Task_5_4;

public class RoundedSum {
		
	    public static int sumOfRoundedValues(int a, int b, int c) {
	        return roundToNearestTen(a) + roundToNearestTen(b) + roundToNearestTen(c);
	    }
	    
	    private static int roundToNearestTen(int num) {
	        return (num + 5) / 10 * 10;  
	    }

}

package com.Nit.OOPs.Task_5_4;

import java.util.*;
public class Test {

	public static void main(String[] args) {
		RoundedSum result = new RoundedSum();
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter a value:");
		int a = sc.nextInt();
		System.out.println("Enter b value:");
		int b = sc.nextInt();
		System.out.println("Enter c value:");
		int c = sc.nextInt();
		
		System.out.println("Rounded vaule is: "+(result.sumOfRoundedValues(a, b, c)));
		sc.close();
		

	}

}

Create an ELC class Main to test the application
------------------------------------------------------------------------

=====================================================================================
18/02/25

1) Which of the following is/are true about constructors in Java?
a.Constructor name should be same as class name.
b.If you don't define a constructor for a class, a default parameter less constructor is automatically created by the compiler. 
c.The default constructor calls super() and initializes all instance variables to default value like 0, null.
d.If we want to call parent class constructor, it must be called in first line of constructor.
A. 1,2 and 3   B.2   C. 1   D. 1,2,3 and 4
A:D


2) Which of the following modifier is not applicable for constructors? 
	A. private   	B. protected  	C. public 	D. final
A:D


3) The return type of a constructor is ?
	A. void	
	B. There is no return type 
	C. a class object in which it is defined		
	D. None of these
A:B

4) public class Test 
   {    }   
   What  is the prototype of the default constructor ?
	A. public Test(void)	
	B. Test() 	
	C. Test(void)	
	D. public Test()
A:B

5) Can we define method with same name of class name?
	A. Yes 	B. No
A:B
	
6) What happens if we add return type to constructor ?
	A. Compile time error 		
	B. Run Time Error
	C. JVM treats that as method	            
	D. None of these
A:A
	
7) Can we declare constructor as private ?
	A. Yes		B. No
A:A

8) What is the default accessibility modifier of a default constructor?
	A. private	
	B. protected
	C. default	
	D. same as class accessibility modifier
A:D

9)  Can we define a constructor using all four access modifiers:          public, protected, default and private?
	A. Yes      	B.No
A:A

10) Choose correct option for the following code
public class ConstructorTest {
	public int a = 10;
	public String ConstructorTest(int a) {
		this.a = a;
	}
}
A.	Run time error
B.	No error
C.	Compile time error
D.	10
A:C

11.	Choose correct option for the following code
public class ConstructorTest {
	public int a = 10;
	public ConstructorTest() {
	}
	public ConstructorTest(int a) {
		this.a = a;
		System.out.println(a);
	}
	
	public static void main(String[] args) {
		ConstructorTest test = new ConstructorTest();
	}
}
A.	Run time error
B.	Run successfully
C.	Compile time error
D.	10
A:B

12.	What is the output of the following code
public class ConstructorTest {
	public int a = 100;
	public ConstructorTest() {
		System.out.println(a);
	}
	
	public static void main(String[] args) {
		ConstructorTest test = new ConstructorTest();
	}
}
A.	Runtime error
B.	Compile time error
C.	100
D.	No Output
A:C


13.	Choose correct option for the following code
public class ConstructorTest {
	int a;
	public ConstructorTest(int a) {
		this.a =a;
	}
	
	public static void main(String[] args) {
		ConstructorTest nit = new ConstructorTest(10);
		nit.a;
	}
}
A.	Runtime error
B.	Compile time error
C.	No Output
D.	10
A:B

14)What is the output of the below program?

public class T 
{
  int pCode= 99;
}
public class Main 
{
   public static void main(String args[]) 
   {
      T t1 = new T();
      System.out.println(t1.pCode);
   }
}
A:99

15) What is the output of the below program?
public class T {
  int x = 23;
  T() {
    x = 45;
  }
}
public class Main {
   public static void main(String args[]) {
      T t1 = new T();
      System.out.println(t1.x);
   }
}
A:45

16) What is the output of the below program? 
 class Complex {
    private  double re,  im;
    public Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }
    Complex(Complex c) {
      System.out.println("Copy constructor called");
      re = c.re;
      im = c.im;
    }            
    public String toString() {
        return "(" + re + " + " + im + ")";
    }            
}
class Main {
    public static void main(String[] args) {
        Complex c1 = new Complex(10, 15);
        Complex c2 = new Complex(c1);    
        Complex c3 = c1;  
        System.out.println(c2);
    }
}
A:10.0+15.0

17) What is the output of the below program? 
public class Test7 {
	private Test7 (int x) {   //line 1
		System.out.print(x);
	}	
	private static Test7() {    //line 2
		System.out.print(25);
	}
	public static void main(String[] args){
		Test7 t = new Test7(35);
	}
}
A:ERROR

18) What is the output of the below program? 
public class Test9 {
	private Test9 (int x) {   //line 1
		System.out.print(x);
	}	
	private final Test7() {    //line 2
		System.out.print(25);
	}
	public static void main(String[] args){
		Test7 t = new Test7(35);
	}
}
A:ERROR

19) What is the output of the below program? 
public class Test9 {
	private Test9 (int x) {   //line 1
		System.out.print(x);
	}	
	private static Test7() {    //line 2
		System.out.print(25);
	}
	public static void main(String[] args){
		Test7 t = new Test7(35);
	}
}
A:ERROR
20) What is the output of the below program? 
class Product {
	int x;
	int y;
	public Product(int x,int y) {
		this.x = x;
		this.y = y;
	}
	public void call() {
		System.out.println("call method called");
	}
}
public class Test14 {
	public static void main (String[] args) {
		Product p = new Product();
		p.call();
	}
}
A:ERROR


21) What is the output of the below program? 
class Employee{
 	private String name;
 	public Employee(String name) {
  		this.name=name;  
 	}
}
public class Test16 {
 	public static void main(String[] Java) {
  		Employee e = new Employee("JavaDeveloper");
  		System.out.println("Emp Name : "+e.name);
 	}
}
A:ERROR

22) What is the output of the below program? 
class Person{
 	Person(){
  		System.out.println("Hello constructor!");
  		return;
 	}
}
public class Test17 {
 	public static void main(String[] var) {
  		Person p = new Person();
 	}
}
A:HELLO CONSTRUCTOR!
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

=============================================================================================================================================================================================================================
19/02/25

Question-1
--------------
Create an Employee class (BLC Class)

Properties :

names		 Type
--------	---------------		
 firstName   	:String   
 lastName      	:String  
 employeeId 	:int  
 salary  	:double  
 NoOfProject 	:int 

Access Modifier : private (for all varriables)  

Implement parameterized constructors to initialize these properties.

implement calculateSalary() method that will add extra ammount in salary based on NoOfProject.

Return Type       : void
Access modifier :public

NoOfProject is more than 5 and less that 10 then add 5000
NoOfProject is more than 10 and less that 20 then add 10000
NoOfProject is more than 20 then add 15000

Take another class Tester (ELC Class) which is having main method and instantiate the Employee object and execute the methods.


Test Case 1: 
----------------
Valid Input with Projects Between 6 and 10
Input:

firstName: John
lastName: Doe
employeeId: 101
salary: 50000.00
NoOfProject: 7

Expected Output:

After executing calculateSalary(), the salary should be updated to 55000.00.
Print output showing the updated salary: 55000.00.

Test Case 2:
---------------
 Invalid Number of Projects (Negative Value)
Sample Input:

firstName: Michael
lastName: Johnson
employeeId: 105
salary: 45000.00
NoOfProject: -5

Expected Output:

Print an error message indicating invalid number of projects (e.g., "Number of projects cannot be negative").
Salary remains 45000.00.

Code:
import java.util.*;
public class Tester{
    public static void main(String [] args){
        Scanner sc=new Scanner(System.in);
        int employeeNumber=sc.nextInt();
        String employeeName=sc.nextLine();
        employeeName=sc.nextLine();
        double employeeSalary=sc.nextDouble();
        Employee emp=new Employee(employeeNumber, employeeName, employeeSalary);
        emp.employeeDetails();

    }
}


 class Employee
{
    int employeeNumber;
    String employeeName;
    double employeeSalary;

    public Employee(int number,String name,double salary)
    {
        employeeNumber=number;
        employeeName=name;
        employeeSalary=salary;
    }
    
    public void employeeDetails()
    {
        if(employeeSalary>0)
        {
            if(employeeSalary>=60000)
            {
               System.out.println("Employee is a Developer"); 
            }

            else if(employeeSalary>=40000 && employeeSalary<60000)
            {
                System.out.println("Employee is a Designer"); 
            }

            else if(employeeSalary<40000 && employeeSalary>0)
            {
                System.out.println("Employee is a Tester"); 
            }
        
        }
        else
        {
            System.out.println("Salary cannot be negative.");
        }
        
        
    }

    

}

------------------
Question - 2
------------------

Design a Cricket Score Board by using foolowing requirements 

Take a Class Batter (Business Logic  Class)

Instance variables:

Names		Return Type
---------	----------------
name		: String
runs		: int
matches		: int
batting_avg	: float.

Access Modifier :public (for all varriables)

 Create a no argument constructor that assigns default values to instance variables.
 Create parameterized constructor that accepts name, runs, matches.

Methods :

Method name		: computeBattingAverage
Access Modifier 	: public
Return type		: void

This method should print the batting average of the batter by dividing run with matches.

Input: "Sachin", 18000, 463

Output:
Name: Sachin
Batting_Avg: 38.87689

Note: 

a. If runs or matches values are negative print 'Error'.
b. If runs are greater than 0 when matches are 0 print 'Error'.

Method name: getStatistics
Return type: void
This method should print the details of the batter.

Input: "Sachin", 18000, 463

Output:
Name: Sachin
Runs: 18000
Matches: 463
Note: 
a. If runs or matches values are negative print 'Error'.
b. If runs are greater than 0 when matches are 0 print 'Error'.

Given a class Testing (ELC Class) that contains main method. Use this class to test your code.

Test Case -1 :
-----------------

Invalid Case: Empty name

Sample Input: "", 5000, 100`

Expected Output:

Error: Name cannot be empty.
Error: Name cannot be empty.

Test Case-2 :
----------------

Invalid Case: Negative runs

Sample Input: "Rahul", -15000, 300

Expected Output:

Error: Runs and matches must be non-negative.
Error: Runs and matches must be non-negative.

Code:
import java.util.Scanner;

public class BattingAverageTester {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String name = scanner.nextLine();
        int runs = Integer.parseInt(scanner.nextLine());
        int matches = Integer.parseInt(scanner.nextLine());

         if (name.isEmpty()) {
            System.out.println("Error: Name cannot be empty.");
            return;
        } else if (runs < 0 || matches < 0) {
            System.out.println("Error: Runs and matches must be non-negative.");
            return;
        }
        else if (runs > 0 && matches == 0) {
            System.out.println("Error");
            return;
        }
        else
        {
        Batter batter = new Batter(name, runs, matches);

        batter.computeBattingAverage();
        batter.getStatistics();

        scanner.close();
        }
    }
}
class Batter {
    public String name;
    public int runs;
    public int matches;
    public float batting_avg;

    // No-argument constructor
    public Batter() {
        this.name = "Unknown";
        this.runs = 0;
        this.matches = 0;
        this.batting_avg = 0.0f;
    }

    // Parameterized constructor
    public Batter(String name, int runs, int matches) {
        this.name = name;
        this.runs = runs;
        this.matches = matches;
    }

    // Method to compute batting average
    public void computeBattingAverage() {
    
        batting_avg = (float) runs / matches;
        System.out.println("Name:" + name);
        System.out.println("Batting_Avg:" + batting_avg);
        
    }

    // Method to display batter statistics
    public void getStatistics() {
  
        System.out.println("Name:" + name);
        System.out.println("Runs:" + runs);
        System.out.println("Matches:" + matches);
    }
}
--------------
Question-3
--------------

Create a class Employee (Business Logic Class)

 Instance Variables:

Names		 Type
---------	 ----------------
 employeeNumber : int

 employeeName 	: String

 employeeSalary	: double

 Access Modifier  :public (for all variables)

 Create a parameterized constructor to initialilize all the fields.
 
 Create another class Tester (ELC class)

 which contains main method  which will receive all the instance variable value from BLC class.


 In this ELC class print the following details

 a) If salary is >=60000, Print Employee is a Developer

 b) If salary is >=40000 and <60000 , Print Employee is a Designer

 c) If Salary is <40000 , Print Employee is a Tester


Input:

232, "Naresh Kumar", 43000


Output:

Employee is a Designer


Instruction:

Test Cases :
========

Parameterized Constructor: Checks each input parameter (name, id, fee) for validity.

--> If id is negative, it sets it to 0 and prints an error message like (id must be always positive integer)
--> If fee is negative, it sets it to 0.0 and prints an error message like (Fee cannot be negative)
--> If name is null, it sets it to an empty string and prints an error message.(name must initialize with any default name)

Code:
import java.util.*;
public class EmployeeTesterELC {
    public static void main(String[] args) {
        
		Scanner sc=new Scanner(System.in);
		String firstName=sc.nextLine();
		String lastName=sc.nextLine();
		int employeeId=sc.nextInt();
		double salary=sc.nextDouble();
		int noOfProject=sc.nextInt();
		Employee emp=new Employee(firstName,lastName,employeeId,salary,noOfProject);
        emp.calculateSalary(); 
      

       
    }
}

class Employee {
  
    private String firstName;
    private String lastName;
    private int employeeId;
    private double salary;
    private int noOfProject;


    public Employee(String firstName, String lastName, int employeeId, double salary, int noOfProject) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.employeeId = employeeId;
        this.salary = salary;
        this.noOfProject = noOfProject;
    }

   
    public void calculateSalary() {
        if(noOfProject>0)
		{
			if(salary>0)
			{
				if(noOfProject>5 && noOfProject<10)
				{
				System.out.println("Employee Details:");
				System.out.println("Name:"+firstName+" "+lastName);
				System.out.println("Employee ID:"+employeeId);
				System.out.println("Updated Salary:"+(salary+5000));
				}

				else if(noOfProject>10 && noOfProject<20)
				{
							System.out.println("Employee Details:");
				System.out.println("Name:"+firstName+" "+lastName);
				System.out.println("Employee ID:"+employeeId);
				System.out.println("Updated Salary:"+(salary+10000));
				}

				else if(noOfProject>20)
				{
							System.out.println("Employee Details:");
				System.out.println("Name:"+firstName+" "+lastName);
				System.out.println("Employee ID:"+employeeId);
				System.out.println("Updated Salary:"+(salary+15000));
				}
			}

			else System.out.println("Salary cannot be negative");
		}

		else System.out.println("Number of projects cannot be negative");
    }
}
=======================================================================================================================================================================================
20-02-25
-----------
Question : 1
---------------
Create a Student class with the following attributes:

name (String): The name of the student.
age (int): The age of the student.
grade (String): The grade of the student.

In addition to these attributes, implement the following:

Static Method: Create a static method called createStudent() in the Student class. This method should:

Prompt the user to enter values for name, age, and grade.
Initialize a new Student object with the provided values.
Return the created Student object.

Implement a toString() to the Student class, which prints the student's details in the format: "Name: <name>, Age: <age>, Grade: <grade>".

Create a ELC class TestStudent
Main Method: In the main method, write code to:

Ask the user for the number of Student objects they want to create.
Use a loop to call the createStudent() method the specified number of times, 
After creating all Student objects, use a loop to display the details of each student using the toString method.

Code:
--------
//BLC
package com.Nit.OOPs.Task_7_1;

import java.util.*;

public class Student {
	String name;
	int age;
	String grade;
	public Student(String name, int age, String grade) {
//		super();
		this.name = name;
		this.age = age;
		this.grade = grade;
	}
	public static Student createStudent()
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Student name: ");
		String name = sc.nextLine();
		System.out.print("Enter Student age: ");
		int age = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter grade of the student: ");
		String grade = sc.nextLine();
		return new Student(name, age, grade);
		
	}
	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", grade=" + grade + "]";
	}
	
	
}

//ELC
package com.Nit.OOPs.Task_7_1;

import java.util.*;
public class TestStudent {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter no of students: ");
		int noOfStudent = sc.nextInt();
		sc.nextLine();
		for(int i=0;i<noOfStudent;i++)
		{
			Student s1 = Student.createStudent();
			System.out.println(s1);
		}
//		sc.close();
	}

}

Question : 2
---------------
Create an Employee class with the following attributes:

id (int): The unique identifier for each employee.
name (String): The name of the employee.
salary (double): The base salary of the employee.
department (String): The department to which the employee belongs.
In addition to these attributes, implement the following:

Static Method for Employee Creation: Add a static method named createEmployee() in the Employee class. This method should:

Prompt the user to enter values for id, name, salary, and department.
Initialize a new Employee object with the provided values.
Return the created Employee object.
Business Logic Method: Add a method calculateAnnualSalary() that:

Calculates and returns the annual salary of the employee based on their salary (monthly salary).
Adds a bonus based on the department:
Sales: 10% bonus of annual salary.
Engineering: 15% bonus of annual salary.
HR: 8% bonus of annual salary.
Other: 5% bonus of annual salary.
Implement toString method  to return the employee's details in this format: "ID: <id>, Name: <name>, Department: <department>, Monthly Salary: <salary>, Annual Salary (with Bonus): <calculated_annual_salary>".

Create a ELC class TestEmployee:
Main Method:

Ask the user how many Employee objects they want to create.
Use a loop to call createEmployee() to create the specified number of employees, 
After all employees are created, use another loop to display each employee's details, including the calculated annual salary with bonus.

Code:
----------
//BLC
package com.Nit.OOPs.Task_7_2;

import java.util.*;
public class Employee {
	int id;
	String name;
	double salary;
	String department;
	double annualSalary;
	double annsal;
	
	public Employee(int id, String name, double salary, String department, double annsal) {
		super();
		this.id = id;
		this.name = name;
		this.salary = salary;
		this.department = department;
		this.annsal = annsal;
	}
	public static Employee createEmployee()
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter employee id: ");
		int id = sc.nextInt();
		sc.nextLine();
		System.out.println("Enter employee name: ");
		String name = sc.nextLine();
		System.out.println("Enter employee salary: ");
		double salary = sc.nextDouble();
		double annsal=salary*12;
		System.out.println("Enter employee department: ");
		sc.nextLine();
		String department = sc.nextLine();
		return new Employee(id,name,salary,department,annsal);
		
	}
	
	public void calculateAnnualSalary()
	{
		annualSalary=annsal;
		
		if(this.department == "Sales")
		{
			annualSalary=1.1*annualSalary;
		}
		else if(department == "Enginerring")
		{
			annualSalary=1.15*annualSalary;
		}
		else if(department == "HR")
		{
			annualSalary=1.08*annualSalary;
		}
		else
		{
			annualSalary=1.05*annualSalary;
		}
	}
	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + ", department=" + department
				+ ", annualSalary=" + annualSalary + "]";
	}
	
	
}

//ELC
package com.Nit.OOPs.Task_7_2;

import java.util.Scanner;


public class TestEmployee {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter no of employees: ");
		int noOfEmployees = sc.nextInt();
		sc.nextLine();
		for(int i=0;i<noOfEmployees;i++)
		{
			Employee e1 = Employee.createEmployee();
			e1.calculateAnnualSalary();
			System.out.println(e1);
		}

	}

}


Question : 3
---------------
Create a Product class with the following attributes:

productId (int): The unique identifier for each product.
productName (String): The name of the product.
price (double): The price of a single unit of the product.
quantity (int): The quantity of the product.
In addition to these attributes, implement the following:

Static Factory Method: Implement a static factory method named createProduct(int productId, String productName, double price, int quantity) in the Product class. This method should:

Take productId, productName, price, and quantity as parameters.
Initialize and return a new Product object using these parameters.
Business Logic Method: Add a method named calculateTotalAmount() that:

Calculates the total amount for the product (price * quantity).
Applies a discount based on the total amount:
Total > 1000: 10% discount.
Total > 500: 5% discount.
Total <= 500: No discount.
Returns the total amount after applying the discount.
Implement toString method that returns  the product’s details in this format: "Product ID: <productId>, Name: <productName>, Price: <price>, Quantity: <quantity>, Total Amount (after discount): <total_amount>".


Create a ELC class TestProduct:
Main Method:

Ask the user how many Product objects they want to create.
Use a loop to call createProduct() with parameters provided by the user to create each product.

After all products are created, use another loop to display each product’s details, including the total amount after discount.

Sol:
-----
//ELC
package com.Nit.OOPs.Task_7_3;

import java.util.Scanner;

public class TestProduct {

		public static void main(String[] args) {
			
			Scanner sc=new Scanner(System.in);
			System.out.print("Enter the id of the product: ");
			int productId = sc.nextInt();
			System.out.print("Enter the name of product: ");
			String productName = sc.nextLine();
			sc.nextLine();
			System.out.print("Enter the price of product: ");
			double price = sc.nextDouble();
			System.out.print("Enter the quantity of the product: ");
			int quantity = sc.nextInt();

			Product p1=Product.createProduct(productId, productName, price, quantity);
			System.out.println(p1);
		}

}

//BLC
package com.Nit.OOPs.Task_7_3;


public class Product {

		int productId;
		String productName;
		double price;
		int quantity;
		
		public Product(int productId, String productName, double price, int quantity) {
			super();
			this.productId = productId;
			this.productName = productName;
			this.price = price;
			this.quantity = quantity;
		}

		public static Product createProduct(int productId, String productName, double price, int quantity) {
			
			return new Product(productId, productName, price, quantity);
		}
		public double calculateTotalAmount() {
			double totalAmount;
			if((price*quantity)>1000) {
				totalAmount=(price*quantity)*0.9;
				return totalAmount;
			}
			else if((price*quantity)>500) {
				totalAmount=(price*quantity)*0.95;
				return totalAmount;
			}
			else{
				totalAmount=(price*quantity);
				return totalAmount;
			}
		}

		@Override
		public String toString() {
			return "Product [productId=" + productId + ", productName=" + productName + ", price=" + price + ", quantity="
					+ quantity + " totalAmount= "+calculateTotalAmount()+"]";
		}
		
}


===========================================================================================================================================================================
21-02-25
------------
Program 01 :
-----------
Create a Loan class to calculate loan payments based on principal, interest rate, and duration.

Class name Loan with the Instance variable double principal ,private  
 double interestRate ,private
 int durationMonths ,private
1.Create a public constructor with parameters are principal,interestRate and durationMonths. To initialise the instance variable.

Access modifier:-
public
If any parameter value is 0 the print "Error".

2.Create a method name as calculateMonthlyPayment().Public method to calculate the monthly loan payment

Access modifier:-
public
return type:-
double

3.Create a method name as getPrincipal().To get the principal amount

Access modifier:-

public

return type:-

double

4.Create a method name as getInterestRate().To get the interest rate

Access modifier:-

public
return type:-
double

5.Create a method name as getDurationMonths().To get the loan duration in months

Access modifier:-
public
return type:-
int
Create a Class CheckLoan to check your functionalities of the class.Like to intialise the instance variable which is present in Loan class.
Code:
-------
//ELC
package com.Nit.OOPs.Task_8_1;

public class CheckLoan {

	public static void main(String[] args) {
		Loan l1 = new Loan(15000,5,5);
		System.out.println(l1);

	}

}

//BLC
package com.Nit.OOPs.Task_8_1;

public class Loan {
	double principal;
	private double interestRate;
	private int durationMonths;
	double emi;
	public Loan(double principal, double interestRate, int durationMonths) {
		if(principal>0 && interestRate>0 && durationMonths>0)
		{
		this.principal = principal;
		this.interestRate = interestRate;
		this.durationMonths = durationMonths;
		}
		else
		{
			System.err.println("Error!");
		}
	}
	
	public double calculateMonthlyPayment()
	{
		double emi =(getPrincipal()*getInterestRate()*getDurationMonths())/100;
		return emi;
	}

	public double getPrincipal() {
		return principal;
	}

	public double getInterestRate() {
		return interestRate;
	}

	public int getDurationMonths() {
		return durationMonths;
	}

	@Override
	public String toString() {
		return "Loan [principal=" + principal + ", interestRate=" + interestRate + ", durationMonths=" + durationMonths
				+ ", emi=" + calculateMonthlyPayment() + "]";
	}
		
}

Program-2
----------

Design a Movie class with attributes like title, release year, and genre.

Create a class Movie (Business Logic Class)
Instance Variables: 
String title - private
int releaseYear - private
String genre - private


Create a parameterized constructor to initialilize all the fields.
Create getters and setters method for all the fields.

Create another class Main which contains main method (ELC class) which will receive all the instance variable value from BLC class.
Use elc class for:-
// Accessing movie details using getters
// Modifying movie details using setters
// Displaying modified movie details

===========================================================================================================================================================================
-----------
DATE:24-FEB-25
==============
1.What is the output of following code?

public class Test6 
{
	 public static void main(String[] args) 
	 {
		         int number = 1;
		         String letters = "abc"; 
		         number = number(number); 
		         letters(letters);   
		         System.out.println(number + letters);    
		      }
		      public static int number(int number) 
		      {
		        number++;
		        return number;
		     }
		    public static String letters(String letters)//abc 
		    {
		        letters += "d";
		        return letters;
		     }
}


ANS:- 2abc
========================================================================================
2. What is the output of following code?

public class Test4 
{
  public static void main(String[] args) 
  {
	  int original1 = 1;
	   int original2 = 2;
	   swap(original1, original2);
	   System.out.println(original1);   
	   System.out.println(original2);   
	
  }
  
  public static void swap(int a, int b) {
	   int temp = a;
	   a = b;
	   b = temp;
	 }
}

ANS:- 1 2

======================================================================================================
3. What is the output of following code?
class Laptop
{
void access()
{
System.out.println("Copy java soft copies... ");
}
}
class Faculty
{
static Laptop password = new Laptop();
}
class Student
{
public static void main(String[] args)
{
Faculty.password.access();
}
}

ANS:- Copy java soft copies... 
====================================================================================================
4. Write a java program how many objects can be created for a class?
class Example
{
int x=10;
int y=20;
public static void main(String[] args)
{
Example e1=new Example();
Example e2=new Example();
System.out.println(e1.x+" ..."+e1.y);
System.out.println(e2.x+" ..."+e2.y);
}
}

ANS:- 10 ...20
      10 ...20
=====================================================================================================

5. Write a java program creating multiple objects and modifying their
values?
class Example
{
int a=10;
int b=20;
public static void main(String[] args)
{
Example e1=new Example();
Example e2=new Example();
System.out.println(e1.a+". .."+e1.b);
System.out.println(e2.a+". .."+e2.b);
e1.a=50;
e2.b=60;
System.out.println(e2.a+". .."+e2.b);
System.out.println(e2.a+". .."+e2.b);
}
}

ANS:-10. ..20
     10. ..20
     10. ..60
     10. ..60
======================================================================================================
6. Write a java program to show overriding toString() method to print object data?

class Example
{
int eid;
String ename;
String company;
public String toString(){
return
"eid:"+eid+"\n"+"ename:"+ename+"\n"+"company:"+company+"\n";
}
public static void main(String[] args)
{
Example e1=new Example();
e1.eid=7279;
e1.ename="Ganesh";
e1.company="Naresh IT";
System.out.println(e1);
e1=new Example();
System.out.println(e1);
}
}

ANS:-
======
eid:7279
ename:Ganesh
company:Naresh IT

eid:0
ename:null
company:null
=============================================================================================================
7. Write a java program shows creating class with static and non-static variables and their modifications?
class Example
{
static int a=10;
static int b=20;
int x=30;
int y=40;
public static void main(String[] args)
{
Example e1=new Example();
Example e2=new Example();
Example e3=null;
e1.a=50;
e1.b=60;
e1.x=70;
e1.y=80;
}
}

ANS:- null
======================================================================================================================
8. Find the Output
    public class Test1 {

	public static void main(String[] args) 
	{
		 int num = 4;
		 modifyNumber(num);
		 System.out.println(num);   

	}
	public static void modifyNumber(int num)
	{
		num = 8;		
	}
}

ANS:- 4
===========================================================================================================================

9. Find the output
public class Test 
{
	public static void main(String[] args) 
	{
		 String name = "NIT";
		 modifyName(name);
		 System.out.println(name);
	}
	
	public static void modifyName(String name)
	{
		name = "Hyd";
		
	}
	
}

ANS:- NIT
========================================================================================================================
10. Find the output
class Customer
{
	private double bill = 1200;

	public void setBill(double bill) 
	{
		this.bill = bill;
	}
	
	public double getBill()
	{
		return this.bill;
	}
	
}


public class PassByValueTest 
{
	public static void main(String[] args) 
	{
	  Customer c1 = new Customer();	
	  
	  updateCustomerBill(c1);
	  System.out.println(c1.getBill());
	}
	
	public static void updateCustomerBill(Customer cust)
	{
		cust.setBill(1800);
	}
}

ANS:- 1800
===========================================================================================================

11. Find the output.
class Customer
{
	private double bill = 1200;

	public void setBill(double bill) 
	{
		this.bill = bill;
	}
	
	public double getBill()
	{
		return this.bill;
	}
	
}


public class PassByValueTest 
{
	public static void main(String[] args) 
	{
	  Customer c1 = new Customer();	
	  
	  updateCustomerBill(c1);
	  System.out.println(c1.getBill());
	}
	
	public static void updateCustomerBill(Customer cust)
	{
		cust = new Customer(); //Another Object
		cust.setBill(1800);
	}
	
}

ANS:- 1200

===========================================================================================================================================================================25-02-25
------------
1. What is the output of following Program? Create Heap and Stack 
diagram for the following Program. 
class Customer
{
private String name;
private int id;
public Customer(String name , int id)
{
this.name=name;
this.id=id;
}
public void setId(int id) //setter 
{
this.id=id;
}
public int getId() //getter
{
return id;
}
}
class Test 
{
public static void main(String[] args) 
{
int val=100;
Customer c = new Customer("Ravi",2);
m1(c);
//GC
System.out.println(c.getId());
}
public static void m1(Customer c)
{
c.setId(5);
c = new Customer("Rahul",7);
c.setId(9);
System.out.println(c.getId());
}
}

Sol:
-----
9
5
========================================================================
2 What is the output of following Program? Create Heap and Stack 
diagram for the following Program. 

public class Employee
{
int id=100;
public static void main(String[] args) 
{
int val=200;
Employee e1 = new Employee();
e1.id=val;
update(e1);
System.out.println(e1.id);
 Employee e2 = new Employee(); 
e2.id=500;
switchEmployees(e2,e1);
 //GC 
System.out.println(e1.id);
 System.out.println(e2.id);
 } 
public static void update(Employee e)
{
 e.id=900;
e=new Employee();
e.id=400;
}
public static void switchEmployees(Employee e1,Employee e2)
 {
int temp=e1.id;
e1.id=e2.id;
e2= new Employee();
e2.id=temp;
 }
 }

Sol:
----
900
900
900

===========================================================================================================================================================================26-02-25
------------
Program 01 :
------------
Create a program to find out the Student Grade based on Student Marks :

Create a BLC class Student

Instance Variables :
name : String : private 
marks : int : private

Create a parameterized constructor to initialize all the fields.

Define setter and getter for all fields.

Override toString() method which will return only the name of the 
student from this method.

Create another BLC class StudentGrade.

Instance Variables :
student : Student : private 
studentGrade : char : private

Create a parameterized constructor to initialize all the fields.

Define setter and getter for all fields.

Override toString() method to print the following details :

[The Student Raj has 'A' Grade]


Create another class CalculateStudentGrade which does not contain any field (Variable)

Methods :
Name of the Method : calculateGrade()  [Factory Method]
return type : StudentGrade 
Access Modifier : public, static
Argument : Student 

In calculateGrade() method, task is to find the Student grade based on the Student marks and create and return the StudentGrade
object on the following criteria :

Student Marks                 Grade
> 90                            A
>= 75                           B
>= 60                           C
< 60                            D

Create an ELC class StudentGradeCalculator which contains main method to test the application.

Student.java
-------------------
package com.Nit.OOPs.Task_9_1;

public class Student {
	private String name;
	private int marks;
	public Student(String name, int marks) {
		this.name = name;
		this.marks = marks;
	}

	public int getMarks() {
		return marks;
	}
	
	@Override
	public String toString() {
		return this.name;
	}
	
	
}

StudentGrade.java
---------------------------
package com.Nit.OOPs.Task_9_1;

public class StudentGrade {
	private Student student;
	private char studentGrade;
	public StudentGrade(Student student, char studentGrade) {
		this.student = student;
		this.studentGrade = studentGrade;
	}
	public Student getStudent() {
		return student;
	}
	public void setStudent(Student student) {
		this.student = student;
	}
	public char getStudentGrade() {
		return studentGrade;
	}
	public void setStudentGrade(char studentGrade) {
		this.studentGrade = studentGrade;
	}
	@Override
	public String toString() {
		return "StudentGrade [The student " + student + " has '" + studentGrade +"' Grade ]";
	}
	
	
}

CalcuateStudentGrade.java
-------------------------------------
package com.Nit.OOPs.Task_9_1;

public class CalculateStudentGrade {
	public static StudentGrade calculateGrade(Student std)
	{
		int marks = std.getMarks();
		if(marks>90)
		{
			return new StudentGrade(std,'A');
		}
		else if(marks>=75)
		{
			return new StudentGrade(std,'B');
		}
		else if(marks>=60)
		{
			return new StudentGrade(std,'C');
		}
		else
		{
			return new StudentGrade(std,'D');
		}
	}
}

StudentGradeCalculator.java
---------------------------------------
package com.Nit.OOPs.Task_9_1;

import java.util.Scanner;

public class StudentGradeCalculator {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Student name:");
		String name = sc.nextLine();
		System.out.println("Enter Student Marks");
		int marks = sc.nextInt();
		
		Student s1 = new Student(name,marks);
		
		StudentGrade stdGrade = CalculateStudentGrade.calculateGrade(s1);
		System.out.println(stdGrade);
		
		sc.close();
	

	}

}

=================================================================
27-02-25
------------

Constructor Overloading
Ravishankar Singh
•
11:04 AM
100 points

Batch_42_43_Assignment.txt
Text
Class comments
Your work
Turned in
No work attached
Private comments
Question - 1
--------------
 Design sports Model system

Create  a class name Sports (BLC Class)


Atributes :

name 			Return Type
-------			--------------
sportName            :String 

teamSize		      :int 

sportType              :String 

Acess modifier  :private (for all varriable)

Take a no parameterized constructor and initialize all the default values to varriables.

Take one more constructor with two parameteres sportName and teamSize
and intialize with user values and write the validation logic

Take another constructor with 3 parameters and intialize all the values and check the validation.

Methods  :

Method Name     : displayInfo
Return Type 	     : void
Acess Modifier    : public 

and in this method to print all the details of the class.


Take a Main Class(ELC Class)which having main method and instatiate the object and execute the method.

Test Cases:
-------------

for teamSize. If teamSize is less than or equal to zero, it sets teamSize to 0 and prints an error message.

Test Case 1: Valid sport with name and team size
Sport Name: Football
Team Size: 11
Sport Type: Unknown

Expected Output :
---------------------
(print the details)

Test Case 2: Invalid sport with negative team size
Error: Team size must be positive.
Sport Name: Volleyball
Team Size: -1
Sport Type: Unknown

Expected Output :
---------------------
Error: Team size must be positive.

Code:
---------

//Sports.java
-----------------
package com.Nit.OOPs_Task_10_1;


public class Sports {
	private String sportName;
	private int teamSize;
	private String sportType;
	
	public Sports()
	{
		this.sportName="Unknown";
		this.teamSize=0;
		this.sportType="Unknown";
	}
	
	public Sports(String sportName,int teamSize)
	{
		this.sportName=sportName;
		if(teamSize>0)
		{
			this.teamSize=teamSize;
		}
		else
		{
			this.teamSize = teamSize;
            System.out.println("Error: Team size must be positive.");
		}
		this.sportType="Unknown";
	}
	
	public Sports(String sportName,int teamSize,String sportType)
	{
		this.sportName=sportName;
		if(teamSize>0)
		{
			this.teamSize=teamSize;	
		}
		else
		{
			this.teamSize = teamSize;
            System.out.println("Error: Team size must be positive.");
		}
		this.sportType=sportType;
		
	}
	
	public void displayInfo()
	{
		System.out.println("Sport Name: "+sportName);
		System.out.println("Team Size: "+teamSize);
		System.out.println("Sport Type: "+sportType);
	}
		
}

//SportsInfo.java
-----------------------
package com.Nit.OOPs_Task_10_1;

import java.util.*;
public class SportInfo {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Sport Name:");
		String sportName = sc.nextLine();
		System.out.print("Enter the Size of the team: ");
		int teamSize = sc.nextInt();
		
		Sports sport1 = new Sports(sportName,teamSize);
		sport1.displayInfo();
	
		System.out.println(sport1);
		
		
		sc.close();
		
		
		

	}

}

Question -2
---------------
TimeFormatter (Class as a return type and Class as an argument

A class called  Time is given to you. The task is to create and return a new time object in terms of hours,minutes and seconds by adding two Time objects.

Define the following for the class.

Attributes :

name 
-------
hh,mm,ss as private  :-for all (int) is data type and (private) is acessmodifier

Constructor :

	default : Create a no-parameterize constructor. Initialize all attributes to 0.

	paramterized : Create a public parameterized constructor for hours,minutes and seconds in the same sequence.

Methods :

	Name of the method : show 

	Return Type 	: void

	Modifier	: public

	Task : It must display the time in hours:minutes:seconds format. 

       Name Of the method : add  

	Return Type 	: Time

	Modifiers:	: public,static

	Arguments	: 2Time arguments.

	Task		: Add the time


Take a ELC Class TimeTester class having main method instatiate the object and check the taste cases.


Example : 

  Sample Input :

	time 1 : 2:30:40

	time 2 : 4:40:21 

Expected	output :

Result : 7:11:1

Code:
---------

//Time.java
---------------
package com.Nit.OOPs_Task_10_2;

import java.util.*;
public class Time {

	public static void main(String[] args) {
		
		TimeFormatter time = new TimeFormatter();
		
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter hours:");
		int hours = sc.nextInt();
		System.out.print("Enter minutes:");
		int minutes = sc.nextInt();
		System.out.print("Enter seconds:");
		int seconds = sc.nextInt();
		
		TimeFormatter t1 = new TimeFormatter(hours,minutes,seconds);
		
		System.out.print("Enter hours:");
		hours = sc.nextInt();
		System.out.print("Enter minutes:");
		minutes = sc.nextInt();
		System.out.print("Enter seconds:");
		seconds = sc.nextInt();

		TimeFormatter t2 = new TimeFormatter(hours,minutes,seconds);
	
		 System.out.print("Time 1: ");
	        t1.show();
	        System.out.print("Time 2: ");
	        t2.show();

	        TimeFormatter result = TimeFormatter.add(t1, t2);

	        System.out.print("Result: ");
	        result.show();
		
		

	}

}

//TimeFormatter.java
------------------------------
package com.Nit.OOPs_Task_10_2;

public class TimeFormatter {
	private int hh;
	private int mm;
	private int ss;
	
	public TimeFormatter()
	{
		this.hh=0;
		this.mm=0;
		this.ss=0;
	}
	
	public TimeFormatter(int hours,int minutes,int seconds)
	{
		this.hh=hours;
		this.mm=minutes;
		this.ss=seconds;
	}
	
	public void show()
	{
		System.out.println(this.hh+":"+this.mm+":"+this.ss);
	}
	
	public static TimeFormatter add(TimeFormatter time1,TimeFormatter time2)
	{
		int totalSeconds =time1.ss+time2.ss;
		int totalMinutes =time1.mm+time2.mm;
		int totalHours =time1.hh+time2.hh;
		
		if(totalSeconds>=60)
		{
			totalSeconds = totalSeconds-60;
			totalMinutes++;
		}
		
		if(totalMinutes>=60)
		{
			totalMinutes = totalMinutes-60;
			totalHours++;
		}
		
		return new TimeFormatter(totalHours,totalMinutes,totalSeconds);
	}
}

Question - 3 [Copy Constructor]
--------------
Take a class Student(BLC Class)

Attributes:
 
names		dataType
---------		-----------
studentId         :  int
studentName   : String
studentAge      : int

Access Modifier :private for all varriables

take one no-parameterize constructor and initialize with default value.

Take one parameterize constructor to initialize all the attributes.

devlop getter and setter method to acess the private properties



Methods:


Name Of the method 	: showDetails()  

	Return Type 		: void

	Modifiers:		: public


Take one more (BLC Class) Player .

Attributes:

names		dataType
---------		-----------
playerId 		 int
playerName    String
playerAge        int

Access Modifier :private for all varriables


create a Copy constructor that takes a Student object and initializes the Player object's attributes using the Student object's attributes.

Methods :

Name Of the method 	: showDetails()  

	Return Type 		: void

	Modifiers:		: public


Name Of the method 	: updateName(String newName)

    Return Type 		: void

	Modifiers:		: public

Public method to update the player's name.


Name Of the method 	: isEligible()  

    Return Type 		: void

	Modifiers:		: boolean

method that returns a boolean indicating if the player is eligible (e.g., age must be at least 18).


Take one Main class(ELC Class) which is having main method  and instantiate the both class object and check all the terms and conditions.


Test cases :
--------------
case-1
--------
Sample Input :
id=-3(Negative ID)

Expected Output:
Error: Student ID cannot be negative.

case-2
--------
Sample Input :
 name =""(Empty Name)

Expected output :
Error: Student name cannot be empty.


case-3
--------
 Normal Scenario with Eligibility Check

Sample Input :
 Student ID: 2, Name: Jane Smith, Age: 17
Player Details: Player ID: 2, Name: Jane Smith, Age: 17
Is Player Eligible? false

Expected Output :
(print all the details )

Code:
-----------
//Student.java

package com.Nit.OOPs_Task_10_3;

public class Student {
	private int studentId;
	private String studentName;
	private int studentAge;
	
	public Student()
	{
		this.studentId=0;
		this.studentName="Unknown";
		this.studentAge=0;
	}
	
	public Student(int studentId,String studentName,int studentAge)
	{
		this.studentId=studentId;
		 if (studentId < 0) {
	            System.out.println("Error: Student ID cannot be negative.");
	            return;
	        }
		 else {
			 this.studentId=studentId;
		 }
		 
		 this.studentName=studentName;
	        if (studentName.isBlank() || studentName.isEmpty()) {
	            System.out.println("Error: Student name cannot be empty.");
	            return;
	        }
	        else {
	        	this.studentName=studentName;
	        }
		
		
		this.studentAge=studentAge;
	}
	public int getStudentId() {
		return studentId;
	}

	public void setStudentId(int studentId) {
		this.studentId = studentId;
	}

	public String getStudentName() {
		return studentName;
	}

	public void setStudentName(String studentName) {
		this.studentName = studentName;
	}

	public int getStudentAge() {
		return studentAge;
	}

	public void setStudentAge(int studentAge) {
		this.studentAge = studentAge;
	}

	public void showDetails()
	{
		System.out.println("Student ID:"+studentId+", Name:"+studentName+", Age:"+studentAge);
	}
}

//Player.java

package com.Nit.OOPs_Task_10_3;

import java.util.Scanner;

public class Player {
	private int playerId;
	private String playerName;
	private int playerAge;
	
	public Player(Student student)
	{
	
		this.playerId=student.getStudentId();
		this.playerName=student.getStudentName();
		this.playerAge=student.getStudentAge();
	}
	


	public void showDetails()
	{
		System.out.println("Player Details: Player ID:"+playerId+", Name:"+playerName+", Age:"+playerAge);
		
	}
	
	public void updateName()
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter  new Student Name:");
		String studentName = sc.nextLine();
		
		if (studentName.isBlank() || studentName.isEmpty()) {
            System.out.println("Error: Student name cannot be empty.");
            this.playerName=studentName;
            return;
        }
		this.playerName=studentName;
	}
	
	public String getPlayerName() {
		return playerName;
	}



	public boolean isEligible()
	{
		return playerAge>=18;
	}
}


//Main.java

package com.Nit.OOPs_Task_10_3;

import java.util.*;
public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Student Id:");
		int studentId = sc.nextInt();
		sc.nextLine();
		if (studentId < 0) {
            System.out.println("Error: Student ID cannot be negative.");
            return;
        }
		System.out.print("Enter Student Name:");
		String studentName = sc.nextLine();
		
		if (studentName.isBlank() || studentName.isEmpty()) {
            System.out.println("Error: Student name cannot be empty.");
            return;
        }
		System.out.print("Enter student Age:");
		int studentAge = sc.nextInt();
		Student s1 = new Student(studentId,studentName,studentAge);
		
		System.out.println("Student Details:");
		s1.showDetails();
		
		
		Player player = new Player(s1);
		
		System.out.println("Player Details:");
		player.showDetails();
		
		player.updateName();
		while (player.getPlayerName().isEmpty() || player.getPlayerName().isBlank()) {
            player.updateName();
		}
		System.out.println("updated record:");
		player.showDetails();
		System.out.println("Is Player Eligible?"+player.isEligible());
		sc.close();
	}

}

=================================================================
28-02-25
------------
Q1)

The payroll system of an organization involves calculating the gross salary of each type of
employee and the tax applicable to each.
Create the following entity classes as described below.
Class Employee
Fields: id: int, name : String, basicSalary : double, HRAPer : double, DAPer : double
Public Method: calculateGrossSalary() - returns a double
Calculate the gross salary as : basicSalary +HRAPer +DAPer
Class Manager
Fields: id: int, name : String, basicSalary : double, HRAPer : double,DAPer : double,
projectAllowance: double
Public Method: calculateGrossSalary() - returns a double
Calculate the gross salary as : basicSalary +HRAPer +DAPer + projectAllowance
Class Trainer
Fields: id: int, name : String, basicSalary : double, HRAPer : double,DAPer : double,
batchCount: int, perkPerBatch: double
Public Method: calculateGrossSalary() - returns a double
Calculate the gross salary as : basicSalary +HRAPer +DAPer +(batchCount * perkPerBatch)
Class Sourcing
Fields: id: int, name : String, basicSalary : double, HRAPer : double,DAPer : double,
enrollmentTarget: int, enrollmentReached: int, perkPerEnrollment: double
Public Method: calculateGrossSalary() - returns a double
Calculate the gross salary as: basicSalary +HRAPer
+DAPer
+((enrollmentReached/enrollmentTarget)*100)*perkPerEnrollment)
Class TaxUtil
Fields: None
Public
Methods:
calculateTax(Employee) - returns a
doublecalculateTax(Manager) - returns
a double calculateTax(Trainer) - returns
a double calculateTax(Sourcing) -
returns a double
Tax Calculation Logic: If gross salary is greater than 30000 tax is 20% else, tax is
5%Note : Attributes/Fields must be non-Private for the above classes.
A class Test is given to you with the main Method. Use this class to test your solution.

Code:
---------
package com.Nit.OOPs_Task_11_1;

import java.util.*;
class Employee
{
	int id;
	String name;
	double basicSalary;
	double HRAPer;
	double DAPer;
	
	public Employee(int id, String name, double basicSalary,double HRAPer, double DAPer) {
		super();
		this.id = id;
		this.name = name;
		this.basicSalary = basicSalary;
		this.HRAPer = HRAPer;
		this.DAPer = DAPer;
	}

	
	public double calculateGrossSalary()
	{
		return basicSalary+HRAPer+DAPer;
	}
}

class Manager
{
	int id;
	String name;
	double basicSalary;
	double HRAPer;
	double DAPer;
	double projectAllowance;
	
	public Manager(int id,String name,double basicSalary,double HRAPer,double DAPer,double projectAllowance)
	{
		super();
		this.id= id;
		this.name = name;
		this.basicSalary = basicSalary;
		this.HRAPer = HRAPer;
		this.DAPer = DAPer;
		this.projectAllowance = projectAllowance;
	}
	public double calculateGrossSalary()
	{
		
		return basicSalary+HRAPer+DAPer+projectAllowance;
	}
}

class Trainer
{
	int id;
	String name;
	double basicSalary;
	double HRAPer;
	double DAPer;
	int batchCount;
	double perkPerBatch;
	
	public Trainer(int id, String name, double basicSalary, double HRAPer, double DAPer, int batchCount, double perkPerBatch)
	{
		super();
		this.id = id;
		this.name = name;
		this.basicSalary = basicSalary;
		this.HRAPer = HRAPer;
		this.DAPer = DAPer;
		this.batchCount = batchCount;
		this.perkPerBatch = perkPerBatch;
	}
	public double calculateGrossSalary()
	{
		
		return basicSalary+HRAPer+DAPer+(batchCount*perkPerBatch);
	}
}

class Sourcing
{
	int id;
	String name;
	double basicSalary;
	double HRAPer;
	double DAPer;
	int enrollmentTarget;
	int enrollmentReached;
	double perkPerEnrollment;
	
	public Sourcing(int id, String name, double basicSalary,double HRAPer,double DAPer,int enrollmentTarget,int enrollmentReached,double perkPerEnrollment)
	{
		super();
		this.id = id;
		this.name = name;
		this.basicSalary = basicSalary;
		this.HRAPer = HRAPer;
		this.DAPer = DAPer;
		this.enrollmentTarget = enrollmentTarget;
		this.enrollmentReached = enrollmentReached;
		this.perkPerEnrollment = perkPerEnrollment;
	}
	public double calculateGrossSalary()
	{
		return basicSalary+HRAPer+DAPer+((enrollmentReached/enrollmentTarget)*100)*perkPerEnrollment;
	}
}


class TaxUtil
{
	public double calculateTax(Employee e1) {
		if(e1.calculateGrossSalary()>30000) {
			return e1.calculateGrossSalary()*0.2;
		}
		else {
			return e1.calculateGrossSalary()*0.05;
		}
	}
	public double calculateTax(Manager m1) {
		if(m1.calculateGrossSalary()>30000) {
			return m1.calculateGrossSalary()*0.2;
		}
		else {
			return m1.calculateGrossSalary()*0.05;
		}
	}
	public double calculateTax(Trainer t1) {
		if(t1.calculateGrossSalary()>30000) {
			return t1.calculateGrossSalary()*0.2;
		}
		else {
			return t1.calculateGrossSalary()*0.05;
		}
	}
	public double calculateTax(Sourcing s1) {
		if(s1.calculateGrossSalary()>30000) {
			return s1.calculateGrossSalary()*0.2;
		}
		else {
			return s1.calculateGrossSalary()*0.05;
		}
	}	

}
public class Test {

	public static void main(String[] args) {
		double tax;
		
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter id:");
		int id = sc.nextInt();
		System.out.print("Enter name:");
		String name = sc.nextLine();
		sc.nextLine();
		System.out.print("Enter Basic Salary:");
		double basicSalary = sc.nextDouble();
		System.out.print("Enter HRA:");
		double HRAPer = sc.nextDouble();
		System.out.print("Enter DA:");
		double DAPer = sc.nextDouble();
		TaxUtil tu=new TaxUtil();
		Employee e1=new Employee(id,name,basicSalary,HRAPer,DAPer);
		tax=tu.calculateTax(e1);
		System.out.println(e1.id+" "+e1.name+ " Gross salary:"+e1.calculateGrossSalary()+" Employee tax:"+ tax );
		System.out.print("Enter Project Allowance");
		double projectAllowance = sc.nextDouble();
		Manager m1=new Manager(id, name,basicSalary, HRAPer, DAPer, projectAllowance);
		tax=tu.calculateTax(m1);
		System.out.println(m1.id+" "+m1.name+ " Gross salary:"+m1.calculateGrossSalary()+" Manager tax:"+ tax );
		System.out.print("Enter Batch Count:");
		int batchCount = sc.nextInt();
		System.out.print("Enter Batch Perk:");
		int perkPerBatch = sc.nextInt();
		Trainer t1=new Trainer(id,name, basicSalary, HRAPer, DAPer, batchCount, perkPerBatch);
		tax=tu.calculateTax(t1);
		System.out.println(t1.id+" "+t1.name+ " Gross salary:"+t1.calculateGrossSalary()+" Trainer tax:"+ tax );
		System.out.print("Enter Enrolled Target:");
		int enrollmentTarget = sc.nextInt();
		System.out.print("Enter Enrolled Reached:");
		int enrollmentReached = sc.nextInt();
		System.out.print("Enter Perk Enrollment:");
		double perkPerEnrollment = sc.nextDouble();
		Sourcing s1=new Sourcing(id, name, basicSalary, HRAPer, DAPer, enrollmentTarget, enrollmentReached, perkPerEnrollment);
		tax=tu.calculateTax(s1);
		System.out.println(s1.id+" "+s1.name+ " Gross salary:"+s1.calculateGrossSalary()+" Sourcing tax:"+ tax ); 

	}

}

===========================================================================================================================================================================
03-02-25
-----------
Program 1 :-
Programming Question: Student Class with Grade Calculation

 Design a Java class named Student that encapsulates information about 
 students, including name, ID, course, fee, grade, and average.
 Your class should include a constructor for creating a student object
 by copying another student object and a method to calculate the grade 
 based on the average.

Take a  Student class  (BLC Class)

should have the following elements:

Attributes/properties/varriables :


Names			data type		
------------		---------------       
Name      		: String
ID            		: int
Course  		: String
Fee			: double
Grade			: char
Average			: double

Acess Modifier 	:private(for all Varriables) 

Constructors:

A parameterized constructor that initializes a student object with basic information, such as name, ID, course, and fee.

A parameterized constructor that initializes a student object by copying another student object.(copy constructor)


Method:

Method Name    : calculateGrade()
Access modifier : public
Return Type       : char 
 
that initialize the grade of a student based on the average. Use the following grading scale:

A: Average >= 90
B: Average >= 80
C: Average >= 70
D: Average >= 60
F: Average < 60


Tester Class:(ELC Class)

In the main method, demonstrate the usage of the Student class by creating instances with different constructors, setting average values, and calculating grades.


Test Case-1 :
---------------
 Valid Case:

 Average = 76

 Sample Input: average = 76

Expected Output: "Grade for average 76: C"


Test Case-2 :
---------------

Valid Case: Average = 58

Sample Input: average = 58

Expected Output: "Grade for average 58: F"

Test Case-3 :
----------------
Invalid Case: mark = -10

Input: mark = -10
Expected Output: "Error: Average mark must be between 0 and 100."

Code:
----------
//BLC(Student.java)
===============
package com.Nit.OOPs_Task_12_1;

public class Student {
	private String name;
	private int id;
	private String course;
	private char grade;
	private double fee;
	
	private double average;
	
	public Student(String name,int id,String course,double fee,double average)
	{
		this.name = name;
		this.id = id;
		this.course = course;
		this.fee = fee;
		if(average>0)
		{
			this.average=average;
		}
		else
		{
			System.err.println("\"Error: Average mark must be between 0 and 100.\"");
		}
	}
	
	public Student(Student s) {
		this.name = s.name;
		this.id = s.id;
		this.course = s.course;
		this.fee = s.fee;
		this.grade = s.grade;
		if(average>0)
		{
			this.average=s.average;
		}
		else
		{
			System.err.println("\"Error: Average mark must be between 0 and 100.\"");
		}
	}
	
	public char calculateGrade()
	{
		if(average>=90)
		{
			return grade='A';
		}
		else if(average>=80)
		{
			return grade = 'B';
		}
		else if(average>=70)
		{
			return grade = 'C';
		}
		else if(average>=60)
		{
			return grade = 'D';
		}
		else
		{
			return grade = 'F';
		}
	}

	@Override
	public String toString() {
		return "Student [Grade for average " + average + ":" + calculateGrade() + "]";
	}

	
	
}

//ELC(Tester.java)
===============
package com.Nit.OOPs_Task_12_1;

import java.util.*;
public class Tester {

	public static void main(String[] args) {
		
		double average;
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Enter student name:");
		String name = sc.nextLine();
//		sc.nextLine();
		System.out.print("Enter student id:");
		int id = sc.nextInt();
		System.out.print("Enter course:");
		String course = sc.nextLine();
		sc.nextLine();
		System.out.print("Enter student fee:");
		double fee = sc.nextDouble();
		System.out.print("Enter average:");
		average = sc.nextDouble();
		if(average>0)
		{
			Student s1 = new Student(name,id,course,fee,average);
			System.out.println(s1.toString());
		}
		else
		{
			System.err.println("Error: Average mark must be between 0 and 100.");
			return;
		}
		
		sc.close();

	}

}

--------------
Program 2:-
Create a class Employee (Business Logic Class)
Instance Variables:
employeeId :private-int
employeeName : private-String
employeeSalary: private-double

Create a parameterized constructor with the parameters: eid, ename, salary of type int,String,double respectively to initialize the instance variable of the class.

Create a static method getEmployeeObject() in the Employee class
Method Name : getEmployeeObject()
  Parameter : no parameter
Return type : Employee
Access modifier : public
getEmployeeObject() method of Employee class should take employeeId, employeeName,
employeeSalary from the keyboard to initialize the instance variables, Create and return the
Employee object from this method.
Override toString() from Object class to print Employee class properties.
Create another class Main which contains main method (ELC class). Accept 5 Employee Object
from keyboard and print their data using toString() method

Code:
--------
//Eployee.java(BLC)
package com.Nit.OOPs_Task_12_2;

import java.util.*;

public class Employee {
	private int employeeId;
	private String employeeName;
	private double employeeSalary;
	
	public Employee(int id,String name,double salary)
	{
		this.employeeId = id;
		this.employeeName = name;
		this.employeeSalary = salary;
	}
	
	public static Employee getEmployeeObject()
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter Employee Id:");
		int id = sc.nextInt();
		sc.nextLine();
		System.out.println("Enter Employee Name:");
		String name = sc.nextLine();
		System.out.println("Enter Employee Salary:");
		double salary = sc.nextDouble();
		
		return new Employee(id,name,salary);
		
	}

	@Override
	public String toString() {
		return "Employee [employeeId=" + employeeId + ", employeeName=" + employeeName + ", employeeSalary="
				+ employeeSalary + "]";
	}
	
}

//Main.java(ELC)

package com.Nit.OOPs_Task_12_2;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); 
        
        for (int i = 1; i <= 5; i++) {
            System.out.println("Enter details for Employee " + i + ":");
            

            Employee ei = Employee.getEmployeeObject(); 


            System.out.println(ei.toString());
            System.out.println("------------------------------------------------------------");
        }

        sc.close();
    }
}

----------------------------------------------------------------------
Program: 3
-----------
Create a class Employee (Business Logic Class)
Instance Variables:
employeeNumber : private-int
employeeName : private-String
Create a parameterized constructor with the parameters eno and ename of type int and String to
initialize the instance variable of the class.
Create getters method for both the instance variables.
Create another class Manager (Business Logic class)
Instance Variables:
managerId : private-int
managerName : private-String
Create a parameterized constructor which accept Employee class as a parameter, Initialize the
instance variable of Manager class with the help of Employee class properties
Override toString() from Object class to print Manager class properties.
Create another class Main which contains main method (ELC class) to print Manager data.

Code:
--------
//Employee.java(BLC)
package com.Nit.OOPs_Task_12_3;

public class Employee {
		
	private int employeeNumber;
	private String employeeName;
	
	public Employee(int eno, String ename)
	{
		this.employeeNumber = eno;
		this.employeeName = ename;
	}

	public int getEmployeeNumber() {
		return employeeNumber;
	}

	public String getEmployeeName() {
		return employeeName;
	}
	
}

//Manager.java(BLC)

package com.Nit.OOPs_Task_12_3;

public class Manager {

	private int managerId;
	private String managerName;
	
	public Manager(Employee e)
	{
		this.managerId = e.getEmployeeNumber();
		this.managerName = e.getEmployeeName();
	}

	@Override
	public String toString() {
		return "Manager "
				+ "[managerId=" + managerId + ", "
						+ "managerName=" + managerName + "]";
	}

	
	
}

//Main.java(ELC)

package com.Nit.OOPs_Task_12_3;

import java.util.Scanner;
public class Main {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter Id:");
		int eid = sc.nextInt();
		sc.nextLine();
		System.out.println("Enter Name:");
		String ename = sc.nextLine();
		Employee e1 = new Employee(eid,ename);
		Manager m1 = new Manager(e1);
		System.out.println(m1.toString());
		sc.close();
	}

}

===========================================================================================================================================================================
04-02-25
-----------
Que-1)
________________
class ConstructorsTest
{
    public static void main(String[] args)
    {
        U u = new U();
        U u1 = new U(1);
        V v = new V();
        V v1 = new V(1);
        T t = new T();
        T t1 = new T(1);
    }
}
class U {
    V v = new V();

    U() 
    { 
     System.out.print("U"); 
      }

    U(int i) {
     System.out.print("u");
     }
}

class V {
    V() {
     System.out.print("V");
      }

    V(int i) {
    System.out.print("v"); 
     }
}

class T extends V {

    T() {
     System.out.print("T"); 
     }

    T(int i) {
     System.out.print("t"); 
     }
}

Output:
----------
V
U
V
u
V
v
V
T
V
t
________________________________________________________________________________________________
Que-2)
____________________
class OutPut
{
    public static void main(String[] args)
    {
        new Alpha();
        new Base();
    }
}
class Alpha extends Base
{
    Alpha()
    {
        System.out.print("Base");
    }
}
class Base
{  
    Base()
    {
        System.out.println("Base");
    }

Output:
----------
Base
BaseBase


_____________________________________________________________________________________
Que-3)
___________________
class OutPut
{
    public static void main(String [] args)
    {
        Count t = new Count();
        t.count();
    }
}

class Count extends Count2
{
    Count()
    {

    }
}
class Count2
{
    void count()
    {
        System.out.print("Output = ");

        for (int x = 0; x < 7; x++,x++ )
        {
            System.out.print(" " + x);
        }
    }
}
Ouput:
---------
Output =  0 2 4 6
____________________________________________________________________________________________
Que-4)
_______________

What will be the output of the following program?

class OutPut
{
    public static void main(String [] args)
    {
        Count2 count = new Count2();
        count.count();
    }
}

class Count extends Count2
{
    Count()
    {

    }
}
class Count2
{
    void count()
    {
        int i = 5;
        System.out.print("Output = ");

        for (int x = 0; x <= (i % 7); x += 1)
        {
            System.out.print(" " + x);
        }
    }
}

Output:
---------
Output = 0 1 2 3 4 5
___________________________________________________________________________________
Que-5)
____________________
What will be the output of the following program?

class OutPut
{
    public static void main(String [] args)
    {
        Count2 count = new Count2();
        count.count();
    }
}

class Count extends Count2
{
    Count()
    {

    }
}
class Count2
{
    void count()
    {
        int i = 5;
        System.out.print("Output = ");

        for (int x = 0; x <= (i % 7); x += 1)
        {
            System.out.print(" " + x);
            i++;
        }
    }
}

Output:
----------
Output =  0 1
_______________________________________________________________________________________
Que-6)
___________________
What will be the output of the following program?

class OutPut
{
    public static void main(String s[])
    {
        int i = 2;
        B b = new B();
        b.execute();
    }
}

class A
{
    int i = 0;
    A(){}
}

class B extends A
{
    void execute()
    {
        for(; i < 6; i++)
        
            switch(i)
            {
                case 0:
                System.out.println("i is zero.");
                break;
        
                case 1:
                System.out.println("i is one.");
                break;
        
                case 2:
                System.out.println("i is two.");
                continue;
        
                case 3:
                System.out.println("i is three.");
                break;
        
                default:
                System.out.println("i is greater than three.");
            }
    }
}

Output:
----------
i is zero.
i is one.
i is two.
i is three.
i is greater than three.
i is greater than three.
_________________________________________________________________________________
Que-7)
_______________________
What will be the output of the following program?

class OutPut
{
    public static void main(String s[])
    {
        int i = 2;
        B b = new B();
        b.execute();
    }
}

class A
{
    A()
    {
        int i = 1;
    }
}

class B extends A
{
    void execute()
    {
        System.out.println("i = " + i);
    }
}
Output:
-------------
_ERROR!
/tmp/R9IaGCbunG/Main.java:23: error: cannot find symbol
        System.out.println("i = " + i);
                                    ^
  symbol:   variable i
  location: class B
1 error
ERROR!
error: compilation failed
____________________________________________________________________________
Que-8)
_________________

What will be the output of the following program?

class Constructors {
    public static void main(String[] args) {
        new A(3);
        new B(5, 6);
        new B(6, 7).C(1, 2, 3);
        new C(3, 3, 4).B(4, 5);
        new C(1, 1, 1);
    }
}
class A {
    A(int i) {  
  print(i * 2);   
     }
    void print(int i) { 
    System.out.print(i + " ");   
    }
}
class B extends A {
    B(int j, int k) {
        super(j);
        print(k * 4);
    }
    void C(int j, int k, int l) {
      print(j + k + l - 3);   
       }
}
class C extends B {
    C(int j, int k, int l) {
        super(j, k);
        print(l - 3);
    }
    void B(int i, int k) {  
      print(i * 6);   
      }
}
output:
---------
6 10 24 12 28 3 6 12 1 24 2 4 -2 
________________________________________________________
Que-9)
________________
What will be the output of the following program?

class FourWheeler
{
    public static void main(String[] args)
    {
        new Car(0);
    }
}

class Vehicle
{
    int i;
    int j;

    Vehicle(int i)
    {
        this.i = i;
        j = i;
    }

    Vehicle(int i, int j)
    {
        this.i = i;
        this.j = j;
    }
}

class Bus extends Vehicle
{
    double j;

    Bus(double j)
    {
        this.j = j;
    }
}

class Car extends Vehicle
{
    Car(int i)
    {
        super(i);
        System.out.print("Executed Successfully");
    }
}

Output:
----------
Error
___________________________________________________________
Que-10)
______________
What will be the output of the following program?

class BaseClass {
    BaseClass() {
        System.out.print("*");
    }
    BaseClass(String str) {
        this();
        System.out.print("@" + str);
    }
}
public class ChildClass extends BaseClass {
    ChildClass() {
        System.out.print("#");
    }
    ChildClass(String name) {
        this();
        System.out.print("$" + name);
    }
    public static void main(String args[]) {
        new ChildClass("hello");
    }
}
output:
---------
*#$hello
___________________________________________________________
Que-11)
________________
What will be the output of the following program?

class White {
    White() {
        System.out.print("white is ");
    }
}
class Purple extends White {
    Purple(String color) {
        System.out.print(color);
    }
}
public class Black extends Purple {
    Black() {
        super("beautiful" + ",");
    }
    public static void main(String[] a) {
        new Purple("awesome" + ",");
        new Purple("nice");
    }
}
output:
---------
white is awesome,white is nice
______________________________________________________________
Que-12)
________________
What will be the output of the following program?

public class IAm {
    public static void main(String arg[]) {
        School ref = null;
        ref = new Office();
        ref.display();
    }
}
class School {
    void display() {
        System.out.println("10th class");
    }
}
class College extends School {
    void display() {
        new School().display();
        System.out.println("B.Tech");
    }
}
class Office extends School {
    void display() {
        new College().display();
        System.out.println("S/W company");
    }
}

output:
---------
10th class
B.Tech
S/W company
__________________________________________________________________
Que-13)
______________
What will be the output of the following program?

public class IAm {
    public static void main(String arg[]) {
        float input = 24.8888888888888889f;
        School ref = null;
        if (input < 10) {
            ref = new School();
        } else if (input > 30) {
            ref = new College();
        } else if (input == 24.88889f) {
            ref = new Office();
        }
        ref.display();
    }
}
class School {
    void display() {
        System.out.println("I am studying 10th class.");
    }
}
class College extends School {
    void display() {
        System.out.println("I am studying B.Tech.");
    }
}

class Office extends School {
    void display() {
        System.out.println("I am working in S/W company.");
    }
}
output:
----------
I am working in S/W company.
____________________________________________________________________
Que-14)
________________
What will be the output of the following program?
public class Fruit  
{  
private double fprice;  
private String fname;  

Fruit(double fPrice, String fName)  
{   
fprice = fPrice;  
fname = fName;  
}  

Fruit(Fruit fruit)  
{  
System.out.println("\nAfter invoking the Copy Constructor:\n");  
fprice = fruit.fprice;  
fname = fruit.fname;  
}  

double showPrice()  
{  
return fprice;  
}  
 
String showName()  
{  
return fname;  
}  
 
public static void main(String args[])  
{  
Fruit f1 = new Fruit(399, "Ruby Roman Grapes");  
System.out.println("Name of the first fruit: "+ f1.showName());  
System.out.println("Price of the first fruit: "+ f1.showPrice());  
Fruit f2 = new Fruit(f1);  
System.out.println("Name of the second fruit: "+ f2.showName());  
System.out.println("Price of the second fruit: "+ f2.showPrice());  
}  
}
output:
---------
Name of the first fruit: Ruby Roman Grapes
Price of the first fruit: 399.0

After invoking the Copy Constructor:

Name of the second fruit: Ruby Roman Grapes
Price of the second fruit: 399.0
____________________________________________________________________ 
Que-15)
________________
What is the output of the below Java program?
public class TestingConstructor
{
  void TestingConstructor()
  {
    System.out.println("Amsterdam");	
  }

  TestingConstructor()
  {
    System.out.println("Antarctica");	
  }
	
  public static void main(String[] args)
  {
    TestingConstructor tc = new TestingConstructor();
  }
}
Output:
---------
Antarctica
_________________________________________________________________
Que-16)
________________
public class Constructor3
{
  int birds=10;
  Constructor3()
  {
    this(20);
  }
  Constructor3(int birds)
  {
    System.out.println("Birds=" + birds);
  }

  public static void main(String[] args)
  {
    Constructor3 con = new Constructor3();
  }
}
Output:
----------
Birds=20
___________________________________________________________________
Que-17)
________________
public class Constructor7
{
  Constructor7(int a)
  {
    System.out.println("Book=" + a);
  }
  Constructor7(float a)
  {
    System.out.println("Pen="+ a );
  }
  public static void main(String[] args)
  {
    Constructor7 con = new Constructor7(50.5f);
  }
}
output:
---------
Pen=50.5
____________________________________________________________________
Que-18)
_________________
What will be the output of the following Java program?

class A
{
int i;
void display()
{
System.out.println(i);
}
}
class B extends A
{
int j;
void display()
{
System.out.println(j);
}
}
class inheritance_demo
{
public static void main(String args[])
{
B obj = new B();
obj.i=1;
obj.j=2;
obj.display();
}
}
Output:
---------
2
_________________________________________________________________
Que-19)
______________
class Main {

  String languages;

  // constructor accepting single value
  Main(String lang) {
    languages = lang;
    System.out.println(languages + " Programming Language");
  }

  public static void main(String[] args) {

    // call constructor by passing a single value
    Main obj1 = new Main("Java");
    Main obj2 = new Main("Python");
    Main obj3 = new Main("C");
  }
}
Output:
----------

Java Programming Language
Python Programming Language
C Programming Language
_______________________________________________________________
Que-20)
_____________
class Main {

  String language;

  Main() {
    this.language = "Java";
  }

  Main(String language) {
    this.language = language;
  }

  public void getName() {
    System.out.println("Programming Langauage: " + this.language);
  }

  public static void main(String[] args) {

    Main obj1 = new Main();

    Main obj2 = new Main("Python");

    obj1.getName();
    obj2.getName();
  }
} 

Output:
----------
Programming Langauage: Java
Programming Langauage: Python
===========================================================================================================================================================================

05-03-25
********
1. What is the output of following code?
class Test 
{
Test()
{
System.out.println("Constructor");
}

{
System.out.println("Non-static block");
}
}
public class Main
{
public static void main(String[] args) 
{
System.out.println("main method");
new Test();
}
}
Output:
main method
Non-static block
Constructor
------------------------------------------------------------------------------------------------------------------------
2. what is the output of following code?
class Test 
{    
    { 
    System.out.println("Non-static Block"); 
    }
    Test() 
    { 
    System.out.println("Constructor");
    }
    
    public static void main(String[] args) 
    {
        Test obj1 = new Test();
        Test obj2 = new Test();
    }
}
output:
Non-static Block
Constructor
Non-static Block
Constructor
------------------------------------------------------------------------------------------------------------------------
3.What is true about a non-static block?
A) It executes before the static block
B) It executes after the constructor
C) It executes before the constructor
D) It cannot contain instance variables

Answer: C) It executes before the constructor

------------------------------------------------------------------------------------------------------------------------
4. What is the output of following code?

class Test 
{
	 int x = 10;
	    
	    { x += 5; }
	    
	    { x += 10; }
	    
	    public static void main(String[] args) 
	    {
	        Test obj1 = new Test();
	        System.out.println(obj1.x);
	    }
}
output:
25
------------------------------------------------------------------------------------------------------------------------


5. What is the output of following code?
class Test 
{
	Test() {
        System.out.println("Constructor Called");
    }
    
    public static void main(String[] args) 
    {
        Test obj1;
        System.out.println("Main Method");
    }
}
output:
Main method
------------------------------------------------------------------------------------------------------------------------
6.Can a non-static block initialize instance variables?
A) No, only constructors can initialize instance variables.
B) Yes, but only static variables.
C) Yes, it can initialize instance variables before the constructor 
   executes.
D) Only final instance variables.
output:
C
------------------------------------------------------------------------------------------------------------------------
7. What is the output of following code?
class Test
{
int a ;
public static void main(String args[ ])
{
new Test();
}
{
System.out.println(this.a);
this.a = 100 ;
}
Test()
{
System.out.println(this.a);
}
}
output:
0
100
------------------------------------------------------------------------------------------------------------------------
8. What is the output of following code?
class Test
{
Test( )
{
System.out.println("Object address inside constructor : "+this);
}
public static void main(String args[ ])
{
Test obj = new Test();
System.out.println("Object address inside main : "+obj);
}
}
output:
Object address inside constructor : Java_McqS.Test@4517d9a3
Object address inside main : Java_McqS.Test@4517d9a3
------------------------------------------------------------------------------------------------------------------------
9. What is the output of following code?
class Employee
{
int eno ;
String ename ;
float esal ;
public static void main(String[] args)
{
Employee e = new Employee();
System.out.println("Eno : "+e.eno);
System.out.println("Ename : "+e.ename);
System.out.println("Esal : "+e.esal);
}
}
output:
Eno : 0
Ename : null
Esal : 0.0
------------------------------------------------------------------------------------------------------------------------

10.What is the output of following code?
class Test 
{
final int a;

public static void main(String[] args) 
{
Test obj=new Test();
System.out.println(obj.a);
}
}
Output:
a is not initialized 
------------------------------------------------------------------------------------------------------------------------
11. What is the output of following code?
class Test 
{
int a;
{
Test obj = new Test();
System.out.println(a);
}
public static void main(String[] args)
{
Test obj=new Test();

System.out.println(obj.a);
}
}
output:
Exception in thread "main" java.lang.StackOverflowError
------------------------------------------------------------------------------------------------------------------------
12. What is the output of following code?
class Laptop
{
void access()
{
System.out.println("Copy java soft copies... ");
}
}
class Faculty
{
static Laptop password = new Laptop();
}
class Student
{
public static void main(String[] args)
{
Faculty.password.access();
}
}
output:
Error: Main method not found in class Java_McqS.Student, please define the main method as:
   public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application
------------------------------------------------------------------------------------------------------------------------
13. Write a java program how many objects can be created for a class?
class Example
{
int x=10;
int y=20;
public static void main(String[] args)
{
Example e1=new Example();
Example e2=new Example();
System.out.println(e1.x+" ..."+e1.y);
System.out.println(e2.x+" ..."+e2.y);
}
}
Output:
10 ...20
10 ...20
------------------------------------------------------------------------------------------------------------------------
14. Write a java program creating multiple objects and modifying their
values?
class Example
{
int a=10;
int b=20;
public static void main(String[] args)
{
Example e1=new Example();
Example e2=new Example();
System.out.println(e1.a+". .."+e1.b);
System.out.println(e2.a+". .."+e2.b);
e1.a=50;
e2.b=60;
System.out.println(e2.a+". .."+e2.b);
System.out.println(e2.a+". .."+e2.b);
}
}
Output:
10. ..20
10. ..20
10. ..60
10. ..60
------------------------------------------------------------------------------------------------------------------------
15. Write a java program to show overriding toString() method to print
object data?

class Example
{
int eid;
String ename;
String company;
public String toString(){
return
"eid:"+eid+"\n"+"ename:"+ename+"\n"+"company:"+company+"\n";
}
public static void main(String[] args)
{
Example e1=new Example();
e1.eid=7279;
e1.ename="Ganesh";
e1.company="Naresh IT";
System.out.println(e1);
}
}
Output:
eid:7279
ename:Ganesh
company:Naresh IT

------------------------------------------------------------------------------------------------------------------------
16. Write a java program shows creating class with static and non-static
variables and their modifications?
class Example
{
static int a = 10;
       int b = 20;
public static void main(String[] args)
{
   System.out.println(a);
   System.out.println(b);
}
}
Output:
Compile time error:
Cannot make a static reference to the non-static field b
------------------------------------------------------------------------------------------------------------------------
17. Write a java program can we create object without having non-static
variable in the class?
class Test
{
void m1(){
System.out.println("m1() method");
}
public static void main(String[] args)
{
System.out .println("main method");
Test t=new Test();
t.m1();
}
}
Output:
main method
m1() method
------------------------------------------------------------------------------------------------------------------------
18. Find the output of the Program.

class Demo
{
    Demo() 
    { 
    this(10); 
    System.out.println("No Argument Constructor");
    }
    Demo(int x) 
    { 
     System.out.println("Parameterized Constructor: " + x); 
    }    
    public static void main(String[] args) 
    {
        Demo obj = new Demo();
    }
}

Output:
Parameterized Constructor: 10
No Argument Constructor
------------------------------------------------------------------------------------------------------------------------
19. Find the Output and Check How many times NSB will be executed. 

class Foo
{
	public Foo(int x, int y)
	{
		this(2.4, 5.7);
		System.out.println("Integer parameter constructor");
	}
	public Foo(double x, double y)
	{
		System.out.println("Double parameter constructor");
	}
	
	{
		System.out.println("Non static block");
	}
	
}

public class InstanceBlockDemo4 {

	public static void main(String[] args) 
	{
		Foo f1 = new Foo(100,200);

	}

}

Output:
Non static block
Double parameter constructor
Integer parameter constructor
------------------------------------------------------------------------------------------------------------------------
20. Find the Output of the Program.

class NIT
{
	public NIT()
	{
		System.out.println("Constructor");
		
		{
		  System.out.println("Non static block");	
		}
	}
}

public class InstanceBlockDemo6 
{

	public static void main(String[] args)
	{
		new NIT();

	}

}
Output:
Constructor
Non static block

------------------------------------------------------------------------------------------------------------------------
21 Find the Output :

class Test
{
  private int x = 99 ;   
 
  {
	  x = 15; 
  }
  
  public Test()
  {
	  super();
	  x = 56; 
  }
  
  public int getX()
  {
	  return this.x;
  }
}

public class Order 
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();	
		
		System.out.println(t1.getX());
	}

}
Output:
56
------------------------------------------------------------------------------------------------------------------------
22. Find the Output
class Test
{
	final int x;
	
	public void setData()
	{
		x = 200;
		System.out.println(x);
	}
}
class Test 
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.setData();
	}
}
Output:
Error: Could not find or load main class Java_McqS.Order
Caused by: java.lang.ClassNotFoundException: Java_McqS.Order
------------------------------------------------------------------------------------------------------------------------
23. Find the Output
class Demo
{
	final int x;
	
	{
		print();
		x = 222;
	}
	public void print()
	{
		System.out.println("Default Value :"+x);
	}
	
	
}
public class Test 
{
	public static void main(String[] args) 
	{
		Demo d1 = new Demo();
		System.out.println("User value :"+d1.x);
	}
}
Output:
Default Value :0
User value :222
------------------------------------------------------------------------------------------------------------------------
24. Find the Output
class Foo
{
	final int x;
	 
	{
		x = 123;
	}
	 
	 
	public Foo()
	{
	   x = 300;	
	}
}
public class Test 
{
	public static void main(String[] args) 
	{
		Foo f1 = new Foo();
		System.out.println(f1.x);
	}
}
Output:
Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	The final field x may already have been assigned
------------------------------------------------------------------------------------------------------------------------
===========================================================================================================================================================================
06-02-25
*******
Que 1 : Simple Inheritance Program :
-------------------------------------
Develop one program on Multi-level Inheritance with following requirements :

Animal => Mammal => Dog [Multi-level Inheritance]

Create a BLC class called Animal.

Attributes/Properties: No properties

Constructor:
No Constructor 

Methods:

public void eat() : Method to print that "Animal is eating"

Create Another BLC class Mammal which is the sub class of Animal.

Attributes/Properties: No properties

Constructor:
No Constructor 

Methods:

public void walk() : Method to print that "Mammal is walking"


Create Another class Dog which is the sub class of Mammal.

Attributes/Properties: No properties

Constructor:
No Constructor 

Methods:

public void bark() : Method to print that "Dog is barking"


Create an ELC class MultilevelInheritance which contains main method, Create the Object for more specialized class and call the behavior.

Code:
--------
//Animal.java
------------------
package com.Nit.OOPs_Task_13_1;

public class Animal {
	public void eat()
	{
		System.out.println("Animal is eating");
	}
}

//Mammal.java
---------------------
package com.Nit.OOPs_Task_13_1;

public class Mammal extends Animal {

	public void walk()
	{
		System.out.println("Mammal is walking");
	}
}

//Dog.java
---------------
package com.Nit.OOPs_Task_13_1;

public class Dog extends Mammal {

	public void bark()
	{
		System.out.println("Dog is barking");
	}
}

//MultiLevelInHeriance.java
----------------------------------------
package com.Nit.OOPs_Task_13_1;

public class Multilevelinheritance {

	public static void main(String[] args) {
		
		Dog d = new Dog();
		d.eat();
		d.walk();
		d.bark();
		
	}

}

=========================================================================
Q2) Student Fee Management System

 A university needs an efficient way to manage and process fees for its students. There are different types of students with varying fee structures. 
   
 The university wants a system to handle the following scenarios:

1) Regular Students: Students who only need to pay the exam fee. This is the super class scenario.

2) Day Scholars: Students who attend classes daily but do not stay in hostels. They have an additional transport fee with exam fee. This fee needs to be managed and calculated separately.

3) Hostellers: Students who stay in university hostels and have additional hostel fees. Their total fee is the sum of the exam fee and hostel fee.


Create BLC class as Student  
---------------------------
It contains the following implementation.

Instance Variables: studentId : int , name :String , examFee:double

Methods: public displayDetails(): String ,
         public payFee() :double

Define parameterized constructor and a toString method.

Create two BLC sub classes of Student called DayScholar and Hosteller. 
Add the following implementations to each class.

DayScholar:
-----------

Instance Variables : transportFee:double ,

Methods: Define parameterized constructor 


Hosteller:
----------
Instance Variables: hostelFee :double

Methods: Define parameterized constructor 

Add the following methods in BOTH classes.

Method: displayDetails(): This method should return a string containing the details of the student

in the following format:

Student [name=John Smith,studentId=123,examFee=100.0] OR

DayScholar[transportFee=500, name=John Smith,studentId=123,examFee=100.0] and so on.

Method: payFee(amount): This method takes amount as parameter that represents the fee

provided. You must calculate and then return the remaining amount paid in excess. If excess is

paid, the returned amount will be negative. The total fees that each student must pay must

include all the fees applicable to that Student(examFees, transportFees, hostelFees as applicable).

Subtract the given amount from total fee for each student and return the remaining amount.


An ELC class Tester is given to you with a main method. Use this class to test your solution's

classes and methods.


Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading values for Student class OR DayScholar Class OR Hosteller Class then make sure if any numeric value is <=0 then print "Error Invalid Input".
                
sample output : Error Invalid Input


TEST CASE 2 :
-------------
sample input  : 
                 1. For Student Class:
                 studentId: 1
                 name: "John Smith"
                 examFee: 25000.0
                 Payment Amount: 25000.0

                 2. For DayScholar Class:
                 studentId: 2
                 name: "Brian Lara"
                 examFee: 25000.0
                 transportFee: 5000.0
                 Payment Amount: 37000.0

                 3. For Hosteller Class:
                 studentId: 3
                 name: "Virat Kohli"
                 examFee: 25000.0
                 hostelFee: 8000.0
                 Payment Amount: 33000.0

sample output : 

                 Student[name=John Smith,studentId=1,examFee=25000.0]
                 All Fees are clear
                 
                 DayScholar[TransportFee=5000.0,name=Brian Lara,studentId=2,examFee=25000.0]
                 Remaining amount to pay is: 7000.0
                 
                 Hosteller[HostelFee=8000.0,name=Virat Kohli,studentId=3,examFee=25000.0]
                 All Fees are clear

Code:
---------
//Student.java

package com.Nit.OOPs_Task_13_2;

public class Student {

	int studentId;
	String name;
	double examFee;
	
	public Student(int studentId, String name, double examFee) {
		super();
		this.studentId = studentId;
		this.name = name;
		this.examFee = examFee;
	}

	public String displayDetails()
	{
		return "Student [name="+this.name+"\n,studentId="+this.studentId+"\n,examFee="+this.examFee+"]";
	}
	

	@Override
	public String toString() {
		return "Student [studentId=" + studentId + ", name=" + name + ", examFee=" + examFee + "]";
	}
	public double payFee(double amount)
	{
		double totalFee = examFee;
		double remainingAmt=totalFee-amount;
		if(totalFee == 0)
		{
			System.out.println("All Fees are clear");
		}
		else
		{ 
			
			System.out.println("Remaining amount to pay is:"+remainingAmt);
		}
		return remainingAmt;
	}
	
	
}

//DayScholar.java

package com.Nit.OOPs_Task_13_2;

public class DayScholar extends Student {

	double transportFee;

	public DayScholar(int studentId, String name, double examFee, double transportFee) {
		super(studentId, name, examFee);
		this.transportFee = transportFee;
	}
	
	public String displayDetails()
	{
		return "DayScholar[Transport Fee="+this.transportFee+"\n, name="+this.name+"\n,studentId="+this.studentId+",examFee="+this.examFee+"]" ;
	}
	

	@Override
	public String toString() {
		return "Day Scholar [studentId=" + studentId + ", name=" + name + ", examFee=" + examFee + ",Transport Fee="+transportFee+"]";
	}
	
	public double payFee(double amount)
	{
		double totalFee = examFee+transportFee;
		double remainingAmt = amount-totalFee;
		if(totalFee == 0)
		{
			System.out.println("All Fees are clear");
			
		}
		else
		{
			
			System.out.println("Remaining amount to pay is:"+remainingAmt);
			
		}
		return remainingAmt;
		
	}
}


//Hosteller.java

package com.Nit.OOPs_Task_13_2;

public class Hosteller extends Student {

	double hostelFee;

	public Hosteller(int studentId, String name, double examFee, double hostelFee) {
		super(studentId, name, examFee);
		this.hostelFee = hostelFee;
	}
	
	public String displayDetails()
	{
		return "Hosteller [Hostel Fee="+this.hostelFee+"\n, name="+this.name+"\n,studentId="+this.studentId+"\n,examFee="+this.examFee+"]" ;
	}
	

	@Override
	public String toString() {
		return "Student [studentId=" + studentId + ", name=" + name + ", examFee=" + examFee + ",Hostel Fee="+hostelFee+"]";
	}
	
	public double payFee(double amount)
	{
		double totalFee = examFee+hostelFee;
		double remainingAmt = totalFee-amount;
		if(totalFee == (examFee+hostelFee))
		{
			System.out.println("All Fees are clear");
		}
		else
		{
			System.out.println(" Remaining amount to pay is"+remainingAmt);
			
		}
		return remainingAmt;
	}
	
}


//Tester.java

package com.Nit.OOPs_Task_13_2;

import java.util.*;
public class Tester {

	public static void main(String[] args) {
		
		Scanner sc  = new Scanner(System.in);
		System.out.println("1.Student Class:");
		System.out.println("Enter Student ID:");
		int id = sc.nextInt();
		System.out.println("Enter Student Name:");
		String name = sc.nextLine();
		sc.nextLine();
		System.out.println("Enter Exam Fee:");
		double examFee = sc.nextDouble();
		System.out.println("Enter Payment Amount:");
		double amount = sc.nextDouble();
		
		
		System.out.println("2.Student Class:");
		System.out.println("Enter Student ID:");
		int id1 = sc.nextInt();
		System.out.println("Enter Student Name:");
		String name1 = sc.nextLine();
		sc.nextLine();
		System.out.println("Enter Exam Fee:");
		double examFee1 = sc.nextDouble();
		System.out.println("Enter Payment Amount:");
		double amount1 = sc.nextDouble();
		System.out.println("Enter Transport Amount:");
		double transportFee = sc.nextDouble();
		
		
		System.out.println("3.Student Class:");
		System.out.println("Enter Student ID:");
		int id2 = sc.nextInt();
		System.out.println("Enter Student Name:");
		String name2 = sc.nextLine();
		sc.nextLine();
		System.out.println("Enter Exam Fee:");
		double examFee2 = sc.nextDouble();
		System.out.println("Enter Transport Fee:");
		double hostelFee = sc.nextDouble();
		System.out.println("Enter Payment Amount:");
		double amount2 = sc.nextDouble();
		
		
		Student s1 = new Student(id, name, examFee);
		s1.payFee(amount);
		System.out.println(s1);
		
		System.out.println("=============================================");
		
		DayScholar d1 = new DayScholar(id1, name1, examFee1, transportFee);
		d1.payFee(amount1);
		System.out.println(d1);
		
		System.out.println("=============================================");
		
		Hosteller h1 = new Hosteller(id2, name2, examFee2, hostelFee);
		h1.payFee(amount2);
		System.out.println(h1);
	}

}

=================================================================
07-03-25
*******
Follow the instruction:-
i. Before going through below exercises please visit the link given below, where you can
experience the coding standard that each and every developer should follow.
ii. This Code Conventions for the Java Programming Language document contains the
standard conventions that Sun follow and recommend that we should follow. It covers
filenames, file organization, indentation, comments, declarations, statements, white
space, naming conventions, programming practices and includes a code example.
iii. LINK - http://www.oracle.com/technetwork/java/codeconv-138413.html

Inheritance Lab Exercise
Duration: 2 Hours

_____________________________________________________________________
Create a Program to Develop Hierarchical Inheritance for Employee Management
System.
Here Employee is super class and it has two sub classes PermanentEmployee and
ContractEmployee.
We need to display the details of PermanentEmployee including provident fund and
net Salary.
We need to display the details of ContractEmployee including contract duration.

Coding Requirements :
-------------------------------
Create a BLC class called Employee.

Attributes/ Properties [protected]
employeeId - int
employeeName - String

employeeSalary - double

Create a Parameterized constructor to initialize all fields.
Create another BLC class PermanentEmployee which extends from Employee

Attributes/ Properties [protected]
providentfund - double

Create a parameterized constructor to initialize super class properties only
[Note : providentfund property will not initialize through constructor]

Initialize providentfund manually, It must be 12% of the salary.

Genarate toString() method to print all the properties of super class as well as sub
class.
[See the test cases for more details]

Method :
--------
Method Name : netSalary()
Modifier : public
Argument : No argument
return type : void

This method should print netSalary i.e salary + providentfund

Create another BLC class ContractEmployee which extends from Employee

Attributes/ Properties [protected]

contractDuration - int

Create a parameterized constructor to initialized all fields (super class and sub class)

Genarate toString() method to print all the properties of super class as well as sub
class.
[See the test cases for more details]

Create an ELC class EmployeeSystem which contains main method.

Create both sub class objects and print the result.

Test Cases for Output :
------------------------
Test Case 1 :
-------------
Enter permanent employee Id :101
Enter permanent employee Name :Scott
Enter permanent employee Salary :100000
PermanentEmployee [empoyeeId=101, employeeName=Scott,
employeeSalary=100000.0, providentfund=12000.0]
Net Salary is :112000.0
========================================
Enter contract employee Id :102

Enter contract employee Name :Smith
Enter contract employee Salary :80000
Enter contract duration in year :5
ContractEmployee [empoyeeId=102, employeeName=Smith,
employeeSalary=80000.0, contractDuration=5 years]

Test Cases for Input Validation :
---------------------------------
Test Cases 1:
-------------
Enter permanent employee Id :-90
Enter permanent employee Name :Scott
Enter permanent employee Salary :12000
Invalid Employee Id

Test Cases 2:
-------------
Enter permanent employee Id :101
Enter permanent employee Name :
Enter permanent employee Salary :6543
Employee Name can't be null

Test Cases 3 :
---------------
Enter permanent employee Id :120
Enter permanent employee Name :Alen

Enter permanent employee Salary :-78908
Salary can't be 0 or negative

Code:
--------
//Employee.java(BLC)
=================
package com.Nit.OOPs_Task_14_1;

public class Employee {
	protected int employeeId;
	protected String employeeName;
	protected double employeeSalary;
	public Employee(int employeeId, String employeeName, double employeeSalary) {
		super();
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.employeeSalary = employeeSalary;
	}
	
	
}

//PermanenentEmployee.java(BLC)
==========================
package com.Nit.OOPs_Task_14_1;

public class PermanentEmployee extends Employee {
	protected double providentFund;

	public PermanentEmployee(int employeeId, String employeeName, double employeeSalary) {
		super(employeeId, employeeName, employeeSalary);
		this.providentFund = employeeSalary*0.12;
	}

	
	
	@Override
	public String toString() {
		return "PermanentEmployee [employeeId=" + employeeId + ", employeeName=" + employeeName + ", employeeSalary="
				+ employeeSalary + ", providentFund=" + providentFund + "]";
	}



	public void netSalary()
	{
		System.out.println("Net Salary:"+(employeeSalary+providentFund));
	}
	
}

//ContractEmployee.java(BLC)
========================
package com.Nit.OOPs_Task_14_1;

public class ContractEmployee extends Employee {
	
	protected int contractDuration;

	public ContractEmployee(int employeeId, String employeeName, double employeeSalary, int contractDuration) {
		super(employeeId, employeeName, employeeSalary);
		this.contractDuration = contractDuration;
	}

	@Override
	public String toString() {
		return "ContractEmployee [employeeId=" + employeeId + ", employeeName=" + employeeName + ", employeeSalary="
				+ employeeSalary + ", contractDuration=" + contractDuration + "]";
	}
	
}

EmployeeSystem.java(ELC)
======================
package com.Nit.OOPs_Task_14_1;

import java.util.*;
public class EmployeeSystem {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		
		System.out.print("Enter permanent employee Id:");
		int employeeId = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter permanent employee Name:");
		String employeeName = sc.nextLine();
		System.out.print("Enter permanent employee Salary :");
		double employeeSalary = sc.nextDouble();
		PermanentEmployee p = new PermanentEmployee(employeeId, employeeName, employeeSalary);
		if(employeeId>0)
		{
			if(employeeName.isBlank() || employeeName.isEmpty())
			{
				System.out.println("Employee name cant't be null");
			}
			else
			{
				if(employeeSalary>0)
				{
					System.out.println(p);
					p.netSalary();
				}
				else
				{
					System.out.println("Employee Salary can't be negative or 0");
				}
			}
		}
		else
		{
			System.out.println("Invalid employee id");
		}
		
		System.out.println("=====================================================================");
		
		System.out.print("Enter Contract employee Id:");
		employeeId = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter Contract employee Name:");
		employeeName = sc.nextLine();
		System.out.print("Enter Contract employee Salary :");
		employeeSalary = sc.nextDouble();
		System.out.print("Enter contract duration in year:");
		int contractDuration = sc.nextInt();
		ContractEmployee c = new ContractEmployee(employeeId, employeeName, employeeSalary,contractDuration);
		
		if(employeeId>0)
		{
			if(employeeName.isBlank() || employeeName.isEmpty())
			{
				System.out.println("Employee name cant't be null");
			}
			else
			{
				if(employeeSalary>0)
				{
					if(contractDuration>0)
					{
						System.out.println(c);
					}
					else
					{
						System.out.println("Contract Duration not 0 or negative");
					}
				}
				else
				{
					System.out.println("Employee Salary can't be negative or 0");
				}
			}
		}
		else
		{
			System.out.println("Invalid employee id");
		}
		
		

	}

}


MCQ Assignment :
================
Q1) Find the output :

class Parent
{
    public void show()
    {
      System.out.println("Parent");
    }
}
class Child extends Parent
{
    public void show()
    {
       System.out.println("Child");
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Child obj = new Child();
        obj.show();
    }
}
Output:
Child
=================================================================
Q2) Find the output of the Program

class Parent
{
   protected int num = 100;
}
class Child extends Parent
{
    protected int num = 200;
}
public class Test
{
   public static void main(String[] args)
   {
        Child obj = new Child();
        System.out.println(obj.num);
    }
}

output:
200
=================================================================
Q3)

If class B extends class A, what can class B access from class A?
a) Only public members
b) public and protected members
c) private members
d) All members regardless of access modifiers

output:
B
=================================================================
Q4) Find the output of the Program

class A
{
    A()
    {
        System.out.println("Class A Constructor");
    }
}
class B extends A
{
    B()
    {
        System.out.println("Class B Constructor");
    }
}
public class Test
{
    public static void main(String[] args)
    {
        B obj = new B();
    }
}

output:
Class A  Constructor
Class B Constructor
=================================================================

Q5) Find the output of the Program

class A
{
    A(int x)
    {
        System.out.println("Class A: " + x);
    }
}
class B extends A
{
    B()
    {
        super(10);
        System.out.println("Class B");
    }
}
public class Test
{
    public static void main(String[] args)
    {
        B obj = new B();
    }
}

output:
Class A:10
Class B
=================================================================

Q6) Find the output of the Program

class Parent
{
    Parent()
    {
        System.out.println("Parent Constructor");
    }
}
class Child extends Parent
{
    Child()
    {
        this(10);
        System.out.println("Child Constructor");
    }
    Child(int x)
    {
        super();
        System.out.println("Child Constructor with x: " + x);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Child obj = new Child();
    }
}

output:
Parent Constructor
Child Constructor with x:10
Child Constructor
=================================================================

Q7) Which of the following is NOT true about constructor chaining?

a) A constructor can call another constructor of the same class using this()
b) A constructor can call a superclass constructor using super()
c) this() and super() can be used together in the same constructor
d) Constructor chaining helps in code reusability

output:
c
=================================================================
Q8) Which of the following is true about super() and this()?
a) Both must be the first statement in a constructor
b) Both can be used together in a constructor
c) this() calls the constructor of the same class, and super() calls the superclass constructor
d) Both can be used outside constructors

output:
a
=================================================================
Q9) Find the output of the following code
class Parent
{
    {
    System.out.println("Parent Non-Static Block");
    }
}

class Child extends Parent
{
    {
    System.out.println("Child Non-Static Block");
    }
}

public class Test
{
    public static void main(String[] args)
    {
        Child obj = new Child();
    }
}

output:
Child Non-Static Block
Parent Non-Static Block
=================================================================

Q10)


class Alpha
{
    {
    System.out.println("Block 1");
    }
    {
    System.out.println("Block 2");
    }
   
    Alpha()
    {
        System.out.println("Alpha Constructor");
    }
}

class Beta extends Alpha
{
    {
    System.out.println("Block 11");
    }
    {
    System.out.println("Block 22");
    }
   
    Beta()
    {
        System.out.println("Beta 

Constructor");
    }
}

public class Test
{
    public static void main(String[] args) {
        new Beta();
    }
}

output:
Block 11
Block 22
Block 1
Block 2
Alpha Constructor
Beta Constructor
===========================================================================================================================================================================
10-03-25
*******
Inheritance Lab Programs
Duration: 2 Hours

MCQs
----
Q1) Find the output of the following code
class Grandparent
{
public void print()
{
System.out.println("Grandparent");
}
}
class Parent extends Grandparent
{
public void print()
{
System.out.println("Parent");
}
}
class Child extends Parent
{
public void Print()
{
super.super.print();

System.out.println("Child");
}
}
public class Test
{
public static void main(String[] args) {
Child c = new Child();
c.Print();
}
}

Output:
----------
Compilation Error
=================================================================
Q2)
What is a blank final variable in Java?
A) A non static final variable with user initialized value.
B) A non static final variable that is not initialized at declaration but must be initialized till
constructor body.
C) A final variable that can be modified inside a method.
D) A static final variable.

Output:
----------
B
=================================================================
Q3) What happens if a blank final field is not initialized in all constructors?
A) The program runs normally
B) It is initialized with a default value
C) A compile-time error occurs
D) It is initialized when accessed for the first time

Output:
----------
C
=================================================================
Q4) Find the Output of the following code
class A
{
final int num;
A()
{
num = 100;
}

}
class B extends A
{
B()
{
num = 200;
System.out.println(num);
}
}
public class Test
{
public static void main(String[] args) {
new B();
}
}

Output:
----------
Compilation Error

=================================================================
Q5) Find the output of the Program
class Parent
{
final int x;
Parent()
{
x = 10;
}
}
class Child extends Parent {
Child()
{
System.out.println(x);
}
public static void main(String[] args)
{
new Child();
}
}

Output:
----------
10
=================================================================
Q6) Find the output of this program
class Vehicle
{
protected String name;
public Vehicle(String name)
{
super();
this.name = name;
}
public String printVehicleName()
{
return "Vehicle is Running";
}
}
class Car extends Vehicle
{
public Car(String name)
{
super(name);
}
public String printVehicleName()
{
return "Car is Running";
}
}

public class Test
{
public static void main(String[] args)
{
Car c1 = new Car("Naxon");
String name = c1.printVehicleName();
System.out.println(name);
}

}

Output:
----------
Car is Running
=================================================================
Q7) Find the output of this program [Help u to know method calling]
class Base
{
int value=0;
public Base()
{
addValue();
}
void addValue()
{
value += 10;
}
int getValue()
{
return value;
}
}
class Derived extends Base
{
public Derived()
{
addValue();
}
void addValue()
{
super.addValue();
value += 30;
}
}
public class Test5
{
public static void main(String[] args)
{
Derived b = new Derived();
System.out.println(b.getValue());
}

}

Output:
----------
80
=================================================================
Q8) Find the output
class Foo
{
public int a = 3;
public void addFive()
{
a += 5; System.out.print("f "); }
}
class Bar extends Foo
{
public int a = 8;
public void addFive() { this.a += 5; System.out.print("b " ); }
}
class Test
{
public static void main(String[] args)
{
Foo f = new Foo();
f.addFive();
System.out.println(f.a);
System.out.println("............");
Bar b = new Bar();
b.addFive();
System.out.println(b.a);
}
}

Output:
----------
f	8
--------------
b	13
=================================================================
Q9) Find the Output
class Grandparent
{
String name = "grandparent";
void act()
{
System.out.println(name);

}
}
class Parent extends Grandparent
{
String name = "parent";
}
class Child extends Parent
{
String name = "child";
}
public class Test
{
public static void main(String[] args)
{
Child yo = new Child();
yo.act();
}
}

Output:
----------
grandparent
=================================================================
Q10) Find the Output
class Grandparent
{
String name = "grandparent";
void act()
{
System.out.println(name);
}
}
class Parent extends Grandparent
{
String name = "parent";
void act()
{

System.out.println(name);
}
}
class Child extends Parent
{
String name = "child";
}
public class Test
{
public static void main(String[] args)
{
Child yo = new Child();
yo.act();
}
}

Output:
----------
Parent
=================================================================
------------------------------------------------------------------------
Que 4 : A Hierarchical Model of Animals
========================================
Scenario Description:
In a virtual zoo management system, you need to organize and categorize various types of
animals to efficiently manage their characteristics and behaviors.
To achieve this, you decide to implement a class hierarchy using multilevel inheritance.

1. Create the Animal Class
Requirements:
Define a private String attribute named name.
Implement a parameterized constructor to initialize name.
Implement getter and setter methods for name.

2. Create the Mammal Class
Requirements:
Extend the Animal class.
Add a private boolean attribute named hasFur.
Implement a parameterized constructor to initialize name (from Animal) and hasFur.

Implement getter and setter methods for hasFur.

3. Create the Dog Class
Requirements:
Extend the Mammal class.
Add a private String attribute named breed.
Implement a parameterized constructor to initialize name, hasFur (from Mammal), and
breed.
Implement getter and setter methods for breed.
Generate toString() method to display all the Animal Details.
4. Create the Main Class
Requirements:
Create an instance of the Dog class.
Display details of the Dog object to demonstrate inheritance.

Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".

TEST CASE 1 :
-------------
sample input : When your reading numeric values for any above Classe then make sure if
any numeric value is <=0 then print "Error Invalid Input".
sample output : Error Invalid Input

TEST CASE 2 :
-------------
sample input : Dog myDog = new Dog("Buddy", true, "Golden Retriever");
sample output :
Dog Details:
Animal Name: Buddy
Has Fur: True
Breed: Golden Retriever

Code:
-------
//Main.java

package com.Nit.OOPs_Task_15_1;

public class Main
{
	public static void main(String[] args)
	{
		Dog d = new Dog("Buddy",true,"Golden Retreiver");
		System.out.println(d);
		
	}
}

class Animal {

	private String name;

	public Animal(String name) {
		super();
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
}

class Mammal extends Animal
{
	private boolean hasFur;

	public Mammal(String name, boolean hasFur) {
		super(name);
		this.hasFur = hasFur;
	}

	public boolean isHasFur() {
		return hasFur;
	}

	public void setHasFur(boolean hasFur) {
		this.hasFur = hasFur;
	}
	
}

class Dog extends Mammal
{
	private String breed;

	public Dog(String name, boolean hasFur, String breed) {
		super(name, hasFur);
		this.breed = breed;
	}

	public String getBreed() {
		return breed;
	}

	public void setBreed(String breed) {
		this.breed = breed;
	}

	@Override
	public String toString() {
		return "Animal Name:"+getName()+"\nHas Fur:"+isHasFur()+"\nBreed:"+breed;
	}
	
}

=================================================================
11-02-25
*******
Inheritance & JVM Architecture Lab Programs

Duration: 2 Hours

MCQs
----
Q1) What is the main responsibility of the ClassLoader in JVM?
a) Executing bytecode
b) Loading class files into memory
c) Managing garbage collection
d) Compiling Java code to bytecode
Ans:
------
B
=================================================================
Q2) The Java Heap Memory is used for storing:
a) Primitive local variables
b) Objects and instance variables
c) Method calls
d) Class definitions
Ans:
------
B
=================================================================
Q3) Which part of the JVM executes Java bytecode?
a) Just-In-Time (JIT) Compiler
b) Java Virtual Machine (JVM) Interpreter
c) Java Development Kit (JDK)
d) Java Runtime Environment (JRE)
Ans:
------
B
=================================================================
Q4) What is the purpose of the Just-In-Time (JIT) compiler in JVM?
a) Convert Java source code into bytecode
b) Interpret bytecode one instruction at a time
c) Convert bytecode into native machine code at runtime
d) Load Java classes into memory
Ans:
------
C
=================================================================
Q5) Which of the following is the highest-level class loader in the JVM hierarchy?
a) System ClassLoader
b) Bootstrap ClassLoader
c) Extension ClassLoader
d) Custom ClassLoader
Ans:
------
B
=================================================================
Q6) Which of the following class loaders loads classes from CLASSPATH?
a) Bootstrap ClassLoader
b) Extension ClassLoader
c) System (Application) ClassLoader
d) Native Method ClassLoader
Ans:
------
C
=================================================================
Q7) What is the output of the following code?
public class Test
{
public static void main(String[] args)
{
System.out.println(String.class.getClassLoader());
}
}
a) null
b) Bootstrap ClassLoader
c) AppClassLoader
d) Exception at runtime
Ans:
------
A
=================================================================
Q8) What is the output of the following code?
public class Test
{
public static void main(String[] args)
{
System.out.println(Test.class.getClassLoader());
}
}
a) null
b) Bootstrap ClassLoader
c) AppClassLoader
d) PlatformClassLoader
Ans:
------
C
=================================================================
Q9) What is the output of the following code?
public class Test
{
public static void main(String[] args)
{
System.out.println(Test.class.getClassLoader().getParent());
}
}
a) null
b) Bootstrap ClassLoader
c) AppClassLoader
d) PlatformClassLoader
Ans:
------
D
=================================================================
Q10) What is the output of the following code?
public class Test
{
public static void main(String[] args) throws ClassNotFoundException {
ClassLoader cl = ClassLoader.getSystemClassLoader();
Class cls = cl.loadClass("java.lang.String");
System.out.println(cls.getClassLoader());
}
}
a) null
b) Bootstrap ClassLoader
c) Exception at runtime
d) System ClassLoader
Ans:
------
A
=================================================================
------------------------------------------------------------------------
Que 5 : Ticket Management System with VIP and Student Tickets
=============================================================
You have been hired by an event management company to develop a ticketing system that can manage different types of tickets for various events.
The system needs to handle regular tickets, VIP tickets with special access privileges, and
student tickets that may have a discount.
Your task is to create a Java program with the following requirements:
Design a Ticket class with attributes like event name, seat number, and price.

1.Create a class Ticket
------------------------
Instance variable:-
String eventName,private
int seatNumber,private
double price,private
Create a parameterized constructor for all Instance variable to initialize the variable.
Generate Getters and setters for all Instance variable to get values and set values.

2.Create another class VIPTicket and inherit Ticket class here.
---------------------------------------------------------------
Instance variable:-
String specialAccess,private
Create a parameterized constructor for Instance variable to initialize the variable.
//Use super keyword to initialize Ticket class constructor attributes.
Generate Getters and setters for Instance variable to get values and set values.

3.Create another class StudentTicket and inherit Ticket class here.
-------------------------------------------------------------------
Instance variable:-
boolean studentDiscount,private
Create a parameterized constructor for Instance variable to initialize the variable.

//Use super keyword to initialize Ticket class constructor attributes.
Generate Getters and setters for Instance variable to get values and set values.
Create a class MainTicket which contains main method to demonstrate the usage.
//Creating a Ticket object using the parameterized constructor
//Creating a VIPTicket object using the parameterized constructor
//Creating a StudentTicket object using the parameterized constructor

Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".

TEST CASE 1 :
-------------
sample input : When your reading values for Ticket class OR VIPTicket OR
StudentTicket then make sure if any numeric value is <=0 then print "Error Invalid
Input".
sample output : Error Invalid Input

TEST CASE 2 :
-------------
sample input :
VIPTicket vipTicket = new VIPTicket("VIP Concert", 201, 100.0, "Backstage
Access");
StudentTicket studentTicket = new StudentTicket("Student Event", 301, 30.0,
true);
sample output :
VIP Ticket:
Event: VIP Concert

Seat Number: 201
Price: $100.0
Special Access: Backstage Access
Student Ticket:
Event: Student Event
Seat Number: 301
Price: $30.0
Student Discount: true

Code:
--------
//MainTicket.java

package com.Nit.OOPs_Task_16_1;

import java.util.Scanner;
public class MainTicket {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
       System.out.println("Enter your option: ");
        int option=Integer.parseInt(sc.nextLine());
        if(option==1)
        {
        	System.out.println("Enter Event Name: ");
           String type=sc.nextLine();
           System.out.println("Enter Seat Number: ");
            int seatNo=Integer.parseInt(sc.next());
            System.out.println("Enter Price: ");
            double price=Double.parseDouble(sc.next());
            System.out.println("Enter Discount is true/false: ");
            boolean b=sc.nextBoolean();
                   

    StudentTicket studentTicket = new StudentTicket(type, seatNo, price, b);
    if(seatNo>0 && price>0)
    {
        System.out.println("\nStudent Ticket:");
        System.out.println(studentTicket);
    }
    else{
        System.out.println("Error Invalid Input");
    }
     

        }
        else if(option==2)
        {
             System.out.println("Enter Event Name: ");
            String type=sc.nextLine();
            System.out.println("Enter Seat Number: ");
            int seatNo=Integer.parseInt(sc.nextLine());
            System.out.println("Enter price: ");
            double price=Double.parseDouble(sc.nextLine());
            System.out.println("Enter Special Access: ");
            String Access=sc.next();
            VIPTicket vipTicket = new VIPTicket(type, seatNo, price,Access);
            if(seatNo>0 && price>0)
    {
        System.out.println("VIP Ticket:");
            System.out.println(vipTicket);
    }
    else{
        System.out.println("Error Invalid Input");
    }
            
        }
        else
        {
            System.out.println("invalid Ticket Type");
        }
        sc.close();
    }
}

class Ticket
{
    private String eventName;
    private int seatNumber;
    private double price;

    public Ticket(String eventName,int seatNumber,double price)
    {
        this.eventName = eventName;
        this.seatNumber = seatNumber;
        this.price = price;
    }

	public String getEventName() {
		return eventName;
	}

	public void setEventName(String eventName) {
		this.eventName = eventName;
	}

	public int getSeatNumber() {
		return seatNumber;
	}

	public void setSeatNumber(int seatNumber) {
		this.seatNumber = seatNumber;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}
	
	
    
}

class VIPTicket extends Ticket
{
    private String specialAccess;

    public VIPTicket(String eventName,int seatNumber,double price,String specialAccess)
    {
        super(eventName,seatNumber,price);
        this.specialAccess = specialAccess;
    }

	public String getSpecialAccess() {
		return specialAccess;
	}

	public void setSpecialAccess(String specialAccess) {
		this.specialAccess = specialAccess;
	}

	@Override
	public String toString() {
		return "Event: " + getEventName() + "\nSeat Number: " + getSeatNumber() + "\nPrice: $"
				+ getPrice() + "\nSpecial Access: " + specialAccess ;
	}

    

}

class StudentTicket extends Ticket
{
    private boolean studentDiscount;

    public StudentTicket(String eventName,int seatNumber,double price,boolean studentDiscount)
    {
        super(eventName,seatNumber,price);
        this.studentDiscount = studentDiscount;
    }
    
    public boolean getStudentDiscount()
    {
        return studentDiscount;
    }
    public void setStudentDiscount(boolean studentDiscount)
    {
        this.studentDiscount = studentDiscount;
    }

	@Override
	public String toString() {
		return "Event: " + getEventName() + "\nSeat Number: " + getSeatNumber() + "\nPrice: $"
				+ getPrice() + "\nStudent Discount: " + studentDiscount ;
	}
    
}

===========================================================================================================================================================================
12-03-25
*******
MCQs : 
------- 
Q1) Find the Output : 
public class Test  
{ 
 static  
 { 
 System.out.println("Static Block Executed"); 
 } 
 public static void main(String[] args)  
 { 
 System.out.println("Main Method Executed"); 
 } 
} 

Output:
---------
Static Block Executed
Main Method Executed
------------------------------------------------------------------------------------------------------------------------
Q2) Find the Output : 
class A  
{ 
 static  
 {
 System.out.println("Class A Static Block");  } 
} 
class B extends A  
{ 
 static  
 { 
 System.out.println("Class B Static Block");  
} 
} 
public class Main  
{ 
 public static void main(String[] args) 
 { 
 B obj = new B(); 
 System.out.println("Main Method"); 
 } 
} 

Output:
---------
Class A Static Block
Class B Static Block
Main Method
------------------------------------------------------------------------------------------------------------------------

Q3) Find the Output : 
public class Test 
{ 
 static  
 { 
 System.out.println("Static Block Executed");
 System.exit(0); 
 } 
} 

Output:
--------
Error. Because there is no main method to execute 
------------------------------------------------------------------------------------------------------------------------

Q4) Find the Output : 
class Demo  
{ 
{ 
System.out.println("Non Static Block in Demo"); 
}
 public Demo()  
{ 
 System.out.println("Constructor of Demo"); 
 } 
static  
{ 
 System.out.println("Static Block in Demo");
  } 
} 
public class Test  
{ 
 public static void main(String[] args)  {  
 Demo d1 = new Demo(); 
 Demo d2 = new Demo(); 
 } 
} 

Output:
---------
Static Block is Demo
Non Static Block in Demo
Constructor of Demo
Non Static Block in Demo
Constructor of Demo
------------------------------------------------------------------------------------------------------------------------

Q5) Find the Output : 
class X  
{ 
 static  
{ 
 System.out.println("Class X Static Block");  } 
} 
class Y extends X 
{ 
 static 
{ 
 System.out.println("Class Y Static Block");  } 
} 
public class Test  
{
 public static void main(String[] args)  { 
 X obj1 = new X(); 
 Y obj2 = new Y(); 
 Y obj3 = new Y(); 
 } 
} 

Output:
---------
Class X Static Block
Class Y Static Block
------------------------------------------------------------------------------------------------------------------------

Q6) Find the Output : 
class Test 
{ 
 static  
 { 
 System.out.println("Static Block Executed"); 
 } 
 static void display() 
 { 
 System.out.println("Static Method Executed"); 
 } 
 public static void main(String[] args)  { 
 System.out.println("Main Method Started");  
display(); 
 } 
} 

Output:
---------
Static Block Executed
Main Method Started
Static Method Executed

------------------------------------------------------------------------------------------------------------------------

Q7) Find the Output : 
class Demo 
{ 
 public static final int VALUE; 
 public static void access()  
 { 
 VALUE = 50; 
 System.out.println("Value is :" + VALUE); 
 }
} 
class Test  
{ 
public static void main(String[] args) 
{ 
 Demo.access(); 
 } 
} 

Output:
---------
ERROR!
/tmp/Y2yAGbk8oK/Main.java:6: error: cannot assign a value to static final variable VALUE
------------------------------------------------------------------------------------------------------------------------

Q8) Find the Output : 
class Demo 
{ 
 public static final int VALUE; 
 static  
 { 
 VALUE = 50; 
 System.out.println("Value is : " + VALUE); 
 } 
} 
class Test  
{ 
public static void main(String[] args) 
{ 
 System.out.println("Main Method VALUE = " + Demo.VALUE);  } 
} 

Output:
---------
Value is : 50
ERROR!
error: can't find main(String[]) method in class: Demo
------------------------------------------------------------------------------------------------------------------------

Q9) Find the Output : 
class Singleton  
{ 
 private static Singleton instance; 
 static  
{ 
 instance = new Singleton(); 
 System.out.println("Static Block: Singleton Instance Created");
 } 
 private Singleton()  
{ 
 System.out.println("Constructor: Singleton Object Created");  
} 
 public static Singleton getInstance()  
{ 
 return instance; 
 } 
public void greet() 
{ 
System.out.println("Hello Everyone!!!"); 
} 
} 
public class Test 
{ 
 public static void main(String[] args)  
{ 
 System.out.println("Main Method"); 
 Singleton obj1 = Singleton.getInstance(); 
obj1.greet();  
 } 
} 

Output:
---------
Main Method
Constructor: Singleton Object Created
Static Block: Singleton Instance Created
Hello Everyone!!!
------------------------------------------------------------------------------------------------------------------------

Q10) Find the Output : 
class Foo 
{ 
Foo() 
{ 
System.out.println("No Argument constructor.."); } 
{ 
System.out.println("Instance block.."); 
}
static 
{ 
System.out.println("Static block..."); 
} 
} 
public class Test  
{ 
public static void main(String [] args)  
{ 
System.out.println("Main Method Executed "); 
} 
} 

Output:
---------
Main Method Executed 
------------------------------------------------------------------------------------------------------------------------

Q11) Find the Output : 
class Alpha  
{ 
static  
{ 
System.out.println("A"); 
} 
{ 
System.out.println("B"); 
} 
Alpha()  
{ 
System.out.println("C"); 
} 
} 
class Beta extends Alpha 
{ 
static  
{ 
System.out.println("D"); 
}
{ 
System.out.println("E"); 
} 
Beta()  
{ 
System.out.println("F"); 
} 
} 
public class Test  
{ 
public static void main(String[] args)  { 
new Beta();  
} 
}

Output:
---------
A
D
B
C
E
F
------------------------------------------------------------------------------------------------------------------------
 
Q12) Find the Output : 
class Demo  
{ 
 static 
{  
i = 100; 
} 
 static int i; 
} 
public class Test 
{ 
 public static void main(String[] args)  { 
 System.out.println(Demo.i); 
} 
}

Output:
---------
100
------------------------------------------------------------------------------------------------------------------------
 
Q13) Find the Output :
class Demo  
{ 
 static 
{  
i = 100; 
System.out.println(i); 
} 
 static int i; 
} 
public class Test 
{ 
 public static void main(String[] args)  { 
 System.out.println(Demo.i); } 
} 

Output:
---------
in static block:
Error: Main.java:6: error: illegal forward reference
System.out.println(i); 
in main method:
0
------------------------------------------------------------------------------------------------------------------------

Q14) Find the Output : 
class Demo  
{  
{  
i = 100; 
System.out.println(i); 
} 
 int i; 
} 
public class Test 
{ 
 public static void main(String[] args)  { 
 new Demo(); 
} 
}

Output:
---------
Error: illegal forward reference
------------------------------------------------------------------------------------------------------------------------

Q15) Find the Output : 
class Alpha  
{ 
 public static final int A; 
 static 
 { 
 print(); 
A = 100; 
 } 
 public static void print() 
 { 
 System.out.println("Default value :"+A); 
 } 
} 
public class Test  
{ 
public static void main(String[] args)  
{ 
System.out.println("User value :"+Alpha.A); } 
} 

Output:
---------
Default value :0
User value :100
------------------------------------------------------------------------------------------------------------------------

Q16) Find the Output : 
class Test 
{ 
public static final Test t1 = new Test(); //t1 = null; 
 static 
{ 
 System.out.println("static block"); 
} 
{ 
 System.out.println("Non static block"); 
}
Test() 	
{ 
System.out.println("No Argument Constructor"); } 
} 
public class Demo  
{ 
public static void main(String[] args)  
{ 
 new Test();  
} 
} 

Output:
---------
Non static block
no argument constructor
static block
non static block
no argument constructor
------------------------------------------------------------------------------------------------------------------------

Q17) Find the Output : 
class Sample 
{ 
static  
{ 
System.out.println("Static Block"); 
x = m1(); 
System.out.println(Sample.x); 
} 
public static int m1() 
{ 
 System.out.println("Static Method"); 
 return 100; 
} 
static int x;  
} 
public class Test  
{ 
public static void main(String[] args) 
{ 
System.out.println(Sample.x); 
} 
} 

Output:
---------
Static Block
Static Method
100
100
------------------------------------------------------------------------------------------------------------------------

Q18) Find the Output : 
class Alpha  
{ 
 public static void print() 
 { 
 x = 100; 
 System.out.println(x); 
 } 
 static int x; 
} 
public class Test  
{ 
public static void main(String[] args)  { 
Alpha.print(); 
} 
} 

Output:
---------
100
------------------------------------------------------------------------------------------------------------------------

Q19) Find the Output : 
class Alpha  
{ 
 public static final int MAX_VALUE = 100; 
 static 
{ 
 System.out.println("Static Block"); } 
} 
public class Test  
{ 
public static void main(String[] args) 
{ 
System.out.println(Alpha.MAX_VALUE); } 
} 

Output:
---------
100
------------------------------------------------------------------------------------------------------------------------

Q20) Find the Output 
class Alpha  
{ 
 public static final int MAX_VALUE = access(); 
 static 
{ 
 System.out.println("Static Block"); 
} 
 public static int access() 
{ 
return 100; 
} 
} 
public class Test  
{ 
public static void main(String[] args)  
{ 
System.out.println(Alpha.MAX_VALUE); } 
}

Output:
---------
Static Block
100
------------------------------------------------------------------------------------------------------------------------
===========================================================================================================================================================================
13-03-25
*******
Static and Non-Static Block
Duration: 2 Hours

MCQs
----
Que-1) : What is the output of below program ?
class Example19
{

static
{
int x = 10;
Example19.x = x+x;
}
static int x;
public static void main(String[] args)
{
System.out.println("Class Level X : "+Example19.x);
}
static
{
x = x + Example19.x;
}

}
Output:
----------
40
------------------------------------------------------------------------------------------------------------------------
Que-2) : What is the output of below program ?
class Example20
{
static int a;
public static void main(String[] args)
{
System.out.println(Example20.a);
Example20.a = Example20.initialize();
System.out.println(Example20.a);
}
static int initialize()
{
Example20.a = 50;
return 60;
}
}
Output:
----------
0
60
------------------------------------------------------------------------------------------------------------------------
Que-3) : What is the output of below program ?
package com.ravi.basic;
class Example21
{
static int x = Example21.m1();
public static void main(String[] args)
{
System.out.println(Example21.x);
}
static int m1()
{

x = 10;
return Example21.m2();
}
static int m2()
{
System.out.println(Example21.x);
return 20;
}
}
Output:
----------
10
20
------------------------------------------------------------------------------------------------------------------------
Que-4) : What is the output of below program ?
class Example22
{
static int x = 10;
public static void main(String[] args)
{
System.out.println(Example22.m1()+ x);
}
static int m1()
{
x = x + 100;
return x;
}
}
Output:
----------
220
------------------------------------------------------------------------------------------------------------------------
Que-5) : What is the output of below program ?
class Example23
{
static int x = m1();
public static void main(String[] args)
{
System.out.println(x);	//120

}
static
{
System.out.println(x);	/100
x = x + 20;
}
static int m1()
{
x = 50;
return m2();
}
static int m2()
{
System.out.println(x);	//50
return 100;
}
}
Output:
----------
50
100
120
------------------------------------------------------------------------------------------------------------------------
Que-6) : What is the output of below program ?
class Example24
{
static
{
a = m1();
}
static int a = 80;
public static void main(String[] args)
{
System.out.println(a);	
}
static
{
a = a + m1();

}
static int m1()
{
a = 30;
return m2();
}
static int m2()
{
System.out.println(a);	
return a + 20;
}
}
Output:
----------
30
30
130
------------------------------------------------------------------------------------------------------------------------
Que-7) : What is the output of below program ?
class Example25
{
static int a = 50;
public static void main(String[] args)
{
int a = 60;
a = a;
System.out.println(a);
System.out.println(Example25.a);
}
}
Output:
----------
60
50
------------------------------------------------------------------------------------------------------------------------
Que-8) : What is the output of below program ?
class Test50
{
public static void main(String[] args)
{
int x = 20;
System.out.println(x);
}
static

{
int x = 10;
System.out.print(x + " ");
}
}
Output:
----------
10 20
------------------------------------------------------------------------------------------------------------------------
Que-9) : What is the output of below program ?
class Test51
{
int x = 10;
public static void main(String[] args)
{
System.out.println(x);
}
static
{
System.out.print(x + " ");
}
}
Output:
----------
Error: non-static variable x cannot be referenced from a static context
------------------------------------------------------------------------------------------------------------------------
Que-10) : What is the output of below program ?
class Test52
{
int x = 10;
public static void main(String[] args)
{
Test52 t1 = new Test52();
System.out.println(t1.x);
}
static
{
int x = 20;
System.out.print(x + " ");
}
}
Output:
----------
20 10
------------------------------------------------------------------------------------------------------------------------
Que-11) : What is the output of below program ?

class Test53
{
int x = 10;
public static void main(String[] args)
{
System.out.println(x);
}
static
{
Test53 t = new Test53();
System.out.print(t.x + " ");
}
}
Output:
----------
Error: non-static variable x cannot be referenced from a static context
------------------------------------------------------------------------------------------------------------------------
Que-12) : What is the output of below program ?
public class Test54
{
int x = 10;
public static void main(String[] args)
{
Test54 obj = passObject(null);
System.out.println(obj.x);
}
static
{
Test54 t = new Test54();
System.out.print(t.x + " ");
passObject(t);
}
public static Test54 passObject(Test54 t1)
{
return t1;
}
}
Output:
----------
10
Error : Null pointer Exception Handling
------------------------------------------------------------------------------------------------------------------------

Que-13) : What is the output of below program ?
public class Example2
{
int value = 50;
public static void main(String[] args)
{
Example2 obj = getInstance();
System.out.println(obj.value);
}
public static Example2 getInstance()	//Factory Method
{
return new Example2();
}
}
Output:
----------
50
------------------------------------------------------------------------------------------------------------------------
Que-14) : What is the output of below program ?
public class Example2
{
static
{
x = m1();
System.out.println(Example2.x);	//60
}
static int x = 100;
static int m1()
{
System.out.println(x);	//100
x = 40;
return x + 20;
}
public static void main(String[] args)
{

System.out.println(x);	//0
}
}
Output:
----------
0
60
100
------------------------------------------------------------------------------------------------------------------------
Que-15) : What is the output of below program ?
public class Example3
{
static int a = m1();
static int m1()
{
System.out.println("m1 called");
return 30;
}
static
{
System.out.println("Static block executed");
a += 20;
}
public static void main(String[] args)
{
System.out.println("Final value of a: " + a);	//50
}
}
Output:
----------
m1 called
Static block executed
Final value of a : 50
------------------------------------------------------------------------------------------------------------------------
Que-16) : What is the output of below program ?
public class Example4
{
static int x = 10;
static
{
System.out.println("Static Block 1: " + x);	//10
x = m1();

}
static
{
System.out.println("Static Block 2: " + x);	//20
x += 5;
}
static int m1()
{
System.out.println("m1 executed");
return 20;
}
public static void main(String[] args)
{
System.out.println("Main: x = " + x);	//25
}
}
Output:
-----------
Static block 1: 10
m1 executed
Static Block 2: 20
Main: X = 25
------------------------------------------------------------------------
Que-17) : What is the output of below program ?
package com.ravi.basic;
class ClassA
{
static int a = 5;
static
{
System.out.println("Static Block :"+a);		//5
a = 10;
}
}
public class Example5
{
static
{

System.out.println("Example5 Static Block");
}
public static void main(String[] args)
{
System.out.println("Main Method");
System.out.println("Class A a :" + ClassA.a);	//10
}
}
Output:
----------
Example5 Static Block
Main Method
Static Block :5
Class A a :10
------------------------------------------------------------------------------------------------------------------------
Que-18) : What is the output of below program ?
public class Test
{
static
{
System.out.println("Static Block");
}
{
System.out.println("Instance Block");
}
Test()
{
System.out.println("Constructor");
}
public static void main(String[] args)
{
System.out.println("Main Method");
Test obj1 = new Test();
Test obj2 = new Test();
}
}

Output:
----------
Static Block
Main Method
Instance Block
Constructor
Instance Block
Constructor
------------------------------------------------------------------------------------------------------------------------
Que-19) : What is the output of below program ?

public class Example
{
{
System.out.println("Instance Block");
}
static
{
System.out.println("Static Block");
}
public static void show()
{
System.out.println("Static Method");
display();
}
public void display()
{
System.out.println("Instance Method");
}
public static void main(String[] args)
{
show();
}
}
Output:
----------
Error: non-static method display() cannot be referenced from a static context
------------------------------------------------------------------------------------------------------------------------

Que-20) : What is the output of below program ?
package com.ravi.basic;
public class Test
{
static int x = 10;
{
x = 50;

}
static
{
x = 30;
}
public static void main(String[] args)
{
System.out.println("Before Object Creation: " + x);	//30
Test obj1 = new Test();
System.out.println("After Object Creation: " + x);		//50
}
}
Output:
----------
Before Object Creation: 30
After Object Creation: 50
------------------------------------------------------------------------------------------------------------------------
===================================================================================
14-03-25
********
Assignment (14-MAR-25)

Q1. What does HAS-A relationship in Java signify?
A) Inheritance
B) Encapsulation
C) Composition or Aggregation
D) Polymorphism

Answer: C) Composition or Aggregation
-----------------------------------------------------------------------------------
Q2. Which of the following statements about HAS-A relationship is correct?
A) It is implemented using inheritance (extends keyword).
B) It is implemented using object references.
C) It is only possible with primitive data types.
D) It requires overriding methods from the parent class.

Answer: B) It is implemented using object references.
-----------------------------------------------------------------------------------
Q3. How can we establish a HAS-A relationship in Java?
A) Using implements keyword
B) Using extends keyword
C) By creating an object of one class inside another class
D) By using super keyword

Answer: C) By creating an object of one class inside another class

-----------------------------------------------------------------------------------
Q4. How can we establish a HAS-A relationship in Java?
A) Using implements keyword
B) Using extends keyword
C) By creating an object of one class inside another class
D) By using super keyword

Answer: C) By creating an object of one class inside another class
-----------------------------------------------------------------------------------
Q5. What is the difference between composition and aggregation in HAS-A relationship?
A) Composition has a weaker association than aggregation.
B) Aggregation represents a strong dependency, while composition does not.
C) Composition means the contained object cannot exist independently, while aggregation allows independent existence.
D) Both are the same concept with no difference.

Answer: C) Composition means the contained object cannot exist independently, while aggregation allows independent existence.
-----------------------------------------------------------------------------------
Q6.  

class Engine
{
    void start()
    {
        System.out.println("Engine started");
    }
}

class Car
{
   Engine engine = new Engine();
   
    void startCar()
    {
        engine.start();
        System.out.println("Car started");
    }
}
public class Test
{
    public static void main(String[] args)
    {
        Car car = new Car();
        car.startCar();
    }
}

What type of HAS-A relationship does the Car class have with Engine?

A) Aggregation
B) Composition
C) Inheritance
D) Polymorphism

Answer: B) Composition (since Engine is tightly coupled with Car and cannot exist independently)

-----------------------------------------------------------------------------------
Q7. Which of the following is an example of aggregation?
A) A Person class containing an Address object where Address can exist independently.
B) A Car class containing an Engine object where Engine cannot exist without Car.
C) A Dog class extending an Animal class.
D) A Bank class inheriting from a FinancialInstitution class.

Answer: A) A Person class containing an Address object where Address can exist independently.

-----------------------------------------------------------------------------------
Q8. Which of the following is a key benefit of using HAS-A relationship over IS-A relationship?

A) It promotes code reusability without tight coupling.
B) It forces subclasses to override all parent methods.
C) It makes method overriding easier.
D) It restricts the ability to create new classes.

Answer: A) It promotes code reusability without tight coupling.

-----------------------------------------------------------------------------------
Q9. Find the output of the following code.

class Engine
{
    void start()
    {
        System.out.println("Engine started.");
    }
}

class Car
{
    private Engine engine;
   
    Car()
    {
        engine = new Engine(); // Engine is created inside Car
    }

    void startCar()
    {
        engine.start();
        System.out.println("Car started.");
    }
}

public class CompositionExample
{
    public static void main(String[] args)
    {
        Car car = new Car();
        car.startCar();
    }
}
Output:
------
Enine started 
Car started
-----------------------------------------------------------------------------------
Q10) Find the output of the following

class Address
{
    String city, state;

    Address(String city, String state)
    {
        this.city = city;
        this.state = state;
    }

    void displayAddress()
    {
        System.out.println(city + ", " + state);
    }
}

class Student
{
    String name;
    Address address;

    Student(String name, Address address)
    {
        this.name = name;
        this.address = address;
    }

    void displayStudent()
    {
        System.out.println("Student: " + name);
        System.out.print("Address: ");
        address.displayAddress();
    }
}

public class AggregationExample
{
    public static void main(String[] args)
    {
        Address addr = new Address("New York", "USA");
        Student student = new Student("John Doe", addr);
        student.displayStudent();
    }
}
Output:
-------
Student: John Doe
Address: New York, USA

=============================================================
Program: 1
-----------
Create a class Address (Business Logic Class)
Instance Variables:
   private String cityName;
   private String districtName;
   private String stateName;
Create a parameterized constructor initialize the instance variable of the class.

Override toString() from Object class to print Address class properties.

Create a class Employee (Business Logic Class)
Instance Variables:
   private int empId;
   private String empName;
   private Address address; //HAS-A relation
Create a parameterized constructor initialize the instance variable of the class.

Override toString() from Object class to print Employee class properties.

Create a class Main (Executable Logic Class) which contains main method to print Employee class properties using toString() method.

Code:
-----
package com.Nit.OOPs_Task_17_1;

import java.util.*;
public class Main {

	public static void main(String[] args) {
//		Address a1 = new Address("Moosapet", "Hyderabad", "Telangana");
//		Employee e1 = new Employee(101, "Naresh", a1);
//		System.out.println(e1);
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter City Name: ");
		String cityName = sc.nextLine();
		System.out.print("Enter District Name: ");
		String districtName = sc.nextLine();
		System.out.print("Enter State Name: ");
		String stateName = sc.nextLine();
		Address address = new Address(cityName, districtName, stateName);
		System.out.print("Enter Employee ID: ");
		int employeeId = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter Employee Name: ");
		String employeeName = sc.nextLine();
		Employee employee = new Employee(employeeId, employeeName, address);
		System.out.println(employee);

	}

}

class Address
{
	private String cityName;
	private String distictName;
	private String stateName;
	public Address(String cityName, String distictName, String stateName) {
		super();
		this.cityName = cityName;
		this.distictName = distictName;
		this.stateName = stateName;
	}
	@Override
	public String toString() {
		return "cityName=" + cityName + "\ndistictName=" + distictName + "\nstateName=" + stateName ;
	}
	
}
class Employee
{
	private int empId;
	private String empName;
	private Address address;	//Has-A relation
	public Employee(int empId, String empName, Address address) {
		super();
		this.empId = empId;
		this.empName = empName;
		this.address = address;
	}
	@Override
	public String toString() {
		return "Employee\n------------------------ \nempId=" + empId + "\nempName=" + empName + "\nAddress\n*******************\n" + address ;
	}
	
}Program: 2
-----------
Create a class Order (Business Logic Class)
Instance Variables:
   private int orderId;
   private String itemName;
   private double itemPrice;
Create a parameterized constructor initialize the instance variable of the class.
Override toString() from Object class to print Order class properties.

Create a class Customer (Business Logic Class)
Instance Variables:
   private int customerId;
   private String customerName;
   private String customerAddress;
   private Order order; //HAS-A relation
Create a parameterized constructor initialize the instance variable of the class.
Override toString() from Object class to print Customer class properties.

Create a class Zomato (Executable Logic Class) which contains main method to print Customer class properties using toString() method.

//Zomato.java
-------------
package com.Nit.OOPs_Task_17_1;

import java.util.*;
public class Zomato {

	public static void main(String[] args) {
//		Order order1 = new Order(101, "Chiken Biryani", 255);
//		Customer c = new Customer(1, "NARESH", "MOOSAPET", order1);
//		System.out.println(c);
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Order Id: ");
		int oId = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter Item Name: ");
		String iName = sc.nextLine();
		System.out.print("Enter Item Price: ");
		double iPrice = sc.nextDouble();
		Order o = new Order(oId, iName, iPrice);
		System.out.print("Enter Customer ID: ");
		int cId = sc.nextInt();
		sc.nextLine();
		System.out.print("Enter Customer Name: ");
		String cName = sc.nextLine();
		System.out.print("Enter Customer Address: ");
		String cAddr = sc.nextLine();
		Customer c = new Customer(cId, cName, cAddr, o);
		System.out.println(c);

	}

}
class Order
{
	private int orderId;
	private String itemName;
	private double itemPrice;
	public Order(int orderId, String itemName, double itemPrice) {
		super();
		this.orderId = orderId;
		this.itemName = itemName;
		this.itemPrice = itemPrice;
	}
	@Override
	public String toString() {
		return "orderId=" + orderId + "\nitemName=" + itemName + "\nitemPrice=" + itemPrice ;
	}
	
}
class Customer
{
	private int customerId;
	private String customerName;
	private String customerAddress;
	private Order order;	//HAS-A relation
	public Customer(int customerId, String customerName, String customerAddress, Order order) {
		super();
		this.customerId = customerId;
		this.customerName = customerName;
		this.customerAddress = customerAddress;
		this.order = order;
	}
	@Override
	public String toString() {
		return "Customer \n--------------\ncustomerId=" + customerId + "\ncustomerName=" + customerName + "\ncustomerAddress="
				+ customerAddress + "\norder\n---------------\n" + order ;
	}
	
}
=================================================================
17-03-25
********
Que-1) : What is the output of below program ?

class Example19 
{
		static 
		{
			int x = 10;
			Example19.x = x+x;
		}

		static int x;
		
		public static void main(String[] args) 
		{
			System.out.println("Class Level X : "+Example19.x);
		}

		static 
		{
			x = x + Example19.x;
		}
}
Output:
------
Class Level X:40
	
------------------------------------------------------
Que-2) : What is the output of below program ?

class Example20 
{
	static int a;
	
	public static void main(String[] args)
	{
		System.out.println(Example20.a); 
		Example20.a = Example20.initialize();
		System.out.println(Example20.a);
	}

	static int initialize() 
	{
		Example20.a = 50;
		return 60;
	}
	
}

Output:
------
0
60

------------------------------------------------------

Que-3) : What is the output of below program ?

package com.ravi.basic;

class Example21 
{
	static int x = Example21.m1();

	public static void main(String[] args) 
	{
		System.out.println(Example21.x);
	}

	static int m1() 
	{
		x = 10;

		return Example21.m2();
	}

	static int m2() 
	{
		System.out.println(Example21.x); 
		return 20;
	}
}
Output:
------
10
20
------------------------------------------------------
Que-4) : What is the output of below program ?

class Example22
{
	static int x = 10;

	public static void main(String[] args)
	{
		System.out.println(Example22.m1()+ x);
	}

	static int m1()
	{
		x = x + 100;
		return x;
	} 
}
Output:
------
220
	
------------------------------------------------------
Que-5) : What is the output of below program ?

class Example23   
{
	static int x = m1();

	public static void main(String[] args) 
	{
		System.out.println(x);
	}

	static 
	{
		System.out.println(x);
		x = x + 20;
	}

	static int m1() 
	{
		x = 50;
		return m2();		
	} 

	static int m2() 
	{
		System.out.println(x);
		return 100;
	}
}
Output:
------
50
100
120
------------------------------------------------------
Que-6) : What is the output of below program ?

class Example24   
{
	static 
	{
		a = m1();  
	}

	static int a = 80;

	public static void main(String[] args) 
	{
		System.out.println(a);
	}

	static 
	{
		a = a + m1();  
	}

	static int m1() 
	{
		a = 30;
		return m2();
	}

	static int m2() 
	{
		System.out.println(a);
		return a + 20;
	}
}
Output:
------
30
30
130	
------------------------------------------------------
Que-7) : What is the output of below program ?

class Example25 
{
	static int a = 50;

	public static void main(String[] args) 
	{
		int a = 60;
		a = a;
		System.out.println(a);
		System.out.println(Example25.a); 
	}
}
Output:
------
50
60
	
------------------------------------------------------
Que-8) : What is the output of below program ?

class Test50 
{ 
	public static void main(String[] args) 
	{ 
		int x = 20; 
		System.out.println(x); 
	} 
	static
	{ 
		int x = 10; 
		System.out.print(x + " "); 
	} 
}
Output:
------
10	20
------------------------------------
Que-9) : What is the output of below program ?

class Test51 
{ 
	int x = 10; 
	public static void main(String[] args) 
	{ 
	  System.out.println(x); 
	} 
	static
	{ 
	  System.out.print(x + " "); 
	} 
}
Output:
------
Error! non-static variable x cannot be referenced from a static context
-------------------------------------
Que-10) : What is the output of below program ?

class Test52 
{ 
	int x = 10; 
	public static void main(String[] args) 
	{ 
		Test52 t1 = new Test52(); 
		System.out.println(t1.x); 
	} 
	static
	{ 
		int x = 20; 
		System.out.print(x + " "); 
	} 
}
Output:
------
20	10

----------------------------------------------------------------------
Que-11) : What is the output of below program ?

class Test53 
{ 
	int x = 10; 
	public static void main(String[] args) 
	{ 
	  System.out.println(x); 
	} 
	
	static
	{ 
	  Test53 t = new Test53();	
	  System.out.print(t.x + " "); 
	} 
}
Output:
------
Error! non-static variable x cannot be referenced from a static context

-----------------------------------------------------------------------
Que-12) : What is the output of below program ?

public class Test54 
{
	int x = 10; 
	public static void main(String[] args) 
	{ 	 
		Test54 obj = passObject(null);
		System.out.println(obj.x);
	}
	
	static
	{ 
	  Test54 t = new Test54();	
	  System.out.print(t.x + " "); 
	  passObject(t);
	} 
	
	public static Test54 passObject(Test54 t1)
	{
		return t1;
		
	}	
}
Output:
------
10
Error! Exception in thread "main" java.lang.NullPointerException

------------------------------------------------------------------------
Que-13) : What is the output of below program ?

public class Example2
{
    int value = 50;

    public static void main(String[] args) 
    {
        Example2 obj = getInstance();
        System.out.println(obj.value);  
    }

    public static Example2 getInstance() 
    {
        return new Example2();
    }
}
Output:
------
50

------------------------------------------------------------------------
Que-14) : What is the output of below program ?

public class Example2 
{
	static 
    {
    	 x = m1();
        System.out.println(Example2.x);         
    }

    static int x = 100;
    
    static int m1() 
    {
    	System.out.println(x);
        x = 40;
        return x + 20;
    }

    public static void main(String[] args) 
    {
        System.out.println(x);  
    }
}
Output:
------
0
60
100

------------------------------------------------------------------------
Que-15) : What is the output of below program ?

public class Example3 
{
    static int a = m1();  

    static int m1() 
    {
        System.out.println("m1 called");
        return 30;
    }

    static 
    {
        System.out.println("Static block executed");
        a += 20;
    }

    public static void main(String[] args) 
    {
        System.out.println("Final value of a: " + a);
    }
}
Output:
------
m1 called
Static block executed
Final value of a : 50

------------------------------------------------------------------------
Que-16) : What is the output of below program ?

public class Example4 
{
    static int x = 10;

    static 
    {
        System.out.println("Static Block 1: " + x);
        x = m1();
    }

    static 
    {
        System.out.println("Static Block 2: " + x);
        x += 5;
    }

    static int m1() 
    {
        System.out.println("m1 executed");
        return 20;
    }

    public static void main(String[] args) 
    {
        System.out.println("Main: x = " + x);
    }
}
Output:
------
Static Block 1: 10
m1 executed
Static Block 2: 20
Main: x = 25
------------------------------------------------------------------------
Que-17) : What is the output of below program ?

package com.ravi.basic;

class ClassA 
{
    static int a = 5;

    static 
    {
        System.out.println("Static Block :"+a);
        a = 10;
    }
}

public class Example5 
{
    static 
    {
        System.out.println("Example5 Static Block");
    }

    public static void main(String[] args) 
    {
        System.out.println("Main Method");
        System.out.println("Class A a :" + ClassA.a);
    }
}
Output:
------
Example5 Static Block
Main Method
Static Block :5
Class A a :10

------------------------------------------------------------------------
Que-18) : What is the output of below program ?

public class Test 
{
    static 
    {
        System.out.println("Static Block");
    }

    {
        System.out.println("Instance Block");
    }

    Test() 
    {
        System.out.println("Constructor");
    }

    public static void main(String[] args) 
    {
        System.out.println("Main Method");
        Test obj1 = new Test();
        Test obj2 = new Test();
    }
}

Output:
------
Static Block
Main Method
Instance Block
Constructor
Instance Block
Constructor

------------------------------------------------------------------------
Que-19) : What is the output of below program ?

public class Example 
{
    {
        System.out.println("Instance Block");
    }

    static 
    {
        System.out.println("Static Block");
    }

    public static void show() 
    {
        System.out.println("Static Method");
        display();
    }

    public void display() 
    {
        System.out.println("Instance Method");
    }

    public static void main(String[] args) 
    {
        show();
    }
}
Output:
------
Error! non-static method display() cannot be referenced from a static context

------------------------------------------------------------------------
Que-20) : What is the output of below program ?

package com.ravi.basic;

public class Test 
{
    static int x = 10;

    {
        x = 50;
    }

    static 
    {
        x = 30;
    }

    public static void main(String[] args) 
    {
        System.out.println("Before Object Creation: " + x);
        Test obj1 = new Test();
        System.out.println("After Object Creation: " + x);
    }
}
Output:
------
Before Object Creation: 30
After Object Creation: 50
-------------------------------------------------------------------------
Assignment :
----------------------
Develop a scenario based program by using Method Overloading for processing the payment
using different available options like Cash Payment, Credit Card and Debit Card Payment.

Create one BLC class called Payment.

Write 3 overloaded methods makePayment()

1) Method Name        : makePayment()
Argument        : 1 argument of type double amount
Return Type        : void
Access modifier    : public
In this method validate the parameter variable by using one Helper method (private
method) validateAmount() to take only positive amount [Description is given below]

2) Method Name        : makePayment()
Argument        : 3 arguments [String cardHolderName, String creditCardNumber,double amount]
Return Type        : void
Access modifier    : public
In this method validate the parameter variable amount and creditCardNumber through
Helper methods, amount must be positive integer and creditCardNumber must be of
16 digits exactly.

3) Method Name        : makePayment()
Argument        : 2 arguments [String debitCardNumber, double amount]
Return Type        : void
Access modifier    : public
In this method validate the parameter variable amount and debitCardNumber though
Helper methods, amount must be positive integer and debitCardNumber must be of
16 digits exactly.

HELPER METHODS (Must be private so accessible from inside Payment class only)
[For more about helper method, read the notes, Access modifier topic, public access modifier]

1) Method Name    : validateAmount()
Argument        : 1 argument double amount
Return Type    : boolean
Access modifier    : private
In this method validate the amount, if amount is 0 or less than 0, print an error
message and return false otherwise return true.

2) Method Name    : validateCardNumber()
Argument        : 1 argument String cardNumber.
Return Type    : boolean
Access modifier    : private
In this method validate the card number for its length, if length is exactly 16 digits
then return true otherwise return false.

3) Method Name    : maskCardNumber()
Argument        : 1 argument String cardNumber.
Return Type    : String
Access modifier    : private
By using this method we should display only last 4 digit of card (Credit OR Debit both)
only.[See the Test cases for more details in the below of this question]

Create an ELC class called PaymentProcess.

Inside main method display the following details as a Menu.
System.out.println("Payment Menu");
System.out.println("Please select any one Payment Method from the Menu :");
System.out.println("\t\t 1) Payment by using Cash ");
System.out.println("\t\t 2) Payment by using Credit Card ");
System.out.println("\t\t 3) Payment by using Debit Card ");

Write Switch case with Scanner class to make the payment through different Options :

Test Cases for Output :
------------------------
Test Case 1 :
-------------
Payment Menu
Please select any one Payment Method from the Menu :
        1) Payment by using Cash
        2) Payment by using Credit Card
        3) Payment by using Debit Card
Please enter your Payment choice [1/2/3]
1
Enter the amount you want to pay through cash :
12000
Processing payment via Cash...
Amount Paid RS :12000.0
Payment Successful!

Test Case 2 :
-------------
Payment Menu
   Please select any one Payment Method from the Menu :
        1) Payment by using Cash
        2) Payment by using Credit Card
        3) Payment by using Debit Card
   Please enter your Payment choice [1/2/3]
   2
   Enter your name :
   RaviShankar
   Enter your 16 digit Credit Card Number :
   1234987645672345
   Enter your Payment Amount :
   12000
   Processing payment via Credit Card...
   Card Holder: RaviShankar
   Card Number: *-*-**-2345
   Amount Paid RS :12000.0
   Payment Successful!
   
   Test Case 3 :
-------------
Payment Menu
   Please select any one Payment Method from the Menu :
        1) Payment by using Cash
        2) Payment by using Credit Card
        3) Payment by using Debit Card
   Please enter your Payment choice [1/2/3]
   3
   Enter your 16 digit Debit Card Number :
   1234123412341234
   Enter your Payment Amount :
   12000
   Processing payment via Debit Card...
   Card Number: *-*-**-1234
   Amount Paid RS :12000.0
   Payment Successful!


Test Cases for Input Validation :
---------------------------------
Test Cases 1:
-------------
Payment Menu
   Please select any one Payment Method from the Menu :
        1) Payment by using Cash
        2) Payment by using Credit Card
        3) Payment by using Debit Card
   Please enter your Payment choice [1/2/3]
   1
   Enter the amount you want to pay through cash :
   -1000
   Error: Amount must be greater than zero.
   
   Test Cases 2:
-------------
Payment Menu
   Please select any one Payment Method from the Menu :
        1) Payment by using Cash
        2) Payment by using Credit Card
        3) Payment by using Debit Card
   Please enter your Payment choice [1/2/3]
   2
   Enter your name :
   Ravishankar
   Enter your 16 digit Credit Card Number :
   1234
   Enter your Payment Amount :
   123
   Error: Invalid card number. It must be 16 digits.

Test Cases 3:
-------------
Payment Menu
   Please select any one Payment Method from the Menu :
        1) Payment by using Cash
        2) Payment by using Credit Card
        3) Payment by using Debit Card
   Please enter your Payment choice [1/2/3]
   3
   Enter your 16 digit Debit Card Number :
   1234
   Enter your Payment Amount :
   123
   Error: Invalid card number. It must be 16 digits

Code:-
=====
//Payment.java
--------------
package com.Nit.OOPs_Task_18_1_Method_Overloading;

public class Payment {

	public void makePayment(double amount)
	{
		if(validateAmount(amount))
		{
		System.out.println("Processing payment via Cash...");
		System.out.println("Amount Paid RS :" + amount);
		System.out.println("Payment Successfully!");
		}
		
	}
	
	public void makePayment(String cardHolderName,String creditCardNumber,double amount)
	{
		if(validateAmount(amount) && validateCardNumber(creditCardNumber))
		{
		System.out.println("Card Holder: "+cardHolderName);
		System.out.println("Card Number: "+maskCardNumber(creditCardNumber));
		System.out.println("Amount Paid rs : "+amount);
		System.out.println("Payment Successfully!");
		}
	}
	
	public void makePayment(String debitCardNumber,double amount)
	{
		if(validateAmount(amount) && validateCardNumber(debitCardNumber))
		{
		System.out.println("Card Number: "+maskCardNumber(debitCardNumber));
		System.out.println("Amount Paid RS: "+amount);
		System.out.println("Payment Successfully!");
		}
	}
	
	private boolean validateAmount(double amount)
	{
		if(amount>0)
		{
			
			return true;
		}
		else
		{
			System.err.println("Error! amount must be positive");
			return false;
			
		}
	}
	
	private boolean validateCardNumber(String cardNumber)
	{
		if(cardNumber.length()==16)
		{
			return true;
		}
		else
		{
			System.err.println("Error! Invalid card number. It must be 16 digits");
			return false;
		}
	
	}
	
	private String maskCardNumber(String cardNumber) {
	    
	    if (cardNumber == null || cardNumber.length() < 4) 
	    {
	        return "Invalid card number"; 
	    }

	    
	    String masked = "**** **** **** " + cardNumber.substring(cardNumber.length() - 4);
	    return masked;
	}

}

//PaymentProcess.java
----------------------
package com.Nit.OOPs_Task_18_1_Method_Overloading;

import java.util.Scanner;

public class PaymentProcess {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Payment p = new Payment();

        System.out.println("Payment Menu");
        System.out.println("Please select any one Payment Method from the Menu :");
        System.out.println("\t\t 1) Payment by using Cash ");
        System.out.println("\t\t 2) Payment by using Credit Card ");
        System.out.println("\t\t 3) Payment by using Debit Card ");
        System.out.print("Please enter your Payment choice [1/2/3]: ");
        int choice = sc.nextInt();
        sc.nextLine(); 

        switch (choice) {
            case 1:
                System.out.print("Enter the amount you want to pay through cash: ");
                double cashAmount = sc.nextDouble();
                p.makePayment(cashAmount);
                break;

            case 2:
                System.out.print("Enter your name: ");
                String creditCardHolderName = sc.nextLine();
                System.out.print("Enter your 16 digit Credit Card Number: ");
                String creditCardNumber = sc.nextLine();
                System.out.print("Enter your Payment Amount: ");
                double creditCardAmount = sc.nextDouble();
                p.makePayment(creditCardHolderName, creditCardNumber, creditCardAmount);
                break;

            case 3:
                System.out.print("Enter your 16 digit Debit Card Number: ");
                String debitCardNumber = sc.nextLine();
                System.out.print("Enter your Payment Amount: ");
                double debitCardAmount = sc.nextDouble();
                sc.nextLine();
                p.makePayment(debitCardNumber, debitCardAmount);
                break;

            default:
                System.out.println("Invalid choice. Please select a valid option.");
        }
        
        sc.close();
    }
}


===========================================================================================================================================================================
18-03-25
********
MCQ on Wrapper classes :
------------------------
Q1) Which of the following is NOT a wrapper class in Java?
a) Integer
b) Float
c) String
d) Boolean 
Ans:
C) String
---------------------------------------------------------
Q2) What is the purpose of wrapper classes in Java?
a) To use primitive data types as objects
b) To improve performance over primitive data types
c) To replace primitive data types completely
d) None of the above
Ans:
A) To use primitive data types as objects
---------------------------------------------------------
Q3) Which method is used to convert a wrapper object to a primitive type?
a) parse()
b) valueOf()
c) xxxValue() (e.g., intValue(), doubleValue())
d) toPrimitive()
Ans:
C) xxxValue() (e.g., intValue(), doubleValue())
---------------------------------------------------------
Q4) Which of the following is the correct way to create an Integer object?
a) Integer i = new Integer(10);
b) Integer i = Integer.valueOf(10);
c) Integer i = 10;
d) All of the above
Ans:
D)All of the above
---------------------------------------------------------
Q5) What will be the output of the following code?
    Integer a = 100;
    Integer b = 100;
    System.out.println(a == b);

a) true
b) false
c) Compilation error
d) Runtime exception

Ans:
A)true (because Integer values between -128 and 127 are cached)
---------------------------------------------------------
Q6) What will be the output of the following code?

    Integer a = 200;
    Integer b = 200;	//Because of Integer range is between -128 to 127
    System.out.println(a == b);
a) true
b) false
c) Compilation error
d) Runtime exception

Ans:
B)False (because values above 127 are not cached, so different objects are created)
---------------------------------------------------------
Q7) Which wrapper class does NOT have a parseXXX() method?
a) Integer
b) Double
c) Character
d) Float

Ans:
C)Character
---------------------------------------------------------
Q8) Autoboxing is the process of converting:
a) A wrapper object into a primitive value
b) A primitive value into a wrapper object
c) A String into a wrapper object
d) None of the above
Ans:
B)A primitive value into a wrapper object
---------------------------------------------------------
Q9) Autoboxing is the process of converting:
a) A wrapper object into a primitive value
b) A primitive value into a wrapper object
c) A String into a wrapper object
d) None of the above
Ans:
B)A primitive value into a wrapper object
---------------------------------------------------------
Q10) Which of the following is NOT a method in the Integer class?
a) parseInt()
b) valueOf()
c) toString()
d) convert()
Ans:
D)convert()
---------------------------------------------------------
Q11) What is the range of Integer values cached by the JVM?
a) -128 to 127
b) 0 to 255
c) -256 to 255
d) No caching is done
Ans:
A)-128 to 127
---------------------------------------------------------
Q12) Which statement about wrapper classes is FALSE?
a) Wrapper classes are immutable
b) Wrapper objects can be compared using ==
c) valueOf() returns cached instances for some values
d) parseXXX() methods convert strings to primitives
Ans:
B
---------------------------------------------------------
Q13) Which of the following statements about autoboxing is TRUE?
a) It converts primitive types to their corresponding wrapper class objects automatically
b) It converts wrapper objects to primitive types automatically
c) It is not supported in Java
d) It always improves performance

Ans:
A
---------------------------------------------------------
Q14) Which wrapper class method is used to retrieve the primitive value from an object?
a) getValue()
b) extract()
c) xxxValue() (e.g., intValue(), doubleValue())
d) retrieve()

Ans:
C
---------------------------------------------------------
Q15) Which of the following is NOT a valid way to create a wrapper object?
a) Integer i = Integer.valueOf(10);
b) Integer i = 10;
c) Integer i = new Integer(10);
d) Integer i = Integer.parseInt("10");

Ans:
D
---------------------------------------------------------
Q16) Which of the following wrapper classes does NOT extend Number class?
a) Integer
b) Double
c) Boolean
d) Byte

Ans:
C
---------------------------------------------------------
Q17) What is the default value of an Integer wrapper object if declared but not initialized?
a) 0
b) null
c) -1
d) Undefined

Ans:
B
---------------------------------------------------------
Q18) Which of the following statements about autoboxing is FALSE?
a) It converts a primitive type to its corresponding wrapper class object
b) It is done automatically by the compiler from 1.5V
c) It always improves performance
d) It helps in using collections with primitive types

Ans:
C
---------------------------------------------------------
Q19) Which of the following wrapper classes extends Number?
a) Boolean
b) Character
c) Integer
d) String

Ans:
C
---------------------------------------------------------
Q20) What is the output of the following statement
public class Test 
{
	public static void main(String [] args)
	{
		System.out.println(Character.MAX_RADIX);
	}
	
}

a) 8
b) 10
c) 16
d) 36
Ans:
D
---------------------------------------------------------
===========================================================================================================================================================================
19-03-25
********
Question - 1
--------------
Write a Java program that defines a MathOperations class with method overloading to perform arithmetic operations. Implement the following methods:

Take a class Calculator(BLC Class)

take 4 public Method :
add(int num1, int num2): Returns the sum of two integers.

add(double num1, double num2): Returns the sum of two doubles.

multiply(int num1, int num2): Returns the product of two integers.

multiply(double num1, double num2): Returns the product of two doubles.

Take an (ELC Class)In the main method, create an instance of MathOperations and demonstrate the use of each method by performing calculations with different types of arguments (integers and doubles).

Test Cases-1 :    
------------------
Add two doubles
Sample Input: 10.5, 20.3

Expected Output:

Sum of 10.5 and 20.3 (double): 30.8


Test Cases -2 :
------------------
Multiply two integers

Sample Input: 10, 20

Expected Output:
Product of 10 and 20 (int): 200

Test Case-3 :
----------------
Add with negative integers

Sample Input: -10, 20

Expected Output:

Sum of -10 and 20 (int): 10

Code:
-----
//Calculator.java
package com.Nit.OOPs_Task_19_1_Method_Overloading;

public class Calculator {

	public int add(int num1,int num2)
	{
		System.out.print("Sum of "+num1+" and "+num2+" (int): ");
		return num1+num2;
	}
	
	public double add(double num1,double num2)
	{
		System.out.print("Sum of "+num1+" and "+num2+" (double): ");
		return num1+num2;
	}
	
	public int multiply(int num1,int num2)
	{
		System.out.print("Product of "+num1+" and "+num2+" (int): ");
		return num1*num2;
	}
	
	public double multiply(double num1,double num2)
	{
		System.out.print("Product of "+num1+" and "+num2+" (double): ");
		return num1*num2;
	}
}


//Main.java
package com.Nit.OOPs_Task_19_1_Method_Overloading;
import java.util.*;
public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Calculator calc = new Calculator();
		System.out.print("Enter num1: ");
		int num1 = sc.nextInt();
		System.out.print("Enter num2: ");
		int num2 = sc.nextInt();
		System.out.println(calc.add(num1, num2));
		System.out.println(calc.multiply(num1, num2));
		
	}

}
-----------------------------------------------------------------------------
---------------
Question - 2: 
---------------

Write a Java program that defines a ShapeCalculator class with method overloading to calculate the area of geometric shapes. Implement the following methods:


ShapeCalculator - Method overloading


take 4 public Method :

calculateArea(int sideLength): Returns the area of a square (side * side).

calculateArea(int length, int width): Returns the area of a rectangle (length * width).

calculateArea(double radius): Returns the area of a circle (PI * radius^2).

Take an Elc class Main  it having main method and execute the methods.

Test Cases -1 :
-------------------
Valid Case: Calculate area of a circle

Sample Input: radius = 7.0

Expected Output:

Area of circle with radius 7.0: 153.93804


Test Cases -2 :
-------------------

Invalid Case: Negative side length for square

Sample Input: sideLength = -5
Expected Output:

Error: Side length must be non-negative.


Test Cases -3 :
-------------------
Invalid Case: Negative length or width for rectangle

Sample Input: length = -5, width = 10

Expected Output:

Error: Length and width must be non-negative.

Code:
----
//Calculator.java
package com.Nit.OOPs_Task_19_2_Method_Overloading;

public class Calculator {

	public void calculateArea(int side)
	{
		if(side>0)
		{
		System.out.println("Area of square : "+(side*side));
		}
		else
		{
			System.err.println("Error! Side length must be non-negative");
		}
	}
	public void calculateArea(int length,int width)
	{
		if(length>0 && width>0)
		{
			System.out.println("Area of rectangle: "+(length*width));
			
		}
		else
		{
			System.err.println("Error! Length and Width must be non-negative");
		}
	}
	public void calculateArea(double radius)
	{
		
		
		if(radius>0)
		{
		System.out.println("Area of circle: "+(3.14*radius*radius));
		}
		else
		{
			System.err.println("Error! Radius must be non-negative");
		}
		
	}
}


//ShapeCalculator.java
package com.Nit.OOPs_Task_19_2_Method_Overloading;

import java.util.*;

public class ShapeCalculator {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Calculator calc = new Calculator();
		System.out.println("Enter value: ");
		double num1 = sc.nextDouble();
		int num2 = sc.nextInt();
		int num2_1 = sc.nextInt();
		calc.calculateArea(num1);
		calc.calculateArea(num2);
		calc.calculateArea(num2, num2_1);
	}

}

-----------------------------------------------------------------------------
Question -3
-------------

Create a class Employee (BLC Class)

Attributes:

names              datatype
--------    	   -----------
hoursWorked        :int
hourlyRate         :double
annualSalary	   :double
salesAmount        :double
commisionRate	   :double

Acess modifier :private for all varriables

Implement three constructors:

One for an hourly employee that accepts hoursWorked and hourlyRate.

One for a salaried employee that accepts annualSalary.

One for a commission employee that accepts salesAmount and commissionRate.

Methods :
------------
method name 	:calculateSalary()
Return type 	:double
Acess Modifier	:public

 ->for calculating the salary of an hourly employee.

method name 	:calculateSalary(double annualSalary)
Return type 	:double
Acess Modifier	:public

-> for calculating the salary of a salaried employee.

method name 	:calculateSalary(double salesAmount, double commissionRate)
Return type 	:double
Acess Modifier	:public

->for calculating the commission of a commission-based employee.

Create a Tester Class(ELC Class) Create instances of each type of employee.
Calculate and display the salary for each employee type using the appropriate method.


Test Cases :
--------------
Case 1:
--------
Hourly Employee

Input: hoursWorked = 160, hourlyRate = 15

Expected Output: Monthly salary of hourly employee: 2400.0

 Case 2:
----------
 Salaried Employee
Input : annualSalary = 60000

Expected Output : Monthly salary of salaried employee: 5000.0

 Case 3:
---------
Commission Employee
Input: salesAmount = 50000, commissionRate = 0.10
Expected Output: Commission of employee: 5000.0

Code:
-----
//Employee.java
package com.Nit.OOPs_Task_19_3_Method_Overloading;
public class Employee
{
	private int hoursWorked;
	private double hourlyRate;
	private double annualSalary;
	private double salesAmount;
	private double commisionRate;
	
	public Employee(double hourlyRate,int hoursWorked)
	{
		this.hoursWorked = hoursWorked;
		this.hourlyRate = hourlyRate;
	}
	public Employee(double annualSalary)
	{
		this.annualSalary = annualSalary;
	}
	public Employee(double salesAmount,double commisionRate)
	{
		this.salesAmount = salesAmount;
		this.commisionRate = commisionRate;
	}
	public int getHoursWorked() {
		return hoursWorked;
	}
	public double getHourlyRate() {
		return hourlyRate;
	}
	public double getAnnualSalary() {
		return annualSalary;
	}
	public double getSalesAmount() {
		return salesAmount;
	}
	public double getCommisionRate() {
		return commisionRate;
	}
	public double calculateSalary(double hourlyRate,int hoursWorked)
	{
		
		return hoursWorked*hourlyRate;
	}
	public double calculateSalary(double annualSalary)
	{
		return annualSalary/12;
	}
	public double calculateSalary(double salesAmount,double commisionRate)
	{
		return salesAmount*commisionRate;
	}
}


//Test.java
package com.Nit.OOPs_Task_19_3_Method_Overloading;

public class Test {

	public static void main(String[] args) {
		Employee HourEmp = new Employee(15,160);
		System.out.println("Monthly salary of hourly employee: "+HourEmp.calculateSalary(HourEmp.getHoursWorked(), HourEmp.getHourlyRate()));
		Employee SalaryEmp = new Employee(60000);
		System.out.println("Monthly salary of salaried employee: "+SalaryEmp.calculateSalary(SalaryEmp.getAnnualSalary()));
		Employee CommisionEmp = new Employee(50000, 0.10);
		System.out.println("Commision of employee: "+CommisionEmp.calculateSalary(CommisionEmp.getSalesAmount(),CommisionEmp.getCommisionRate()));

	}

}
===============================================================================
20-03-25
********
Create a Employee Salary calculation Application project by using Method Overriding Concept to 
display different kinds of salary for PartTimeEmployee and FullTimeEmployee.
Validate all the inputs properly and generate error message, if any input is not appropriate. 

Create a BLC class called Employee
Fields :
 id  int  protected
 name String protected
	
Use a parameterized constructor to initialize all the fields, 

 Methods :
 
 1) Method Name 	: calculateSalary()
    Argument   		: No Argument
    Return Type 	: double
    Access modifier	: public
    In this method return 0.0 for generic salary

 Create another BLC class FullTimeEmployee which is sub class of Employee.

  
  Field :
  protected double salary;
  
  Take a parameterized constructor to initialize super class and sub class properties.
  Validate all the inputs properly and generate error message, if any input is not appropriate. 
  [See the Test cases for Input Validation]

 Method :
  
 1) Method Name 	: calculateSalary()
    Argument   		: No Argument
    Return Type 	: double
    Access modifier	: public
    
    In this overridden method return the salary of employee as a non static variable

    
Create another BLC class PartTimeEmployee which is sub class of Employee
  
  Field :
  protected double hourlyRate;
  protected int hoursWorked; 
  
  Take a parameterized constructor to initialize super class and sub class properties.
  Validate all the inputs properly and generate error message, if any input is not appropriate. 
  [See the Test cases for Input Validation]
  
 Method :
  
 1) Method Name 	: calculateSalary()
    Argument   		: No Argument
    Return Type 	: double
    Access modifier	: public
    In this overridden method return the salary of employee as based on number of hours, he has
    worked in the Organization.
        
    Create an ELC class EmployeeSalary with main method to test this application.
    
Test Cases for Output :
------------------------
Test Case 1 :
-------------
		***Salary Calculation Menu***		
		 1) FullTime Employees 
		 2) PartTime Employees  
Please select the Employee type
1
Enter Fulltime Employee Id :101
Enter Fulltime Employee Name :Scott
Enter the Salary :90000
Scott Salary is :90000.0

Test Case 2 :
-------------
		***Salary Calculation Menu***		
		 1) FullTime Employees 
		 2) PartTime Employees  
Please select the Employee type
2
Enter PartTime Employee Id :102
Enter PartTime Employee Name :Alen
Enter your hourly rate:1000
Enter your total works hour in the month :90
Alen Salary is :90000.0

Test Cases for Input Validation :
 ---------------------------------
Test Cases 1:
-------------
		***Salary Calculation Menu***		
		 1) FullTime Employees 
		 2) PartTime Employees  
Please select the Employee type
1
Enter Fulltime Employee Id :101
Enter Fulltime Employee Name :Scott
Enter the Salary :-9000
Salary can't be negative!!!

Test Cases 2:
-------------
 		***Salary Calculation Menu***		
		 1) FullTime Employees 
		 2) PartTime Employees  
Please select the Employee type
2
Enter PartTime Employee Id :102
Enter PartTime Employee Name :Alen
Enter your hourly rate:-12
Enter your total works hour in the month :90
Employee hourly rate can't be zero OR Negative

Test Cases 3:
-------------
		***Salary Calculation Menu***		
		 1) FullTime Employees 
		 2) PartTime Employees  
Please select the Employee type
2
Enter PartTime Employee Id :102
Enter PartTime Employee Name :Alen
Enter your hourly rate:1000
Enter your total works hour in the month :-10
Employee hours of work can't be Negative

Code:
=====
//Employee/java
package com.Nit.OOPs_Task_20_1_Method_Overloading;

public class Employee {

	protected int id;
	protected String name;
	public Employee(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}
	


	public double calculateSalary()
	{
		return 0.0;
	}
}

//FullTimeEmployee.java
package com.Nit.OOPs_Task_20_1_Method_Overloading;

public class FullTimeEmployee extends Employee
{
	protected double salary;

	public FullTimeEmployee(int id, String name, double salary) {
		super(id, name);
		this.salary = salary;
	}
	@Override
	public double calculateSalary()
	{
		return salary;
		
	}
	
	
}

//PartTimeEmployee.java
package com.Nit.OOPs_Task_20_1_Method_Overloading;

public class PartTimeEmployee extends Employee{

	protected double hourlyRate;
	protected int hoursWorked;
	public PartTimeEmployee(int id, String name, double hourlyRate, int hoursWorked) {
		super(id, name);
		this.hourlyRate = hourlyRate;
		this.hoursWorked = hoursWorked;
	}
	@Override
	public double calculateSalary()
	{
		return hoursWorked*hourlyRate;
	}
}

//EmployeeSalar.java
package com.Nit.OOPs_Task_20_1_Method_Overloading;
import java.util.*;
public class EmployeeSalary {

	public static void main(String[] args) {
		Employee e =null;
		Scanner sc =new Scanner(System.in);
		System.out.println("***Salary Calculation Menu***");
		System.out.println("1) FullTime Employees");
		System.out.println("2) Part Time Employee");
		System.out.println("Please select the Employee type");
		int option = sc.nextInt();
		switch(option)
		{
		case 1:
			System.out.println("Enter Fulltime Employee Id :");
			int id = sc.nextInt();
			sc.nextLine();
			System.out.println("Enter Fulltime Employee Name :");
			String name = sc.nextLine();
			System.out.println("Enter the Salary :");
			double sal = sc.nextDouble();
			if(id<=0)
			{
				System.err.println("Id can't be negaticve");
			}
			else if(sal<=0)
			{
				System.err.println("Salary can't be negative");
				return;
			}
			e = new FullTimeEmployee(id,name,sal);
			System.out.println(name+" Salary is :"+e.calculateSalary());
			break;
		
		case 2:
			System.out.println("Enter PartTime Employee Id :");
			id = sc.nextInt();
			sc.nextLine();
			System.out.println("Enter PartTime Employee Name :");
			name = sc.nextLine();
			System.out.println("Enter your hourly rate: ");
			double rate = sc.nextDouble();
			sc.nextLine();
			System.out.println("Enter your total works hour in the month : ");
			int hoursWorked = sc.nextInt();
			if(id<=0)
			{
				System.err.println("Id can't be negative");
				return;
				
			}
			else if(rate<=0)
			{
				System.err.println("Employee hourly rate can't be zero OR Negative");
				return;
			}
			else if(hoursWorked<=0)
			{
				System.err.println("Employee hours of work can't be Negative");
				return;
			}
			else
			{
				e= new PartTimeEmployee(id,name,rate,hoursWorked);
				System.out.println(name+" Salary is :"+e.calculateSalary());	
			}
			
		}
	}

}

----------------------------------------------------------------------------------------
Create a Shopping Mall Application project by using Method Overriding Concept to display and accept different kinds of discount given to specific customers like PrimeCustomer and
VIPCustomer (No discount for General Customer)

Summary :

[Super class : Customer
Subclasses (GeneralCustomer, PrimeCustomer, VIPCustomer)
override the calculateBill method to implement different discount rules.]

Coding Requirements :
---------------------

Create a BLC class Customer
Fields :
name String Protected

Use a parameterized constructor to initialize the fields, In this constructor provide error message, if name is null or empty (see test cases for more details)


Methods :

1) Method Name        : calculateBill()
Argument              : One argument of type double var args [double... prices]
Return Type        : void
Access modifier    : public

In this method using var args receive item price, Give an error message and exit, if Item price is negative, Calculate the total bill by adding all the item price, display
all the details of customer name, total cost, Discount

Create another BLC class GeneralCustomer which is the sub class of Customer

Fields : No fields

Take a parameterized constructor to initialize super class properties.

Method :

1) Method Name        : calculateBill()
Argument        : One argument of type double var args [double... prices]
Return Type        : void
Access modifier    : public
Override this method from super class, For general customer discount is not available
so we can call super class method to display customer bill and information without discount. If itemPrice is negative given an error message.

Create another BLC class PrimeCustomer which is the sub class of Customer

Fields :
protected double discountRate = 10.0;

Take a parameterized constructor to initialize super class properties.

1) Method Name        : calculateBill()
Argument        : One argument of type double var args [double... prices]
Return Type        : void
Access modifier    : public
Override this method from super class, For Prime customer with 10% discount
in the final bill amount, calculate the total bill and display Prime Customer
information [See Test cases for more details]


Create another BLC class VIPCustomer which is the sub class of Customer

Fields :
protected double discountRate = 15.0;

Take a parameterized constructor to initialize super class properties.

1) Method Name        : calculateBill()
Argument        : One argument of type double var args [double... prices]
Return Type        : void
Access modifier    : public
Override this method from super class, For VIP customer with 20% discount
in the final bill amount, calculate the total bill and display VIP Customer
information [See Test cases for more details]

Create an ELC class ShoppingMall with main method to test this application.

Method :
1) Method Name    : generateBill()
Argument        : Two arguments [Customer cust, double... prices]
Return Type        : void
Access modifier    : public and static

This method will receive Customer object and item price using var args and call
appropriate object overridden method of sub classes to generate the bill.


Write Switch case with Scanner class in the main method
to Test the application as shown in the below Test Cases.

Test Cases for Output :
------------------------
Test Case 1 :
-------------
Please select the Customer Type to get additional Discount :
        1) General Customer
        2) Prime Customer
        3) VIP Customer
       
       System.out.println("Please enter Customer type :");
       1
       Please Enter your Name :
       Mr Ravishankar
       Enter number of Items :
       2
       Please Enter the Item Name and Price :
       1)Item Name :T-Shirt
        Item Price :2300
       2)Item Name :Jeans
        Item Price :4500
       Welcome to Hyderabad Mall :
       Customer: Mr Ravishankar
       Total cost RS : 6800.0
       Discount: No discount for regular customers.

Test Case 2 :
-------------
Please select the Customer Type to get additional Discount :
        1) General Customer
        2) Prime Customer
        3) VIP Customer
       
       System.out.println("Please enter Customer type :");
       2
       Please Enter your Name :
       Mr Scott
       Enter number of Items :
       3
       Please Enter the Item Name and Price :
       1)Item Name :Mobile
        Item Price :12890
       2)Item Name :Laptop
        Item Price :86000
       3)Item Name :Watch
        Item Price :2300
       Welcome to Hyderabad Mall :
       Customer: Mr Scott
       Total cost RS :101190.0
       Discount RS :10119.0
       Final amount RS :91071.0

Test Case 3 :
-------------
Please select the Customer Type to get additional Discount :
        1) General Customer
        2) Prime Customer
        3) VIP Customer
       Please enter Customer type :
       3
       Please Enter your Name :
       Mr Smith
       Enter number of Items :
       2
       Please Enter the Item Name and Price :
       1)Item Name :Washing Machine
        Item Price :55000
       2)Item Name :Smart TV
        Item Price :100000
       Welcome to Hyderabad Mall :
       Customer: Mr Smith
       Total cost RS :155000.0
       Discount RS :15500.0
       Final amount RS :139500.0
Test Cases for Input Validation :
---------------------------------
Test Case 1:
-------------
Please select the Customer Type to get additional Discount :
        1) General Customer
        2) Prime Customer
        3) VIP Customer
   Please enter Customer type :
   1
   Please Enter your Name :
   
   Customer name cannot be empty.

Test Case 2:
-------------
Please select the Customer Type to get additional Discount :
        1) General Customer
        2) Prime Customer
        3) VIP Customer
   Please enter Customer type :
   2
   Please Enter your Name :
   Mr Scott
   Enter number of Items : 
   1
   Please Enter the Item Name and Price :
   1)Item Name :Laptop
    Item Price :-90000
   Welcome to Hyderabad Mall :
   Item price cannot be negative.

Code:
-----
//Customer.java
package com.Nit.OOPs_Task_20_2_Method_Overloading;

public class Customer {

	protected String name;

	public Customer(String name) {
		super();
		if(name == null || name.isEmpty())
		{
			System.err.println(" Customer name cannot be empty.");
			System.exit(0);
		}
		this.name = name;
	}
	public void calculateBill(double... prices)
	{
		double total = 0.0;
			for(double price : prices)
			{
				if(price<0)
				{
					System.err.println("Error! Negative price encountered. Cannot calculate bill");
					System.exit(0);
				}
				
				total+=price;
			}
			System.out.println("Customer Name: "+this.name);
			System.out.println("Total cost RS: "+total);
			System.out.println("Discount: No discount for regular customers.");
		}
	
	
}

//GeneralCustomer.java
package com.Nit.OOPs_Task_20_2_Method_Overloading;

public class GeneralCustomer extends Customer
{

	public GeneralCustomer(String name) {
		super(name);
	}
	@Override
	public void calculateBill(double... prices)
	{
		super.calculateBill(prices);
	}
	
}

//PrimeCustomer.java
package com.Nit.OOPs_Task_20_2_Method_Overloading;

public class PrimeCustomer extends Customer
{
	protected double discountRate=10.0;

	public PrimeCustomer(String name) {
		super(name);
	}
	@Override
	public void calculateBill(double... prices)
	{
		double total=0.0;
		
		for(double price : prices)
		{
			if(price<=0)
			{
				System.err.println("Error! Item price can't be negative");
				System.exit(0);
			}
			total+=price;
		}
		
		double discount=(total*discountRate)/100;
		double finalAmount = total-discount;
		System.out.println("Customer Name: "+this.name);
		System.out.println("Total cost RS : "+total);
		System.out.println("Discount RS: "+discount);
		System.out.println("Final Cost RS : "+finalAmount);
	}
	
}

//VIPCustomer.java
package com.Nit.OOPs_Task_20_2_Method_Overloading;

public class VIPCustomer extends Customer
{
	protected double discountRate = 15.0;

	public VIPCustomer(String name) {
		super(name);

	}
	@Override
	public void calculateBill(double... prices)
	{
		double total = 0.0;
		for(double price:prices)
		{
			if(price<=0)
			{
				System.err.println("Error! Item price can't be negative");
				return;
			}
			total+=price;
		}
		double discount=(total*discountRate)/100;
		double finalAmount = total - discount;
		System.out.println("Customer Name: "+this.name);
		System.out.println("Total cost RS : "+total);
		System.out.println("Discount RS : "+finalAmount);
	}

	
}

//ShoppingMall.java(ELC)
package com.Nit.OOPs_Task_20_2_Method_Overloading;
import java.util.*;
public class ShoppingMall {

	public static void generateBill(Customer cust,double... prices)
	{
		cust.calculateBill(prices);
	}

	public static void main(String[] args) {
		Customer c =null;
		Scanner sc = new Scanner(System.in);
		System.out.println("Please select the Customer Type to get additional Discount :");
		System.out.println("1) General Customer");
		System.out.println("2) Prime Customer");
		System.out.println("3) VIP Customer");
		System.out.println("Please enter Customer type :");
		int option = sc.nextInt();
		sc.nextLine();
		switch(option)
		{
		case 1:
			System.out.println("Please Enter your Name: ");
			String name = sc.nextLine();
			if(name == null || name.isEmpty())
			{
				System.err.println("Customer name cannot be empty");
				return;
			}
			System.out.println("Enter number of Items :");
			int items = sc.nextInt();
			sc.nextLine();
			System.out.println("Please Enter the Item Name and Price :");
			String itemName = null;
			double itemPrice=0;
			c = new GeneralCustomer(name);
			double totalPrice=0.0;
			for(int i=1;i<=items;i++)
			{
				System.out.print(i+")Item Name :");
				itemName = sc.nextLine();
				System.out.print(" Item Price :");
				itemPrice = sc.nextDouble();
				sc.nextLine();
				totalPrice = totalPrice+itemPrice;
			}
			System.out.println("Welcome to Hyderabad Mall : ");
			c.calculateBill(totalPrice);
			break;
		case 2:
			System.out.println("Please Enter Your Name: ");
			name = sc.nextLine();
			if(name == null || name.isEmpty())
			{
				System.err.println("Customer name cannot be empty");
				return;
			}
			System.out.println("Enter Number of Items: ");
			items = sc.nextInt();
			sc.nextLine();
			System.out.println("Please Enter the Item Name and Price :");
			String itemName2;
			itemPrice=0;
			totalPrice=0.0;
			c = new PrimeCustomer(name);
			for(int i=1;i<=items;i++)
			{
				System.out.print(i+")Item Name :");
				itemName2 = sc.nextLine();
				System.out.print("Item Price :");
				itemPrice = sc.nextDouble();
				sc.nextLine();
				totalPrice = totalPrice+itemPrice;
			}
			System.out.println("Welcome to Hyderabad Mall :");
			c.calculateBill(totalPrice);
			break;
		case 3:
			System.out.println("Please Enter Your Name: ");
			name = sc.nextLine();
			if(name == null || name.isEmpty())
			{
				System.err.println("Customer name cannot be empty");
				return;
			}
			System.out.println("Enter Number of Items: ");
			items = sc.nextInt();
			sc.nextLine();
			System.out.println("Please Enter the Item Name and Price :");
			String itemName3 ;
			itemPrice=0;
			c = new PrimeCustomer(name);
			totalPrice = 0.0;
			for(int i=1;i<=items;i++)
			{
				System.out.print(i+")Item Name :");
				itemName3 = sc.nextLine();
				System.out.print("Item Price :");
				itemPrice = sc.nextDouble();
				sc.nextLine();
				totalPrice = totalPrice+itemPrice;
			}
			System.out.println("Welcome to Hyderabad Mall :");
			c.calculateBill(totalPrice);
			break;
		default:
			System.out.println("Invalid input option. Please enter again!!!");
			
			
		}
		

	}

}
--------------------------------------------------------------------
==============================================================================================
21-03-25
********
Q1)

class Vehicle
{
	public int fuelCapacity()
	{
		return 40;
	}	
	
	public void printTankCapacity()
	{
		System.out.println(this.fuelCapacity());
	}
}
class Car extends Vehicle
{
	@Override
	public int fuelCapacity()
	{
		return 18;
	}	
}

public class Test
{

	public static void main(String[] args)
	{
		Vehicle v1 = new Car();
		v1.printTankCapacity();

	}

}
A: 18
--------------------------------------------------------------------
Q2) In this Program add code to print value 40.

class Vehicle
{
	public int fuelCapacity()
	{
		return 40;
	}	
	
	public void printTankCapacity()
	{
		System.out.println(this.fuelCapacity());
	}
}
class Car extends Vehicle
{
	@Override
	public int fuelCapacity()
	{
		return 18;
	}	
}

public class Test
{

	public static void main(String[] args)
	{
		Vehicle v1 = new Car();
		v1.printTankCapacity();

	}

}
A: 18
---------------------------------------------------------------------
Q3)

class Bird
{
	public void fly()
	{
		System.out.println("Genric Bird is flying");
	}
	
	public void roam()
	{
		System.out.println("Generic Bird is roamig");
	}	
	
}
class Parrot extends Bird
{
	
	public int fly(double height)
	{
		System.out.println("Parrot is flying with :"+height+" height");
		return 0;
	}
	
	public void roam()
	{
		System.out.println("Parrot Bird is roamig");
		
	}
}
public class MethodOverridingDemo1 {

	public static void main(String[] args) 
	{
		Parrot p = new Parrot();
		p.fly(15.6);
		p.roam();
	}

}
A:
Parrot is flying with:15.6 height
Parrot Bird is roaming
----------------------------------------------------------------------
Q4)

class Base
	{
        int value=0;
        Base()
		{
        addValue();
        }
        void addValue(){
        value += 10;	//10	50	
        }
       int getValue(){
         return value;
       }
     }
    class Derived extends Base{
      Derived()
	  {
       addValue();
      }
     void addValue(){
		 super.addValue();
     value +=  30;	//10+30=40	50+30=80
      }
    }
    public class Test5 {
      public static void main(String[] args){
          Derived b = new Derived();		  
          System.out.println(b.getValue());
      }
    }
A:
80
-----------------------------------------------------------------------
Q5)
public class Test19 extends Singer
 {
  public static String sing() 
  {
    return "fa";
  }

  public static void main(String[] args) 
  {
    Test19 t = new Test19();
    Singer s = new Test19();
    System.out.println(t.sing() + " " + s.sing());
  }
}

class Singer 
{
  public static String sing() 
  {
    return "la";
  }
}
A:
fa la
-----------------------------------------------------------------------
Q6)
public class Test11
{
	public static void main(String [] args)
	{
		Animal a = new Animal();
		Animal b = new Horse();
		a.eat();
		b.eat();
		b.buck();
	}
}
class Animal
{
	public void eat()
	{
		System.out.println("Generic Animal eating");

	}
	
}
class Horse extends Animal
{
	public void eat()
	{
		System.out.println("Horse Eating");
	}
	public void buck()
	{
		System.out.println("Printing");
	}
}
A:

Comiplation Error
-----------------------------------------------------------------------
Q7)

class A 
{
static void foo()
{
System.out.println("A");
}
}

class B extends A
{
static int foo()
{
System.out.println("B");
return 1;
}
}
A:
Compilation Error
-----------------------------------------------------------------------
Q8)

class A 
{
void foo() 
{
System.out.println("A");
}
}

class B extends A 
{
void foo() 
{
System.out.println("B");
}
}	

class Test15
{
public static void main(String[] args)
{
A obja;
B objb = new B();
objb.foo();
obja = objb;
obja.foo();
}
}
A:
Error!
----------------------------------------------------------------------
Q9) Find the compilation errors

class Test17
{
  public static void main(String[] args) 
{
    Test17 a;
    MySubclass b;

    a = new Test17();             // (1)
    b = new MySubclass();          // (2)

    a = b;                         // (3)
    b = a;                         // (4)

    a = new MySubclass();          // (5)
    b = new Test17();             // (6)
  }
}

class MySubclass extends Test17 {}
A:

Error! ClassCastException
-----------------------------------------------------------------------
Q10)
class A 
{
private void printName(){
System.out.println("Value-A");
}
}
class B extends A
{
public void printName(){
System.out.println("Name-B");
}
}
public class Test23
{
public static void main (String[] args) 
{
A b = new B();
b.printName();
}
}
A:
Error!
----------------------------------------------------------------------
Q11)
class A 
	{
public void printValue()
	{
System.out.println("Value-A");
    }
    }
class B extends A
{
public void printNameB()
{
System.out.println("Name-B");
}
}
class C extends A
{
public void printNameC()
{
System.out.println("Name-C");
}
}
 public class Test27
	{
 public static void main (String[] args) 
	{
 B b = new B();
 C c = new C();
 newPrint(b);
 newPrint(c);
    }
 public static void newPrint(A a)
	{
 a.printValue();
 }
 }
--------------------------------------------------------------------
Q12)

class A1 
{
public void printName()
{
System.out.println("Value-A");
}
}
class B1 extends A1
{
public void printName()
{
System.out.println("Name-B");
}
}
public class Test28
{
public static void main (String[] args)
{
A1 b = new B1();
newPrint(b);
}
public static void newPrint(A1 a)
{
a.printName();
}
}
-----------------------------------------------------------------------
Q13)
class A 
{
public void printName()
{
System.out.println("Value-A");
}
}
class B extends A
{
public void printName()
{
System.out.println("Name-B");
}
}
class C extends A
{
public void printName()
{
System.out.println("Name-C");
}
}
public class Test29
{
public static void main (String[] args) {
A b = new B();
C c = new C();
b = c;
newPrint(b);
}
public static void newPrint(A a){
a.printName();
}
}
-----------------------------------------------------------------------
Q14)

class A 
{
public void printName()
{
System.out.println("Value-A");
}
}
class B extends A
{
public void printName()
{
System.out.println("Name-B");
}
}
class C extends A
{
public void printName()
{
System.out.println("Name-C");
}
}
public class Test30
{
public static void main (String[] args) 
{
B b = new B();
C c = new C();
b = c;
newPrint(b);
}
public static void newPrint(A a)
{
a.printName();
 }
 }
----------------------------------------------------------------------
Q15)

class B 
{
public String getCountryName()
{
return "USA";
}
public StringBuffer getCountryName()
{
StringBuffer sb = new StringBuffer();
sb.append("UK");
return sb;
}
}
public class Test32
{
public static void main(String[] args)
{
B b = new B();
System.out.println(b.getCountryName().toString());
}
}

----------------------------------------------------------------------
Q16)

class A
{
public static void printName()
{
System.out.println("Value-A");
}
}
class B extends A
{
public static void printName()
{
System.out.println("Name-B");
}
}
public class Test38
{
public static void main (String[] args) 
{
A a = new B();
a.printName();
}
}
----------------------------------------------------------------------
Q17)

class A
{
public void printName()
{
System.out.println("Name-A");
}
}
class B extends A
{
public void printName()
{
System.out.println("Name-B");
}
public void printValue()
{
System.out.println("Value-B");
}
}
public class Test41
{
public static void main (String[] args)
{
A b = new B();
b.printValue();
}
}
----------------------------------------------------------------------
Q18)

class A 
{
public void printName()
{
System.out.println("Name-A");
}
}
class B extends A
{
public void printName()
{
System.out.println("Name-B");
}
public void printValue() 
{
System.out.println("Value-B");
}
}
public class Test42
{
public static void main (String[] args)
{
A a = new A();
B b = (B)a;
b.printName();
}
}

----------------------------------------------------------------------
Q19)

class A 
{
public void printName() 
{
System.out.println("Name-A");
}
}
class B extends A
{
public void printName()
{
System.out.println("Name-B");
}
public void printValue()
{
System.out.println("Value-B");
}
}
public class Test43
{
public static void main (String[] args){
B b = new B();
A a = (A)b;
a.printName();
}
}
---------------------------------------------------------------------
Q20)

class A
{
public void printName()
{
System.out.println("Name-A");
}
}
class B extends A
{
public String printName()
{
System.out.println("Name-B");
return null;
}
}
public class Test44
{
public static void main (String[] args)
{
A a = new B();
a.printName();
}
}
-----------------------------------------------------------------------
=============================================================================
24-03-25
********
//ShoppngMall.java
package com.ravi.method_overriding;

import java.util.Scanner;

class Customer 
{
 protected String name;

 public Customer(String name) 
 {
     if (name == null || name.isEmpty()) 
     {
         System.err.println("Customer name cannot be empty.");
         System.exit(0);
     }
     this.name = name;
 }

 // Method to calculate total and discount, to be overridden
 public void calculateBill(double... prices) 
 {
     double total = 0;
     for (double price : prices) 
     {
         if (price < 0) 
         {
             System.out.println("Item price cannot be negative.");
             System.exit(0);
         }
         total += price;
     }
     System.out.println("Customer: " + name);
     System.out.println("Total cost RS : " + total);
     System.out.println("Discount: No discount for regular customers.");
 }
}


class GeneralCustomer extends Customer 
{
 public GeneralCustomer(String name) 
 {
     super(name);
 }

 @Override
 public void calculateBill(double... prices) 
 {
     super.calculateBill(prices); 
 }
}


class PrimeCustomer extends Customer 
{
 protected double discountRate = 10.0; 

 public PrimeCustomer(String name) 
 {
     super(name);
 }

 @Override
 public void calculateBill(double... prices) 
 {
     double total = 0;
     for (double price : prices) 
     {
    	 if (price < 0) 
         {
             System.out.println("Item price cannot be negative.");
             System.exit(0);
         }
         total += price;
     }
     double discount = (total * discountRate) / 100;
     double finalAmount = total - discount;

     System.out.println("Customer: " + name);
     System.out.println("Total cost RS :" +  total);
     System.out.println("Discount RS :" + discount);
     System.out.println("Final amount RS :" + finalAmount);
 }
}


class VIPCustomer extends Customer 
{
 protected double discountRate = 15.0; 

 public VIPCustomer(String name) 
 {
     super(name);
 }

 @Override
 public void calculateBill(double... prices) 
 {
     double total = 0;
     for (double price : prices)
     {
    	 if (price < 0) 
         {
             System.out.println("Item price cannot be negative.");
             System.exit(0);
         }
         total += price;
     }
     double discount = (total * discountRate) / 100;
     double finalAmount = total - discount;

     System.out.println("Customer: " + name);
     System.out.println("Total cost RS :" + total);
     System.out.println("Discount RS :" + discount);
     System.out.println("Final amount RS :" + finalAmount);
 }
}


public class ShoppingMall 
{
 public static void main(String[] args) 
 {
	 System.out.println("Please select the Customer Type to get additional Discount :");
	    System.out.println("\t\t 1) General Customer ");
	    System.out.println("\t\t 2) Prime Customer ");
	    System.out.println("\t\t 3) VIP Customer ");
	    
	    
	    Scanner sc = new Scanner(System.in);
	    System.out.println("Please enter Customer type :");
	    int choice = sc.nextInt();
	    Customer customer = null;
	    
	    switch(choice)
	    {
	    case 1:
	    	System.out.println("Please Enter your Name :");
	    	String name = sc.nextLine();
	    	name = sc.nextLine();
	    	customer = new GeneralCustomer(name);
	    	System.out.println("Enter number of Items :");
	    	int item = sc.nextInt();
	    	double items[] = new double[item];
	    	System.out.println("Please Enter the Item Name and Price :");
	    	
	    	for(int i=0; i<items.length; i++)
	    	{	    		
	    		System.out.print(i+1+")Item Name :");
	    		String itemName = sc.nextLine();
	    		itemName = sc.nextLine();
	    		System.out.print("  Item Price :");
	    		int itemPrice = sc.nextInt();
	    		items[i] = itemPrice;	    		
	    	}
	    	generateBill(customer, items);    	
	    	
	    	break;
	    case 2:
	    	System.out.println("Please Enter your Name :");
	    	name = sc.nextLine();
	    	name = sc.nextLine();
	    	customer = new PrimeCustomer(name);
	    	System.out.println("Enter number of Items :");
	    	item = sc.nextInt();
	    	double items1[] = new double[item];
	    	System.out.println("Please Enter the Item Name and Price :");
	    	
	    	for(int i=0; i<items1.length; i++)
	    	{	    		
	    		System.out.print(i+1+")Item Name :");
	    		String itemName = sc.nextLine();
	    		itemName = sc.nextLine();
	    		System.out.print("  Item Price :");
	    		int itemPrice = sc.nextInt();
	    		items1[i] = itemPrice;	    		
	    	}
	    	generateBill(customer, items1);
	    	    	
	    	break;
	    	
	    case 3:
	    	System.out.println("Please Enter your Name :");
	    	name = sc.nextLine();
	    	name = sc.nextLine();
	    	customer = new PrimeCustomer(name);
	    	System.out.println("Enter number of Items :");
	    	item = sc.nextInt();
	    	double items2[] = new double[item];
	    	System.out.println("Please Enter the Item Name and Price :");
	    	
	    	for(int i=0; i<items2.length; i++)
	    	{	    		
	    		System.out.print(i+1+")Item Name :");
	    		String itemName = sc.nextLine();
	    		itemName = sc.nextLine();
	    		System.out.print("  Item Price :");
	    		int itemPrice = sc.nextInt();
	    		items2[i] = itemPrice;	    		
	    	}
	    	generateBill(customer, items2);
	    	
	    	
	    	break;
	    }    
     
 }

 
 public static void generateBill(Customer customer, double... prices)
 {
	 System.out.println("Welcome to Hyderabad Mall :");
     customer.calculateBill(prices);
     System.out.println();
 }
}

1.What is the output of the following code
private class A
{
    public static void main(String[] args) {
        System.out.println("A");
    }
}
A.    A
B.    Compile time error
C.    Compile success but no output
D.    none of the above
Answer: B


2.What is the output of the following code
public class A
{
    void method1(){
        System.out.println("A");    
    }
}
public class B extends A {
    public static void main(String[] args) {
        method1();
    }
}
A.    Compile time error
B.    A
C.    method1()
D.    none of the above
Answer: A

3.Choose the correct option for the following program
class NIT
{
    protected int a, b;
}
public class OopsMCQ extends NIT {
    public static void main(String[] args) {
        System.out.println(a+" "+b);
    }
}
A.    1 2
B.    2 3
C.    0 0
D.    Compile time error
Answer : D


4.What is the output of the following code
class NIT
{
    void nit()
    {
        System.out.print("Welcome");
    }
}

class NIT1 extends NIT
{
    void nit()
    {
        System.out.print(" NareshIT");
    }
}
public class OopsMCQ
{
    static void print(NIT n)
    {
        n.nit();
    }
   
    public static void main(String[] args) {
        NIT nit1 = new NIT();
        NIT1 nit2 = new NIT1();
        NIT nit3 = new NIT1();
       
        print(nit1);
        print(nit2);
        print(nit3);
       
    }
}
A.    Welcome NareshIT Welcome
B.    NareshIT NareshIT
C.    Welcome NareshIT NareshIT
D.    Welcome
Answer: C

5.What is the output of the following code
class NIT
{
    void nit()
    {
        System.out.print("Welcome");
    }
}

class NIT1 extends NIT
{
    void nit()
    {
        System.out.print(" NareshIT");
    }
}
public class OopsMCQ
{
    static void print(NIT1 n)
    {
        n.nit();
    }
   
    public static void main(String[] args) {
        NIT nit1 = new NIT();
        NIT1 nit2 = new NIT1();
        NIT nit3 = new NIT1();
        print(nit1);
        print(nit2);
        print(nit3);
       
    }
}
A.    Welcome NareshIT Welcome
B.    NareshIT NareshIT
C.    Welcome NareshIT NareshIT
D.    Compile time error
Answer: D


6.What is the output of the following code
public class OopsMCQ
{
    private int a = 5;
    public static void main(String[] args) {
        OopsMCQ nit = new OopsMCQ();
        System.out.println(nit.a);
    }
}
A.    Runtime Error
B.    Compile time error
C.    5
D.    none of the above

Answer :C

7.Which error throws in the given below code?
class NIT
{
    protected int a, b;
    public NIT(int a1, int b1)
    {
        a = a1;
        b = b1;
    }
}

public class OopsMCQ
{
    public static void main(String[] args) {
        NIT nit = new NIT();
        System.out.println(nit.a+" "+nit.b);
    }
}
A.    The constructor is undefined
B.    nullpointerException
C.    0 0
D.    It does not return any value
Answer : A


8.What is the output of the following code
class NIT
{
    protected int a, b;
    public NIT(int a1, int b1)
    {
        a = a1;
        b = b1;
    }
    public NIT() {
       
    }
}
public class OopsMCQ
{
    public static void main(String[] args) {
        NIT nit = new NIT();
        System.out.println(nit.a+" "+nit.b);
    }
}
A.    The constructor is undefined
B.    nullpointerException
C.    0 0
D.    It does not return any value
Answer: C


9.Which error throws in the given below code
class NIT
{
    protected void nit()
    {
       
    }
}
class NIT1 extends NIT
{
    void nit()
    {
       
    }
}

public class OopsMCQ
{
    public static void main(String[] args) {
        NIT1 n = new NIT1();
        n.nit();
    }
}
A.    change derived class method to private
B.    change derived class method to protected
C.    Object cannot be initialized
D.    Run time Error
Answer: B

10.What is the output of the following code
class NIT
{
    public NIT()
    {
        System.out.print("NIT ");
    }
}

class NIT1 extends NIT
{
    public NIT1() {
        System.out.print("NIT1 ");
    }
}

class NIT2 extends NIT1
{
    public NIT2() {
        System.out.print("NIT2");
    }
}

public class OopsMCQ
{
    public static void main(String[] args) {
        NIT2 nit = new NIT2();
    }
}
A.    NIT
B.    NIT NIT1 NIT2
C.    NIT2
D.    NIT1 NIT2
Answer: B


11.What is the output of the following code
public class OopsMCQ
{
    void swap_names(String name1,String name2) {
        String temp="";
        temp=name1;
        name1=name2;
        name2=temp;
    }
    public static void main(String[] args) {
        String name1="Roger";
        String name2="Robert";
        System.out.println("Before swapping: name1="+name1+" name2="+name2);
        OopsMCQ t11 = new OopsMCQ();
        t11.swap_names(name1,name2);
        System.out.println("After swapping: name1="+name1+" name2="+name2);
    }
}
A.    Before swapping: name1=Roger name2=Robert<br>
    After swapping: name1=None name2=None
B.    Before swapping: name1=Roger name2=Robert<br>
    After swapping: name1= Robert name2=Robert
C.    Before swapping: name1=Roger name2=Robert<br>
    After swapping: name1=Roger name2=Robert
D.    Before swapping: name1=Roger name2=Robert<br>
    After swapping: name1= Robert  name2= Roger
Answer is C


12.    What is the output of the following code?
class NIT
{
    protected static void nit()
    {
        System.out.println("NIT");
    }
}

class NIT1 extends NIT
{
    protected static void nit()
    {
       
    }
}

public class Abstract extends NIT1 {
   
    public static void main(String[] args) {
        nit();
    }
}
A.    Compiler Error
B.    No output
C.    NIT
D.    None of the above
Answer: B

13.What is the output of the following code
class NIT
{
    protected void nit()
    {
        System.out.println("NIT");
    }
}

class NIT1 extends NIT
{
    protected void nit()
    {
       
    }
}

public class Abstract extends NIT1 {
   
    public static void main(String[] args) {
        nit();
    }
}
A.    Compiler Error
B.    No output
C.    NIT
D.    None of the above
Answer: A

14.What is the output of the following code
public class Poly {
   
    public static void nit(int a)
    {
        System.out.println(a +"Int");
    }
   
    public static void nit(String b)
    {
        System.out.println(b+" String");
    }
   
    public static void nit(Object c)
    {
        System.out.println(c+" Object");
    }
   
    public static void main(String[] args) {
        nit(null);
    }
}
A.    null String
B.    c Object
C.    b String
D.    null Object

Answer : A

15.    What is the output of the following code
public class Poly {
   
    public static void nit(Integer a)
    {
        System.out.println(a);
    }
   
    public static void nit(String b)
    {
        System.out.println(b);
    }
   
    public static void nit(Object c)
    {
        System.out.println(c);
    }
   
    public static void main(String[] args) {
        nit(null);
    }
}
A.    a
B.    c
C.    b
D.    null
E.    Compile time error
Answer : E


16.What is the output?
class A
{
    public int m1()
    {
        return 20;
    }
}
class B extends A
{
    public int  m1()
    {
        return 30;
    }
    public int m2()
    {
        return 40;
    }
}
class C extends B{
    public int m2()
    {
        return 20;
    }
}
public static void main(String[] args) {
        A obj1=new A();
        B obj2=new B();
        C obj3=new C();
        System.out.println(obj1.m1() + obj3.m1() + obj3.m2());
    }
A.    70
B.    90
C.    Error: Method m1 should be overridden in class C.
D.    80
Answer is A


17.What is the output of the following code snippet?
class Parent
{
    int num;
    public Parent(int num) {
        this.num=num;
    }
    int get_num()
    {
        return this.num;
    }
}
class Child extends Parent
{
    int val;
    public Child(int num,int val) {
        super(num);
        this.val=val;
    }
    int get_val()
    {
        return this.val;
    }
}
public static void main(String[] args) {
        Child son = new Child(100,200);
        System.out.print(son.get_num()+" ");
        System.out.println(son.get_val());
    }
A.    200 100
B.    Error: arguments cannot be passed through super() to the parent class constructor
C.    100 200
D.    None 200
Answer : C


18.What is the output of the following code snippet?
public class Test {  
     
    public void myMethod()  
    {  
    System.out.println("Method");  
    }  
     
    {  
    System.out.println(" Instance Block");  
    }  
         
    public void Test()  
    {  
    System.out.println("Constructor ");  
    }  

    static {  
        System.out.println("static block");  
    }  
   
    public static void main(String[] args)
    {  
    Test t1 = new Test();  
    t1.Test();
    t1.myMethod();  
  }  
}
a)Instance block, method, static block, and constructor
b)Method, constructor, instance block, and static block
c)Static block, method, instance block, and constructor
d)Static block, instance block, constructor, and method

Answer: (d)
===========================================================================================================================================================================
25-03-25
********
Q1) Find the Output on Method Overloading with Ambiguity

class Test
{	
	public void accept(long ...b)   
	{
		System.out.println("long :");
	}
	    
	public void accept(double ...s)
	{
		System.out.println("double :");
	}	
	
	public void accept(float ...s)
	{
		System.out.println("float :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();
	}
}
A:
Long:
---------------------------------------------------------------------------
Q2) Find the Output 

class Test
{	
	    
	public void accept(byte ...s)
	{
		System.out.println("byte :");
	}	
	
	public void accept(short ...s)
	{
		System.out.println("short :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();

	}
}
A:
byte:
------------------------------------------------------------------
Q3) Find the Output 

class Test
{		    
	public void accept(int ...s)
	{
		System.out.println("int :");
	}	
	
	public void accept(boolean ...s)
	{
		System.out.println("boolean :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();

	}
}
A:
Compilation error
------------------------------------------------------------------
Q4) Find the Output 

class Test
{	
	    
	public void accept(int ...s)
	{
		System.out.println("int :");
	}	
	
	public void accept(short ...s)
	{
		System.out.println("short :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();
	}
}
A:
short
---------------------------------------------------------------------------
Q5) Find the Output 

class Test
{		    
	public void accept(int ...s)
	{
		System.out.println("int :");
	}	
	
	public void accept(char ...s)
	{
		System.out.println("char :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();

	}

}
A:
char:
---------------------------------------------------------------------------
Q6) Find the Output 

class Test
{		    
	public void accept(short ...s)
	{
		System.out.println("short :");
	}	
	
	public void accept(char ...s)
	{
		System.out.println("char :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();
	}
}
A:
Compilation error!
---------------------------------------------------------------------------
Q7) Find the Output 

class Test
{		    
	public void accept(byte b, int i) {
		System.out.println("byte-int");
	}
	public void accept(int i, byte b) {
		System.out.println("int-byte");
	}
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();  
		t1.accept(1, 2);

	}

}
A:
Error!
---------------------------------------------------------------------------
Q8) Find the Output 

class Test
{		    
	public void accept(byte b, int i) {
		System.out.println("byte-int");
	}
	public void accept(int i, byte b) {
		System.out.println("int-byte");
	}
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test(); 
		byte b1 = 1;
		byte b2 = 2;
		t1.accept(b1, b2);
	}
}
A:
Error! ambigious issue
---------------------------------------------------------------------------
Q9) Find the Output 

class Test
{		    
	public void accept(int b, int i) {
		System.out.println("int-int");
	}
	public void accept(int i, byte b) {
		System.out.println("int-byte");
	}
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test(); 
		byte b1 = 1;
		byte b2 = 2;
		t1.accept(b1, b2);

	}
}
A:
int-byte
---------------------------------------------------------------------------
Q10) Find the Output 

class Test
{		    
	public void accept(int b, int i) {
		System.out.println("int-int");
	}
	public void accept(Byte i, int b) {
		System.out.println("byte-int");
	}
	public void accept(Byte b1 , byte b2) {
		System.out.println("Byte-byte");
	}
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test(); 
		byte b1 = 1;
		byte b2 = 2;
		t1.accept(b1, b2);
	}
}
A:
int-int
-----------------------------------------------------------------------
Assignment : 01
---------------

Develop an application for Payment Processing by using Method Overriding and Var args concept.

Develop a super class Payment which contains 3 sub classes CreditCardPayment,  
DebitCardPayment and UPI.

Coding Requirements :
---------------------
Create a BLC class Payment:

Method to process a payment:

Method Name: processPayment
Access Modifier: public
Return Type: void

Task: Print a generic payment processing message (e.g., "Processing payment").


Subclass CreditCardPayment:

Override processPayment method to print a credit card-specific message:

Method Name: processPayment
Access Modifier: public
Return Type: void

Task: Print a message for credit card payment (e.g., "Processing credit card payment").

Subclass DebitCardPayment:

Override processPayment method to print a debit card specific message:

Method Name: processPayment
Access Modifier: public
Return Type: void
 
Task: Print a message for Debit card payment (e.g., "Processing Debit Card payment").


Subclass UPIPayment:

Override processPayment method to print a UPI Payment-specific message:

Method Name: processPayment
Access Modifier: public
Return Type: void

Task: Print a message for UPI payment (e.g., "Processing UPI payment").


Create an ELC class PaymentProcessing in which take main method and take another static method

Method :

Method to process multiple payments in a single transaction:

Method Name: paymentGateway()
Access Modifier: public
Return Type: void
Arguments: Payment... payments

Task: Loop through each payment and call the processPayment method.

Create instances of CreditCardPayment, DebitCardPayment, and UPIPayment.
Use polymorphism to call the processPayment method on each instance.

Code:
-----
package com.Nit.OOPs_Task_21_1_Wrapper_classes;

public class PaymentProcessing {
	public static void  paymentGateway(Payment... payments)
	{
		for(Payment payment:payments)
		{
			payment.processPayment();
		}
	}
	public static void main(String[] args) 
	{
		CreditCardPayment c1=new CreditCardPayment();
		DebitCardPayment d1=new DebitCardPayment();
		UPIPayment u1=new UPIPayment();
		paymentGateway(c1,d1,u1);

	}

}
class Payment 
{
	public void processPayment()
	{
		System.out.println("Processing payment.");
	}
}
 class CreditCardPayment extends Payment
{
	@Override
	public void processPayment()
	{
		System.out.println("Processing credit card payment.");
	}
}
 class DebitCardPayment extends Payment
 {
	 @Override
		public void processPayment()
		{
			System.out.println("Processing debit card payment.");
		}
 }
 class UPIPayment extends Payment
 {
	 @Override
		public void processPayment()
		{
			System.out.println("Processing UPI payment.");
		}
 }

----------------------------------------------------------------------------------------------------------------------------------
TEST-QUESTION:
--------------
Program Questions
BankApplication
-----------
Create a Bank Application project by using Method Overriding Concept to display
different kinds of account details and calculate interest rate on each different types
of account like saving account, Current account and Fixed deposit account.
Validate all the inputs properly and generate error message, if any input is not appropriate.

Create a BLC class called BankAccount
Fields :
accountHolderName String protected
accountNumber String protected
   balance double protected
   IFSC_CODE public static final String (Initialize the IFSC CODE at the time of declaration,
   will be common for all the Objects)
   
   Use a parameterized constructor to initialize all the fields, In this constructor provide
   error message, if inputs are not in valid format like (see test cases for more details)
a)Account holder name cannot be empty.
b)Account number cannot be empty.
c)Balance cannot be negative.

Methods :

1) Method Name        : calculateInterest()
Argument        : No Argument
Return Type        : void
Access modifier    : public
In this method write a generic message regarding Bank interest Calculation.

2) Method Name        : displayAccountDetails()
Argument        : No Argument
Return Type        : void
Access modifier    : public
In this method display customer records [See the Test cases for more details in the below
of this question]

Create another BLC class SavingsAccount which is sub class of BankAccount

Field :
protected double interestRate = 4.0;

Take a parameterized constructor to initialize super class properties.

Method :

1) Method Name        : calculateInterest()
Argument        : No Argument
Return Type        : void
Access modifier    : public
In this method write a logic to calculate interest rate on Saving Account.

Create another BLC class CurrentAccount which is sub class of BankAccount

Field :
protected double overdraftLimit = 5000.0;

Take a parameterized constructor to initialize super class properties.

Method :

1) Method Name        : calculateInterest()
Argument        : No Argument
Return Type        : void
Access modifier    : public
In this method write a statement that Current accounts do not earn interest.

2) Method Name        : checkOverdraftLimit()
Argument        : No Argument
Return Type        : void
Access modifier    : public
In this method print overdraftLimit amount.

Create another BLC class FixedDepositAccount which is sub class of BankAccount

Field :
protected double interestRate = 4.0;

Take a parameterized constructor to initialize super class properties.

Method :

1) Method Name        : calculateInterest()
Argument        : No Argument
Return Type        : void
Access modifier    : public
In this method write a logic to calculate interest rate on Saving Account.

Field :
protected double interestRate = 6.5;
    depositTerm int protected;
   
    Take a parameterized constructor to initialize super class and current class properties.
    Validate the input deposit term with error message, depositTerm can't be negative.

Method :

1) Method Name        : calculateInterest()
Argument        : No Argument
Return Type        : void
Access modifier    : public
In this method write the logic to calculate the interest amount on FixedDeposit account.

Create an ELC class BankApplication with main method to test this application. Write
Switch case with Scanner class to Test as shown in the below Test Cases.

Test Cases for Output :
------------------------
Test Case 1 :
-------------
Please select the Account Type :
        1) Saving Account
        2) Current Account
        3) Fixed Deposit Account
   Please enter the type of account you want to open : [1/2/3]
   1
   Enter account Holder Name :JohnDeo
   Enter account Number :975645786545
   Enter the Amount :4000000

-----------------------

Account Holder: JohnDeo
Account Number: 975645786545
Balance RS: 4000000.0
IFSC CODE: SBIHYD151285
Savings Account Interest RS: 160000.0
   
   Test Case 2 :
-------------
Please select the Account Type :
        1) Saving Account
        2) Current Account
        3) Fixed Deposit Account
   Please enter the type of account you want to open : [1/2/3]
   2
   Enter account Holder Name :Scott
   Enter account Number :675456789765
   Enter the Amount :12000
--------------------
   Account Holder: Scott
   Account Number: 675456789765
   Balance RS :12000.0
   IFSC CODE :SBIHYD151285
   Current accounts do not earn interest.
   Overdraft limit RS :5000.0

Test Case 3 :
-------------
   Please select the Account Type :
        1) Saving Account
        2) Current Account
        3) Fixed Deposit Account
   Please enter the type of account you want to open : [1/2/3]
   3
   Enter account Holder Name :Martin
   Enter account Number :456787654345
   Enter the Amount :230000
   Enter the deposit term [For How many years you want to deposit] :5
---------------------------
   Account Holder: Martin
   Account Number: 456787654345
   Balance RS :230000.0
   IFSC CODE :SBIHYD151285
   Fixed Deposit Interest for 5 years RS :74750.0

   Test Cases for Input Validation :
---------------------------------
Test Cases 1:
-------------
Please select the Account Type :
        1) Saving Account
        2) Current Account
        3) Fixed Deposit Account
   Please enter the type of account you want to open : [1/2/3]
   1
   Enter account Holder Name :
   Enter account Number :4567876543
   Enter the Amount :128907
   Account holder name cannot be empty.

Test Cases 2:
-------------
   Please select the Account Type :
        1) Saving Account
        2) Current Account
        3) Fixed Deposit Account
   Please enter the type of account you want to open : [1/2/3]
   1
   Enter account Holder Name :Ravi
   Enter account Number :
   Enter the Amount :50000
   Account number cannot be empty.

Test Cases 3:
-------------
Please select the Account Type :
        1) Saving Account
        2) Current Account
        3) Fixed Deposit Account
   Please enter the type of account you want to open : [1/2/3]
   1
   Enter account Holder Name :Ravi
   Enter account Number :567876543456
   Enter the Amount :-9000
   Balance cannot be negative.
   
   Test Cases 4:
-------------
Please select the Account Type :
        1) Saving Account
        2) Current Account
        3) Fixed Deposit Account
   Please enter the type of account you want to open : [1/2/3]
   3
   Enter account Holder Name :Ravi
   Enter account Number :567865434567
   Enter the Amount :90876
   Enter the deposit term [For How many years you want to deposit] :-2
   Deposit term must be positive.

===========================================================================================================================================================================
26-03-25
********
Assignment 01

Nutrition in food can be broken down into proteins, fats, and carbohydrates. Implement the following classes
about food and nutrition to complete this challenge:

1. abstract class Food with the following properties:

double proteins
double fats
double carbs
double tastyScore
void getMacroNutrients [Abstract Method]

2. class Egg which extends class Food and has the following properties:

Constructor to initialize the attributes (proteins, fats, and carbs) in the same order.
int tastyScore = 7
String type = "non-vegetarian"
void getMacroNutrients => prints("An egg has [this.proteins] gms of protein, [this.fats] gms of fats and
[this.carbs] gms of carbohydrates.")

3. class Bread which extends class Food and has the following properties:

Constructor to initialize the attributes (proteins, fats, and carbs) in the same order.
int tastyScore = 8
String type = "vegetarian"
void getMacroNutrients => prints(" A slice of bread has [this.proteins] gms of protein, [this.fats] gms of fats
and [this.carbs] gms of carbohydrates.")

Create an ELC class Testing
The first line contains an integer, n, the number of food items.

Every food item takes input in the next 4 lines where the first line is the name of the food and the next three
lines are method calls (getType, getTaste, and getMacros)

Input :-
1
Bread
getType
getMacros
getTaste
Output :-

Bread is vegetarian
A slice of bread has 4.0 gms of protein, 1.1 gms of fats and 13.8 gms of carbohydrates.
Taste: 8

Code:
-----
package com.Nit.OOPs_Task_22_1_Abstract;

import java.util.Scanner;

public class Testing
{
	public static void main(String[] args)
	{
		
		Scanner sc=new Scanner(System.in);
		int num;
		System.out.println("How many food items you want: ");
		num=sc.nextInt();
		Food f=null;
		for(int i=1;i<=num;i++)
		{
			System.out.println("Enter the Type of Food");
			String type=sc.nextLine();
			type=sc.nextLine();
			System.out.println("Enter the Protiens: ");
			double pro=sc.nextDouble();
			System.out.println("Enter the fats: ");
			double fats=sc.nextDouble();
			System.out.println("Enter the carbs: ");
			double carbs=sc.nextDouble();
			
			if(type.equals("non-vegetarian"))
			{
				f=new Egg(pro, fats, carbs);
			}
			else
			{
				f=new Bread(pro, fats, carbs);
			}
				
			f.getMarcoNutrients();
			
		}
		
	}
}
abstract class Food
{
	double protiens;
	double fats;
	double carbs;
	double tastyScore;
	
	public abstract void getMarcoNutrients();
}
class Egg extends Food
{
	int tastyScore=7;
	String type = "non-vegetarian";
	public Egg(double protiens,double fats,double carbs)
	{
		this.protiens = protiens;
		this.fats = fats;
		this.carbs = carbs;
	}
	public void getMarcoNutrients()
	{
		System.out.println("An egg has"+this.protiens+"gms of protien,"+this.fats+"gms of fats and "+this.carbs+"gms of carbohydrates,Taste : "+tastyScore);
	}
	
}
class Bread extends Food
{
	int tastyScore=8;
	String type = "vegetarian";
	public Bread(double protiens,double fats,double carbs)
	{
		this.protiens = protiens;
		this.fats = fats;
		this.carbs = carbs;
	}
	public void getMarcoNutrients()
	{
		System.out.println("A slice of bread has"+this.protiens+"gms of protien,"+this.fats+"gms of fats and "+this.carbs+"gms of carbohydrates,Taste :"+tastyScore);
	}
}

-------------------------------------------------------------------------------------------------------------
Assignment 02 :

Create an abstract class Student with the following attributes.
Instance Variables:
studentName: protected String
studentClass: protected String
totalNoOfStudents : public static int
Instance Methods:
abstract public : getPercentage( ) with return type int
static Method :
public static int getTotalNoStudents( )
Constructors:
No Argument constructor is a MUST.
Parameter constructor must initialize name and class and it also increase totalNoOfStudents.

Create a class ScienceStudent that inherits from Student.
Add the following attributes
Instance variables:
physicsMarks: private int
chemistryMarks: private int
mathsMarks: private int
Methods:
Override, getPercentage() method to compute and return the percentage of marks(Max marks for a subject
:100)

Create a class HistoryStudent that inherits from Student.
Add the following attributes.
Instance variables:
historyMarks: private int
civicsMarks: private int (Max Marks for a subject : 100)
Method:
Override getPercentage() method to computed and return the percentage of marks(Max marks for a subject
:100)

Create an ELC class StudentTester with main method, use this class to test your code.
Test all the three classes and the abstract method implementation with different inputs.

Code:
-----
//ELC
package com.lab.polymorphism;

public class StudentTester
{
	public static void main(String []args)
	{
		ScienceStudent s1=new ScienceStudent("lok","5",70,90,85);
		System.out.println(s1.getPercentage()+"%");
		ScienceStudent s2=new ScienceStudent("Raj","5",70,90,85);
		System.out.println(s1.getPercentage()+"%");
		System.out.println("Total No of Students :"+ScienceStudent.totalNoOfStudents);
		HistoryStudent h1=new HistoryStudent("nar", "5", 50, 50);
		System.out.println(h1.getPercentage()+"%");
		
	}
}

//BLC
package com.lab.polymorphism;

abstract class Student
{
	protected String studentName;
	protected String studentClass;
	public static int totalNoOfStudents;
	
	abstract public int getPercentage();
	
	public static int getTotalNoStudents()
	{
		return totalNoOfStudents;
	}
	
	public Student()
	{
		
	}
	
	public Student(String studentName, String studentClass) 
	{
		super();
		this.studentName = studentName;
		this.studentClass = studentClass;
		totalNoOfStudents+=1;
	}
	
	

}

class ScienceStudent extends Student
{
	private int physicsMarks;
	private int chemistryMarks;
	private int mathsMarks;
	
	
	
	public ScienceStudent(String studentName, String studentClass, int physicsMarks, int chemistryMarks,
			int mathsMarks) {
		super(studentName, studentClass);
		this.physicsMarks = physicsMarks;
		this.chemistryMarks = chemistryMarks;
		this.mathsMarks = mathsMarks;
	}



	public int getPhysicsMarks() {
		return physicsMarks;
	}



	public int getChemistryMarks() {
		return chemistryMarks;
	}


	public int getMathsMarks() {
		return mathsMarks;
	}


	@Override
	public int getPercentage()
	{
		return (this.physicsMarks+this.chemistryMarks+this.mathsMarks)/3;
		
	}
	
}

class HistoryStudent extends Student
{
	private int historyMarks;
	private int civicMarks;
	
	
	public HistoryStudent(String studentName, String studentClass, int historyMarks, int civicMarks) {
		super(studentName, studentClass);
		this.historyMarks = historyMarks;
		this.civicMarks = civicMarks;
	}
	
	

	public int getHistoryMarks() {
		return historyMarks;
	}



	public int getCivicMarks() {
		return civicMarks;
	}



	@Override
	public int getPercentage() {
		
		return (this.historyMarks+this.civicMarks)/2;
	}
	
	
}
===========================================================================================================================================================================
27-03-25
********
Assignment 01:
--------------
Create a program on abstract class to display Cake details with message and without
event message.

Coding Requirements :
--------------------
Create a BLC class called Cake with following attributes :

Attributes/Properties/Fields: [Access modifier is private for all the fields]

Attribute Name : shape String
Attribute Name :flavor String
Attribute Name :quantity int
Attribute Name :price double

Create a Parameterized Constructor to initialize only shape, flavor and quantity.
[Don't initialize price through Constructor, Manual Initialization]

Methods :
  1) Define setters and getters for all fields
  2) Name of the method : toString()
     Return Type : String
     Modifier : public.
     Task : It must return the data as per below format/example.
     "A Round Chocolate Cake Of 4 KG is Ready @ Rs.1600.0"
     
Create an inherited class "OrderedCake". Inherit this from "Cake"
Define the following Attributes
Attributes: [private for all the fields]
Attribute name : message String

Constructors:(3 only)
   1) No argument Constructor : Ensure shape is Round, flavour is Vanilla,
      qty is 1 kg and price is 400. [see the output test cases]
   2) Parameterized public Constructor : For shape,flavor,quantity
   3) Parameterized public Constructor : For shape,flavor,quantity and message.
   Price is to be dynamically changed @400 per Kg.
Methods :
Name of the method : toString()
     Return Type : String
     Modifier : public.
     Task :Print the following if message is not null 
    "A Square Pineapple Cake of 3KG is Ready with Happy Birthday message @ Rs.1200.0".
      Otherwise display the message from superclass.
      
      
Create an ELC class CakeOrder to display cake details with price and message.

Test Cases for Output :
------------------------
A Round Vanila Cake Of 1 KG is Ready @ Rs.400.0
A Round Chocolate Cake Of 4 KG is Ready @ Rs.1600.0
A Square Pineapple Cake Of 3KG is Ready with Happy Birthday message @ Rs.1200.0

Code:
-----
package com.Nit.OOPs_Task_23_Abstract;

import java.util.*;
public class CakeOrder
{
    public static void main(String[] args)
    {
    OrderedCake cake = null;
    Scanner sc = new Scanner(System.in);
    System.out.println("please enter your choice as[1/2/3]");
    int option = sc.nextInt();
    sc.nextLine();
    switch(option)
    {
        case 1:
           cake = new OrderedCake();
           System.out.println(cake);
           break;
        case 2:
        	System.out.println("Enter the shape of the cake: ");
            String shape = sc.nextLine();
            System.out.println("Enter the flavour of the cake: ");
            String flavor = sc.nextLine();
            System.out.println("Enter the quantity of the cake: ");
            int quantity = sc.nextInt();
            if(quantity>0)
            {
                cake = new OrderedCake(shape,flavor,quantity);
        System.out.println(cake);
        }
        else
        {
            System.out.println("Quantity must be positive.");
        }
        break;
        case 3:
        	System.out.println("Enter the shape of the cake: ");
        shape = sc.nextLine();
        System.out.println("Enter the flavour of the cake: ");
        flavor = sc.nextLine();
        System.out.println("Enter the quantity of the cake: ");
        quantity = sc.nextInt();
        sc.nextLine();
        System.out.println("Enter the message for this cake: ");
        String msg = sc.nextLine();
        if(quantity>0)
        {
        cake = new OrderedCake(shape,flavor,quantity,msg);
        System.out.println(cake);
        }
        else
        {
            System.out.println("Quantity must be positive.");
        }
        break;
        default:
        System.out.println("Invalid choice.");
    }
}
}
abstract class Cake
{
    private String shape;
    private String flavor;
    private int quantity;
    private double price;

    public Cake(String shape,String flavor,int quantity)
    {
        this.shape = shape;
        this.flavor = flavor;
        this.quantity = quantity;
    }
    public String getShape()
    {
        return shape;
    }
    public void setShape(String shape)
    {
        this.shape = shape;
    }
    public String getFlavor()
    {
        return flavor;
    }
    public void setFlavor(String flavor)
    {
        this.flavor = flavor;
    }
    public int getQuantity()
    {
        return quantity;
    }
    public void setQuantity(int quantity)
    {
        this.quantity = quantity;
    }
    public double getPrice()
    {
        return price;
    }
    public void setPrice(double price)
    {
        this.price = price;
    }
    public abstract String toString();
}
class OrderedCake extends Cake
{
    private String message;
    public OrderedCake()
    {
        super("Rounded","Vanilla",1);
        setPrice(400.0);
    }
    public OrderedCake(String shape,String flavor,int quantity)
    {
        // this.shape = shape;
        // this.flavor = flavor;
        // this.quantity = quantity;
        super(shape,flavor,quantity);
        setPrice(quantity*400.0);
    }
    public OrderedCake(String shape,String flavor,int quantity,String message)
    {
        super(shape,flavor,quantity);
        setPrice(quantity*400.0);
        this.message = message;
    }
    @Override
    public String toString()
    {
         if (message != null) {
            return "A"+getShape()+""+getFlavor()+" Cake of "+getQuantity()+"KG is Ready with "+message+" message @ Rs."+getPrice();
        } else {
            return  "A "+getShape()+" "+getFlavor()+" Cake of "+getQuantity()+" KG is Ready @ Rs."+getPrice();
        }

    }
}
==========================================================================================================================================================================
01-04-25
Assignment 01:
--------------
Define an abstract class 'Shape' with following specifications
Methods:
1. Name: getArea
   ReturnType: double
   Modifier: abstract
2. Name: printDetails
    ReturnType: double
    Modifier: abstract
Define sub-classes of Shape as Rectangle, Circle and Triangle that overrides the methods of Shape class
Rectangle class
Fields:
	1. length - double
	2. breadth - double
Constructors:
	A parametrized constructor the accepts and initializes length and breadth.
Circle class
Fields:
	1. radius - double
Constructors:
	A parametrized constructor the accepts and initializes radius.
Triangle class
Fields:
	1. base - double
	2. height - double
Constructors:
	A parametrized constructor the accepts and initializes base and height.
All the sub-classes of Shape should override the methods of the shape.
getArea() should return the area of the respective shape.
printDetails() should print the shape details as below
	input:  Rectangle(30.3, 45.4)
	output:
		Type = Rectangle
		Length = 30.3
		Breadth = 45.4
		Area = 1375.62
	input: Circle(23.2)
	output:
		Type = Circle
		Radius = 23.2
		Area = 1690.0736
	input: Triangle(146.2, 40.0);
	output:
		Type = Triangle
		Base = 146.2
		Height = 40.0
		Area = 2924.0
Given a class Testing with main method to test your code.

Code:
-----
//BLC
package com.lab.abstraction;

abstract class Shape
{
	abstract double getArea();
	abstract void printDetails();
	
}

class Rectangle extends Shape
{
	double length;
	double breadth;

	public Rectangle(double length, double breadth) {
		super();
		this.length = length;
		this.breadth = breadth;
	}

	@Override
	double getArea() {
		return length*breadth;
	}

	@Override
	void printDetails() {
		System.out.println("Type = Rectangle");
		System.out.println("Length = "+length);
		System.out.println("Breadth = "+breadth);
		System.out.println("Area = "+getArea());
		
		
	}
	
}

class Circle extends Shape
{
	double radius;
	
	
	public Circle(double radius) {
		super();
		this.radius = radius;
	}

	@Override
	double getArea() {
		
		return 3.14*radius*radius;
	}

	@Override
	void printDetails() {
		System.out.println("Type = Circle");
		System.out.println("Radius = "+radius);
		System.out.println("Area = "+getArea());
		
	}
	
}


class Triangle extends Shape
{
	double base;
	double height;
	
	

	public Triangle(double base, double height) {
		super();
		this.base = base;
		this.height = height;
	}

	@Override
	double getArea() {
		
		return 0.5*base*height;
	}

	@Override
	void printDetails() {
		System.out.println("Type = Triangle");
		System.out.println("Base = "+base);
		System.out.println("Height = "+height);
		System.out.println("Area = "+getArea());
		
	}
	
}

//ELC
package com.lab.abstraction;

public class Shapes
{
	public static void main(String[]args)
	{
		Rectangle r1=new Rectangle(30.3, 45.4);
		r1.printDetails();
		System.out.println("----------------------------------------------------------");
		Circle c1=new Circle(23.2);
		c1.printDetails();
		System.out.println("----------------------------------------------------------");
		Triangle t1=new Triangle(146.2, 40.0);
		t1.printDetails();
	}

}
-------------------------------------------------------------------------
Assignment 02 :
---------------
creating a Java program to model different animal romes using abstract classes and subclasses. Follow the instructions below to complete the program:

Start by defining an abstract class called Animal with an abstract method:

roam(): This method should represent the roaming style of Animal.
Create a subclass named Lion that extends the Animal class. Implement the roam() method to print:
"Lion is roaming"

Create another subclass named Dog that also extends the Animal class. Implement the roam() method to print:
"Dog is roaming"

In the ELC, Main class, write a main method to accomplish the following by using upcasting.

Create an instance of the Lion class.
Call the roam() method on the lion instance.
Create an instance of the Dog class.
Call the roam() method on the Dog instance.
Ensure that your program output displays the unique roaming style of both the lion and the dog.

After Execution add the following Methods in the sub classes :

Lion class :
-------------
public void roar() : Add this method in the Lion class to show the roaring behavior of Lion

Dog class :
-----------
public void bark() : Add this method in Dog class to show the barking behavior of Dog class

Take another static method in the ELC class
Method name : getAnimal()
return type : void
Parameter type : Animal
Modifiers : public, static

In the body of getAnimal() method, call both the methods of Lion and Dog class.

Code:-
------
//BLC
package com.lab.abstraction;

abstract class Animal {
	
	abstract void roam();

}


class Lion extends Animal
{

	@Override
	void roam() {
	System.out.println("Lion is Roaming");
		
	}
	
	public void roar()
	{
		System.out.println("roaring behavior of Lion");
	}
	
}

class Dog extends Animal
{

	@Override
	void roam() {
		System.out.println("Dog is Braking");
		
	}
	
	public void bark()
	{
		System.out.println("barking behavior of Dog");
	}
	
}

//ELC
package com.lab.abstraction;

public class AnimalElc 
{

	public static void main(String [] args)
	{
		Animal lion=new Lion();
		lion.roam();
		
		Animal dog=new Dog();
		dog.roam();
				
		getAnimal(lion);
		getAnimal(dog);
	
	}
	
	public static void getAnimal(Animal animal)
	{
		if(animal instanceof Lion)
		{
			((Lion) animal).roar();
		}
		
		else if(animal instanceof Dog)
		{
			((Dog) animal).bark();
		}
		
	}
	
}
=================================================================
02-04-25
Assignment :
-----------
Develop a scenario based program by using abstract class and abstract method for displaying different kinds of Products like Digital Product and Physical Product as well as discount and tax applicable on these products

We need to develop one program on Hierarchical Inheritance, where Product is the super class and It has two sub classes DigitalProduct and PhysicalProduct.

Validate all the user inputs in constructor and where it is required.

Coding Requirements :
---------------------
Create one BLC class called Product.

Attributes/Properties/Fields :[Access Modifier private for all the fields]
-------------------------------------------------------------------
name : String
price : double 
category : String

Take a parameterized constructor to initialize all the fields.

Methods :

a) Method Name     : applyDiscount()
Argument           : One argument of type double [double percentage]
Return Type        : void
Access modifier    : public and abstract


b) Method Name     : calculateTax()
Argument           : No Argument
Return Type        : double
Access modifier    : public and abstract


c) Setter and getter for price variable.

d) Generate toString() method to print Object properties. 


Create another class DigitalProduct which extends from Product class.

Attributes/Properties/Fields :[Access Modifier private for all the fields]
-------------------------------------------------------------------------
licenseKey : String

Take a parameterized constructor to initialize all the fields.

Methods :
a) Override applyDiscount(double percentage) method
   In this method find out the discount based on the given percentage on the product price.
   Discount percentage is 10 %
   Update the new price based on the given discount.
   Print both Discount and Updated Price.


b)Override calculateTax() method 
  In this method you should return 5% tax on the discounted price.

c) Generate toString() to print all the fields


Create another class PhysicalProduct which extends from Product class.

Attributes/Properties/Fields :[Access Modifier private for all the fields]
-------------------------------------------------------------------------
shippingWeight : double

Take a parameterized constructor to initialize all the fields.

Methods :
a) Override applyDiscount(double percentage) method
   In this method find out the discount based on the given percentage on the product price.
   Discount percentage is 15 %
   Update the new price based on the given discount.
   Print both Discount and Updated Price.


b)Override calculateTax() method 
  In this method you should return 8% tax on the discounted price.

c)
Method Name        : calculateShippingCost()
Argument           : No argument
Return Type        : double
Access modifier    : public 
 
In this method you need to calculate and return shipping cost of the Physical Product. The defined shipping cost is 5 RS per KG.

d) Generate toString() to print all the fields

Create an ELC class called ProductStore.

Inside main method display the following details as a Menu.
Select Product Type:
1. Digital Product
2. Physical Product

Write Switch case with Scanner class to select Digital OR Physical Product


Test Cases for Output :
------------------------
Test Case 1 :
-------------
Select Product Type:
1. Digital Product
2. Physical Product

Test Case 2 :
-------------
Select Product Type:
1. Digital Product
2. Physical Product
1
Enter Digital Product Name :Java E Book
Enter Product Price :1499.89
Enter Product Category :Electronics
Enter Product License Key :E_BUK_0001
Digital Product :
Product Name: Java E Book
Category: Electronics
Price RS:1499.89
License Key: E_BUK_0001
Discount applied :149.989
New Price :1349.901
Tax RS : 67.49505

Test Case 3 :
-------------
Select Product Type:
1. Digital Product
2. Physical Product
2
Enter Physical Product Name :Laptop
Enter Product Price :112000
Enter Product Category :Electronics
Enter Product weight :2.9
Physical Product:
Product Name: Laptop
Category: Electronics
Price RS:112000.0
Shipping Weight: 2.9 kg
Discount applied :16800.0
New Price :95200.0
Tax RS :7616.0
Shipping Cost RS :14.5

Test Cases for Input Validation :
---------------------------------
Test Case 1:
-------------
Select Product Type:
1. Digital Product
2. Physical Product
1
Enter Digital Product Name :null
Enter Product Price :12890
Enter Product Category :Electronics
Enter Product License Key :E_BUK_0001
Product name cannot be empty or null.

Test Case 2:
-------------
Select Product Type:
1. Digital Product
2. Physical Product
2
Enter Physical Product Name :Laptop
Enter Product Price :-10000
Enter Product Category :Electronics
Enter Product weight :2.9
Price cannot be negative.


Test Case 3:
-------------
Select Product Type:
1. Digital Product
2. Physical Product
1
Enter Digital Product Name :E_Java_Book
Enter Product Price :1567.90
Enter Product Category :null
Enter Product License Key :E_BUK_0001
Category cannot be empty or null.

Code:-
-----
package com.Nit.OOPs_Task_24_Abstract;
import java.util.*;
public class ProductStore {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Select Product Type: ");
		System.out.println("1. Digital Product");
		System.out.println("2. Physical Product");
		int option = sc.nextInt();
		sc.nextLine();
		switch(option)
		{
		case 1:
			System.out.print("Enter Digital Product Name :");
			String Pname = sc.nextLine();
			System.out.print("Enter Product Price :");
			double price = sc.nextDouble();
			System.out.print("Enter Product Category :");
			String cat = sc.nextLine();
			cat=sc.nextLine();
			System.out.print("Enter Product License Key :");
			String PLiKey = sc.nextLine();
			
			if(Pname==null||Pname.isEmpty())
			{
				System.err.println("Product name cannot be empty or null.");
			}
			else if(price<0)
			{
				System.err.println("Price cannot be negative.");
			}
			else if(cat==null||cat.isEmpty())
			{
				System.err.println("Category cannot be empty or null.");
			}
			else
			{
				System.out.println("Digital Product :");
				Product p = new DigitalProduct(Pname, price, cat, PLiKey);
				System.out.println(p);
				p.applyDiscount(10);
				System.out.println("TAX RS : "+p.calculateTax());
			}
			
			break;
		case 2:
			System.out.print("Enter Digital Product Name :");
			Pname = sc.nextLine();
			System.out.print("Enter Product Price :");
			price = sc.nextDouble();
			sc.nextLine();
			System.out.print("Enter Product Category :");
			cat = sc.nextLine();
//			sc.nextLine();
			System.out.print("Enter Product weight :");
			double pWeight = sc.nextDouble();
			if(Pname==null||Pname.isEmpty())
			{
				System.err.println("Product name cannot be empty or null.");
			}
			else if(price<0)
			{
				System.err.println("Price cannot be negative.");
			}
			else if(cat==null||cat.isEmpty())
			{
				System.err.println("Category cannot be empty or null.");
			}
			else
			{
				System.out.println("Physical Product: ");
				PhyscialProduct Pp = new PhyscialProduct(Pname, price, cat, pWeight);
				System.out.println(Pp);
				Pp.applyDiscount(15);
				System.out.println("TAX RS: "+Pp.calculateTax());
				System.out.println("Shipping Cost RS :"+Pp.calculateShippingCost());
			}
			
			break;
		default:
			System.out.println("Invalid input. Please enter valid input");
			
		}

	}

}
abstract class Product
{
	private String name;
	private double price;
	private String category;
	public Product(String name, double price, String category) {
		this.name = name;
		this.price = price;
		this.category = category;
	}
	public abstract void applyDiscount(double percentage);
	public abstract double calculateTax();
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	@Override
	public String toString() {
		return "Product Name:" + name + "\nCategory: " + category + "\nPrice RS:" + price ;
	}
	
}
class DigitalProduct extends Product
{
	private String licenseKey;

	public DigitalProduct(String name, double price, String category, String licenseKey) {
		super(name, price, category);
		this.licenseKey = licenseKey;
	}
	@Override
	public void applyDiscount(double percentage)
	{
		double discount = getPrice()*(percentage/100);
		setPrice(getPrice()-discount);
		System.out.println("Discount applied : "+discount);
		System.out.println("New Price : "+getPrice());
	}
	@Override
	public double calculateTax()
	{
//		return ((getPrice()-getPrice()*0.1))*0.05;
		return 0.05*getPrice();
	}
	@Override
	public String toString() {
		return super.toString()+"\nLicense Key: "+licenseKey;
	}
	
}
class PhyscialProduct extends Product
{
	private double shippingWeight;

	public PhyscialProduct(String name, double price, String category, double shippingWeight) {
		super(name, price, category);
		this.shippingWeight = shippingWeight;
	}
	@Override
	public void applyDiscount(double percentage)
	{
		double discount = getPrice()*(percentage/100);
		setPrice(getPrice()-discount);
		System.out.println("Discount appiled : "+discount);
		System.out.println("New Price is : "+getPrice());
	}
	@Override
	public double calculateTax()
	{
		return 0.08*getPrice();
	}
	public double calculateShippingCost()
	{
		return shippingWeight*5;
	}
	@Override
	public String toString() {
		return super.toString()+"\nShipping Weight: "+shippingWeight+" kg";
	}
	
}
===========================================================================================================================================
03-02-25
MCQ on abstract Method and OL, OR :
---------------------------------------
Q1)
class A 
{
static void foo()
{
System.out.println("A");
}
}

class B extends A
{
static int foo()
{
System.out.println("B");
return 1;
}
}
A:
A
-------------------------------------------------------------------
Q2)

class A 
{
static void foo() 
{ 
System.out.println("A");
}
}

class B extends A 
{
static void foo() 
{ 
System.out.println("B");
}
}	

class Exam 
{
public static void main(String[] args) 
{
A obja;
B objb = new B();
objb.foo();
obja = objb;
obja.foo();
}
}

static method, NSV and SV are always executed from current reference.

A:
B,A
-----------------------------------------------------------------------
Q3)


class A 
{
void foo() 
{
System.out.println("A");
}
}

class B extends A 
{
void foo() 
{
System.out.println("B");
}
}	

class Exam
{
public static void main(String[] args)
{
A obja;
B objb = new B();
objb.foo();
obja = objb;
obja.foo();
}
}
A:
B,B
-----------------------------------------------------------------------
Q4)

public class Exam
{
 public static void main(String[] args)
{
    B b = new C();
    A a = b;
    if (a instanceof A) System.out.println("A");
    if (a instanceof B) System.out.println("B");
    if (a instanceof C) System.out.println("C");
    if (a instanceof D) System.out.println("D");
  }
}

class A {}
class B extends A {}
class C extends B {}
class D extends C {}

A:
A,B,C
----------------------------------------------------------------------
Q5)

class C 
{
}
class D extends C
{
}
class A
{
public C getOBJ()
{
System.out.println("class A - return C");
return new C();
}
}
class B extends A
{
public D getOBJ()
{
System.out.println("class B - return D");
return new D();
}
}
public class Test31
{
public static void main(String... args) 
{
     A a = new B();
     a.getOBJ();
}
}
A:
class A - return C
----------------------------------------------------------------------
Q6)

class First 
{
public Object method1()
{
System.out.println("super method1");
return new String("Base");
}
}

class Second extends First 
{
public String method1() 
{
System.out.println("Subclass method1");
return new String("Derived");
}
}

class Test20
{
public static void main(String[] args)
{
First f = new Second();
String s = f.method1();
}

}
A:
Subclass method1
---------------------------------------------------------------------
Q7)

class Vehicle {
    public void printSound() {
        System.out.println("vehicle");
    }
}

class Car extends Vehicle {
    public void printSound() {
        System.out.println("car");
    }
}

class Bike extends Vehicle {
    public void printSound() {
        System.out.println("bike");
    }
}

public class Exam {
    public static void main(String[] args) {
        Vehicle v = new Car();
        Car c = (Car) v;
        
        v.printSound();
        c.printSound();
    }   
}
A:
Car
Car
--------------------------------------------------------------------
Q8)

class Base
{
    String s = "Base";
    String show()
	{
       return s;
    }
}
class Derived extends Base
{
  String s = "Derived";
}
public class Test8 
{
  void print(Base b)
  {				  
    System.out.println(b.show());
  }
  void print(Derived d)
  {
    System.out.println(d.show());
  }
  public static void main(String[] args)
  {
              Test8 t = new Test8();
              Base b = new Derived();
              t.print(b);
  }
}
A:
Base
----------------------------------------------------------------------
Q9)

interface ITest
{
           public void setVal();
}

public class Test7  
{
  private String a;
  public void aMethod()
   {
      String b=" World";
      ITest it = new ITest() 
	  {
         public void setVal()
		 {
           a = "Hello";               
         }
	   };
          it.setVal();
          System.out.println(a + b);
          }
          public static void main(String[] args)
          {
          Test7 t = new Test7();
          t.aMethod();
          }
       }
A:
Hello World
----------------------------------------------------------------------
Q10)

class Test12
{
	public static void main(String[] args) 
	{
		System.out.println("M");
		Alpha.val=100;
		System.out.println("F");
		Alpha a = new Alpha();
	}
}
class Beta
{
	static 
	{
		System.out.println("Q");
		
	}
	Beta()
	{
		System.out.println("D");
	}
}
class Alpha extends Beta
{
	static int val;
	static 
	{
		System.out.println("W");
		val=1000;
	}
	
	Alpha()
	{
		System.out.println("C");
	}

	static 
	{
		System.out.println("R");
		val=1000;
	}
}
A:
M,F,W,R,Q,D,C
----------------------------------------------------------------------
Q11)

class Foo 
{ 
 public int a = 3; 
 public void addFive() 
{
	 a += 5; System.out.print("f "); } 
 } 
 class Bar extends Foo 
{ 
 public int a = 8; 
 public void addFive() 
{ 
this.a += 5; 
System.out.print("b " ); 
} 
 }  
class Test5 
{
	public static void main(String[] args) 
	{
		 Foo f = new Bar(); 
		 f.addFive(); 
		 System.out.println(f.a);
	}
}
A:
b 3
-----------------------------------------------------------------------
Q12)

public abstract class AbstractTest 
{
    public int getNum() 
    {
        return 45;
    }
    public abstract class Bar //Inner class
    {
        public int getNum() 
        {
            return 38;
        }
    }
    public static void main (String [] args) 
    {
        AbstractTest t = new AbstractTest() 
        {
            public int getNum() 
            {
                return 22;
            }
        };
        AbstractTest.Bar f = t.new Bar() 
        {
            public int getNum() 
            {
                return 57;
            }
        };
        
        System.out.println(f.getNum() + " " + t.getNum());
    }
}
A:
57 22
--------------------------------------------------------------------
Q13)

abstract class A 
{
 public void printValue()
 {
 System.out.println("A");
 }
}

public class b209
{ 
 public static void main (String[] args)
 {
   A a1 = new A() 
	   { 
       };
 a1.printValue(); 
 }
 }
A:
A
-----------------------------------------------------------------------
Q14)

 Which among the following code have errors

a) abstract class A {	
     void m1();
   }

b) public class A {	
     abstract void m1();
   }

c) abstract public class A {	
    abstract void m1();
   }

d) abstract public class A 
   {	
     void m1() { }
   }

e) public abstract class A {
    abstract void m1();	
    A(){ }	
    void m2() { }
    }

f) public abstract class A {
     abstract int x = 100;	
     abstract void m1();
     abstract void m2();
    }

g) public abstract class A {	
    abstract void m1();
   }
   public class Test {
   public static void main(String[] args) {
    A a = new A();
    }
   }

h) public abstract class A 
   {	
    abstract void m1();
    A(){ }
    static void m2() 
    {
    System.out.println("Hello Java!"); 
    }
   }
    public class B extends A {
     void m1(){
        A.m2(); 
     }
    }

i) public abstract class A {	
    abstract void m1();
   private A(){ }
   }
   public class B extends A { }
A:
b,d,g,h.
---------------------------------------------------------------------
Q15)

public abstract class Alpha {
  abstract void m1(Alpha a);
}
public class Beta extends Alpha {
void m1(Alpha a) {
  System.out.println("One"); 	
 }
}
public class Gamma extends Beta {
void m1(Beta b) {	
 System.out.println("Two");
 super.m1(new Beta());
 }
}
public class Test {
public static void main(String[] args) {
Gamma c = new Gamma();
 c.m1(new Beta());
  }
}
A:
two
one
----------------------------------------------------------------------
Q16)

class Grandparent 
{
    String name = "granparent";
    void act() 
    {
        System.out.println(name);
    }
}

class Parent extends Grandparent 
{
    String name = "parent";
}

class Child extends Parent 
{
    String name = "child";
    void act() 
    {
        System.out.println(name);
    }
}

public class Exam 
{
   public static void main(String[] args) 
   {
        Parent yo = new Child();
        yo.act();
    }
}
A:
Child
----------------------------------------------------------------------
Q17)


class Animal {
 String name = "Rocky ";
 String makeNoise() { return "generic noise"; }
 }
 class Tiger extends Animal {
String name = "stripes ";
 String makeNoise() { return "roarrrrrrrrrrr"; }
 }
 public class Zoo {
 public static void main(String[] args) { new Zoo().go(); }
 void go() {
 Animal m = new Tiger();
 System.out.println(m.name + m.makeNoise());
 }
}
A:
Rocky generic noise
---------------------------------------------------------------------
Q18) 
class Animal { }
class Horse extends Animal { }
class q31
{
      public void doStuff(Animal a) 
      {
           System.out.println("In the Animal version");
      }
      public void doStuff(Horse h) 
      {
           System.out.println("In the Horse version");
      }
      public static void main (String [] args) 
      {
            q31 q = new q31();
            Animal ob1 = new Animal();
            Animal ob2 = new Horse();
            q.doStuff(ob1);
            q.doStuff(ob2);
     }
}
A:
In the Animal version
In the Animal version
----------------------------------------------------------------------
Q19)

class Animal 
{
      static void doStuff() 
      {
             System.out.print("a  ");
      }
}
class q31 extends Animal 
{
      static void doStuff() 
      {        
            System.out.print("d  ");
      }
      public static void main(String [] args) 
      {
            Animal [] a = {new Animal(), new q31(), new Animal()};
            for(int x = 0; x < a.length; x++)
                 a[x].doStuff();               
      }
}
A:
a,d,a
----------------------------------------------------------------------
Q20)

class Dog
{
}
class Cat extends Dog
{
}
class Exam
{
	public static void main(String... args)
	{
		Dog d = new Dog();
		Cat c = new Cat();
		if(d.equals(c))
		{
			System.out.println("true");
		}
			else
		{
				System.out.println("false");
		}
	}
}
A:
False
======================================================================
04-04-25
********
1.Choose the correct output of the following program

interface Add
{
    int add(int b);
}
public class FunctionalInterface {
   
    public static void main(String[] args)
    {
        int a = 10;
       
        Add add = (int b) -> b;
        System.out.println(add.add(a));
    }
}
A:
10
--------------------------------------------------------------------------

2.Choose the correct output of the following program
@FunctionalInterface
interface Cube
{
    int cube(int b);
}
public class FunctionalInterface {
   
    public static void main(String[] args) {
        int a = 21;
       
        Cube cube = b -> b*b*b;
        System.out.println(cube.cube(a));
    }
}
A:
9261
--------------------------------------------------------------------------

3.What is the output of the following program
interface Add
{
    int add(int b);
    int add(int a, int b);
}
public class FunctionalInterface {
    public static void main(String[] args) {
        int a = 21;
        Add add = b -> b+b;
        System.out.println(add.add(a));
    }
}
A:
42
--------------------------------------------------------------------------

4.What is the output of the following program
@FunctionalInterface
interface Str
{
    int methodStr(String str);
}
public class FunctionalInterface {
    public static void main(String[] args) {
        Str str = (String s) -> "2";
        System.out.println(str.methodStr("2"));
    }
}

A:
2
--------------------------------------------------------------------------

5.Choose the correct output of the following program
public class FunctionalInterface {
    public static void main(String[] args) {
        String str -> str.compareTo("goolge");
        System.out.println(str);
    }
}
A:
error ';' is expected at line 3.
--------------------------------------------------------------------------

6.What is the output of the following code
@FunctionalInterface
interface NIT
{
    String get(String nit);
}
public class FunctionalInterfaceExample
{
    public static void main(String[] args) {
        NIT nit = (str) -> str +"Welcome to"; // str concatenate to "Welcome to"
        NIT nit1 = (str) -> str + "NARESHIT"; // str1 concatenate to "NARESHIT"
        information("Hai ", nit); // HAI + Welcome to
        information("Hai ", nit1); // HAI + NARESHIT
    }
    public static void information(String str, NIT obj) {
        String result = obj.get(str);
        System.out.println(result);
    }
}

A:
Hai welcome to 
Hai NareshIT
--------------------------------------------------------------------------
7.By using FunctionalInterface annotation following code is correct or not?
@FunctionalInterface
interface NIT
{
    String myInterface(String a);
    String newInterface();
   
}

A:
not correct
--------------------------------------------------------------------------
8.What is the output of the following code
@FunctionalInterface
interface NIT{
 int square(int x);
 default int add(int a, int b){
     return a+b;
 }
 default int sub(int a, int b){
     return a-b;
 }
 static int multiply(int a, int b){
     return a*b;
 }
 static int divide(int a, int b){
     return a/b;
 }
}
public class FunctionalInterfaceExample implements NIT{
 public static void main(String[] args){
     int a = 25;
     int b = 5;
     FunctionalInterfaceExample fun = new FunctionalInterfaceExample();
     int add = fun.add(a,b);
     int sub = fun.sub(a,b);
     int mul = NIT.multiply(a,b);
     int div = NIT.divide(a,b);
     System.out.println(add+" "+sub+" "+mul+" "+div+" "+fun.square(6));
}
 @Override
 public int square(int x) {
     return x*x;
 }
}
A:
30 20 125 5 36
--------------------------------------------------------------------------
9.What is the output of the following code
@FunctionalInterface
interface NIT{
 int square(int x);
 static int add(int a, int b){
     return a+b;
 }
 static int sub(int a, int b){
     return a-b;
 }
 static int multiply(int a, int b){
     return a*b;
 }
 static int divide(int a, int b){
     return a/b;
 }
}
public class FunctionalInterfaceExample{
 public static void main(String[] args){
     int a = 25;
     int b = 5;  
     int add = NIT.add(a,b);
     int sub = NIT.sub(a,b);
     int mul = NIT.multiply(a,b);
     int div = NIT.divide(a,b);
     System.out.print(add+" "+sub+" "+mul+" "+div+" ");
     
     NIT sq = (x) ->
     {
         return x*x;
     };
     System.out.print(sq.square(6));
 }
}
A:
30 20 125 5 36
--------------------------------------------------------------------------
10. public class FunctionalInterfaceExample{
    public static void main(String[] args) {
        Function<String, String> fun = str -> str.substring(2,5);
        System.out.println(fun.apply("Hyderabad"));
    }
}
A:
der
--------------------------------------------------------------------------

11.By using FunctionalInterface annotation following code is correct or not?
@FunctionalInterface
interface NIT
{
    String myInterface(String a);
    default void nit()
    {
       
    }
    default int newInterface(int a)
    {
        return a;
    }
}
A:
incorrect
--------------------------------------------------------------------------
12.Is there any error in following code?
@FunctionalInterface
interface NIT
{
    String myInterface(String a); //abstract method
    int hashCode(); //Object class methods
    String toString();    
}
A:
at hashcode() and toString().
--------------------------------------------------------------------------
13.Is there any error in following code?
@FunctionalInterface
interface NIT
{
    String myInterface(String a); //abstract method
    @Override
    String toString(); //Object class method
    void wait();
    void notify();
   
}
A:
error
--------------------------------------------------------------------------
14.What is the output of the following code
public class FunctionalInterfaceExample{
    public static void main(String[] args) {
        Predicate<Integer> grater = a -> a >15;
       
        Predicate<Integer> less = a -> a <10;
       
        boolean bool = grater.test(20);
        boolean bool1 = less.test(5);
        System.out.println(bool);
        System.out.println(bool1);        
       
    }
}
A:
true
true
--------------------------------------------------------------------------

15.What is the output of the following code
public class FunctionalInterfaceExample{
    public static void main(String[] args)
    {
        String str[]= {"Java","Python","Naresh","IT"};
       
        Predicate<String> prediacte = p -> p.endsWith("va");
        for(String s: str)
        {
            if(prediacte.test(s))
                System.out.println(s);
        }
    }
}
A:
Java
--------------------------------------------------------------------------

16.What is the output of the following code
interface NIT
{
    public int myInterface(int a);
}

public class Java8 {
    public static void main(String[] args) {
        NIT nit = (a) -> a+1;
        int i = nit.myInterface(6);
        System.out.println(i);
    }
}
A:
7
--------------------------------------------------------------------------
17.What is the output of the following code?
@FunctionalInterface
interface NIT
{    
    int myInterface(int a);
}

@FunctionalInterface
interface NewInterface
{
    void alpha(String a);
}

public class Java8 {
    public static void main(String[] args) {
        NIT nit = (a) -> a*a*a;
        System.out.println(nit.myInterface(5));
        NewInterface result = (a) -> System.out.println("Welcome to NareshIT");
        result.alpha("");
    }
}
A:
125
Welcome to NareshIT
--------------------------------------------------------------------------
18.What is the output of the following code?
public class Java8 {
    public static void main(String[] args) {
        Consumer<Integer> value = (a) -> System.out.println(a*3);
        value.accept(5);
    }
}
A:
15
--------------------------------------------------------------------------

19. What is the output of the following code?
public class Java8 {
    public static void main(String[] args) {
        Consumer<String> value = (a) -> System.out.println("Naresh I Technologies");
        value.accept("");
    }
}
A:
Naresh I Technologies
--------------------------------------------------------------------------

20. What is the output of the following code?
public class Java8 {
    public static void main(String[] args) {
        Consumer<String> value = (a) -> System.out.println(a.toLowerCase());
        value.accept("NareshIT");
    }
}
A:
nareshit
--------------------------------------------------------------------------

